import pymel.core as pm
from alShaders import *

class AEalSurfaceTemplate(alShadersTemplate):
	controls = {}
	params = {}
	def setup(self):
		self.params.clear()
		self.params["diffuseStrength"] = Param("diffuseStrength", "Strength", "Multiplier on the intensity of the diffuse reflection.", "float", presets=None)
		self.params["diffuseColor"] = Param("diffuseColor", "Color", "Color of the diffuse reflection.", "rgb", presets=None)
		self.params["diffuseRoughness"] = Param("diffuseRoughness", "Roughness", "Roughness of the diffuse reflection. Higher values cause the surface to appear flatter and darker.", "float", presets=None)
		self.params["backlightStrength"] = Param("backlightStrength", "Strength", "Multiplier on the intensity of the backlight transmission.", "float", presets=None)
		self.params["backlightColor"] = Param("backlightColor", "Color", "Color of the backlight transmission.", "rgb", presets=None)
		self.params["backlightIndirectStrength"] = Param("backlightIndirectStrength", "Indirect strength", "Multiplier on the amount of indirect light transmitted by the backlight lobe.", "float", presets=None)
		self.params["sssMix"] = Param("sssMix", "Mix", "How much to mix SSS in with the diffuse. 0 means no SSS, full diffuse. 1 means full SSS no diffuse.", "float", presets=None)
		self.params["sssMode"] = Param("sssMode", "Mode", "Algorithm to use for SSS calculation. cubic is the standard Arnold SSS. The diffusion and directional modes both take longer to calculate but preserve detail much better than the cubic.", "enum", presets=None)
		self.params["sssDensityScale"] = Param("sssDensityScale", "Density scale", "A multiplier on the scale of the object. This simply multiplies down the Distance values below, but can be used to adapt materials from scenes of one scale to another without changing the look.", "float", presets=None)
		self.params["sssRadius"] = Param("sssRadius", "Distance 1", "The scatter distance of the first layer. Higher values mean the light travels further through the object, lower values mean it travels a shorter distance.", "float", presets=None)
		self.params["sssWeight1"] = Param("sssWeight1", "Weight 1", "The weight of the first layer. Larger values relative to the other layers will cause more of this layer to be present in the result.", "float", presets=None)
		self.params["sssRadiusColor"] = Param("sssRadiusColor", "Color 1", "The scatter color of the first layer. This is the color the light will tend to the further it travels through the material, e.g. reddish for skin.", "rgb", presets=None)
		self.params["sssRadius2"] = Param("sssRadius2", "Distance 2", "The scatter distance of the second layer. Higher values mean the light travels further through the object, lower values mean it travels a shorter distance.", "float", presets=None)
		self.params["sssWeight2"] = Param("sssWeight2", "Weight 2", "The weight of the second layer. Larger values relative to the other layers will cause more of this layer to be present in the result.", "float", presets=None)
		self.params["sssRadiusColor2"] = Param("sssRadiusColor2", "Color 2", "The scatter color of the second layer. This is the color the light will tend to the further it travels through the material, e.g. reddish for skin.", "rgb", presets=None)
		self.params["sssRadius3"] = Param("sssRadius3", "Distance 3", "The scatter distance of the third layer. Higher values mean the light travels further through the object, lower values mean it travels a shorter distance.", "float", presets=None)
		self.params["sssWeight3"] = Param("sssWeight3", "Weight 3", "The weight of the third layer. Larger values relative to the other layers will cause more of this layer to be present in the result.", "float", presets=None)
		self.params["sssRadiusColor3"] = Param("sssRadiusColor3", "Color 3", "The scatter color of the third layer. This is the color the light will tend to the further it travels through the material, e.g. reddish for skin.", "rgb", presets=None)
		self.params["sssTraceSet"] = Param("sssTraceSet", "Trace set", "Enter the name of a trace set here to restrict the sss to trace only against that set.", "string", presets=None)
		self.params["diffuseExtraSamples"] = Param("diffuseExtraSamples", "Diffuse extra samples", "Add or subtract samples for the diffuse and backlight lobes from the global sampling rate.", "int", presets=None)
		self.params["sssExtraSamples"] = Param("sssExtraSamples", "SSS extra samples", "Add or subtract samples for the sss lobe from the global sampling rate. Note that this parameter only works with the diffusion and directional modes.", "int", presets=None)
		self.params["diffuseIndirectStrength"] = Param("diffuseIndirectStrength", "Indirect strength", "Multiplier on the amount of indirect light transmitted by this lobe.", "float", presets=None)
		self.params["diffuseIndirectClamp"] = Param("diffuseIndirectClamp", "Indirect clamp", "Clamp the brightness of indirect samples for this lobe. This can effectively reduce fireflies but makes the shader less accurate. The default value of 0 means no clamping.", "float", presets=None)
		self.params["diffuseNormal"] = Param("diffuseNormal", "Normal", "Override the normal used for this lobe.", "vector", presets=None)
		self.params["traceSetDiffuse"] = Param("traceSetDiffuse", "Diffuse trace set", "Enter the name of a trace set here to restrict the diffuse lobe to trace only against that set.", "string", presets=None)
		self.params["traceSetBacklight"] = Param("traceSetBacklight", "Backlight trace set", "Enter the name of a trace set here to restrict the backlight lobe to trace only against that set.", "string", presets=None)
		self.params["specular1Strength"] = Param("specular1Strength", "Strength", "Multiplier on the intensity of the specular reflection.", "float", presets=None)
		self.params["specular1Color"] = Param("specular1Color", "Color", "Color tint on the specular reflection.", "rgb", presets=None)
		self.params["specular1Roughness"] = Param("specular1Roughness", "Roughness", "The roughness of the specular reflection. Lower numbers produce sharper reflections, higher numbers produce blurrier reflections.", "float", presets=None)
		self.params["specular1Anisotropy"] = Param("specular1Anisotropy", "Anisotropy", "Controls how much the specular highlight is stretched along its axis. The default value of 0.5 produces a round highlight. Higher values will stretch the highlight along the V axis, lower values stretch along the U axis.", "float", presets=None)
		self.params["specular1Rotation"] = Param("specular1Rotation", "Rotation", "Rotates the axis of specular anisotropy around the surface normal. 0 gives no rotation, 0.5 gives 90 degree rotation, 1 gives 180 degree rotation.", "float", presets=None)
		self.params["specular1FresnelMode"] = Param("specular1FresnelMode", "Mode", "Selects which mode to use for the fresnel. Dielectric is appropriate for non-conductive materials such as most organics, plastic, glass and water etc. and gives dark reflections at normal incidence and bright reflections at glancing angles.", "enum", presets=None)
		self.params["specular1Ior"] = Param("specular1Ior", "IOR", "The index of refraction for the dielectric fresnel mode.", "float", presets={'Water': 1.33, 'Glass': 1.5, 'Diamond': 2.4, 'Ethyl alcohol': 1.36, 'Flint glass': 1.6, 'Skin': 1.4, 'Dense glass': 1.7, 'Cornea': 1.37, 'Plastic': 1.55})
		self.params["specular1Reflectivity"] = Param("specular1Reflectivity", "Reflectivity", "Selects the color of the reflection at normal incidence for the metallic fresnel mode.", "rgb", presets={'Platinum': (0.679, 0.642, 0.582), 'Copper': (0.985, 0.649, 0.546), 'Aluminium': (0.914, 0.921, 0.921), 'Tungsten': (0.504, 0.49513, 0.475776), 'Gold': (0.99, 0.791587, 0.3465), 'Titanium': (0.55, 0.501692, 0.4477), 'Chrome': (0.548, 0.549, 0.57), 'Silver': (0.97, 0.959109, 0.92441)})
		self.params["specular1EdgeTint"] = Param("specular1EdgeTint", "Edge tint", "Selects the color of the reflection at glancing angles for the metallic fresnel mode.", "rgb", presets={'Platinum': (0.785, 0.789, 0.783), 'Copper': (0.996, 0.918, 0.859), 'Aluminium': (0.971, 0.979, 0.989), 'Tungsten': (0.403, 0.419, 0.422), 'Gold': (0.99, 0.9801, 0.792), 'Titanium': (0.689119, 0.683298, 0.693), 'Chrome': (0.579, 0.598, 0.62), 'Silver': (0.999, 0.999, 0.998)})
		self.params["specular1RoughnessDepthScale"] = Param("specular1RoughnessDepthScale", "Roughness depth scale", "Controls how much the specular roughness is scaled with each increasing bounce as a noise-reduction technique.", "float", presets=None)
		self.params["specular1ExtraSamples"] = Param("specular1ExtraSamples", "Extra samples", "Add or subtract samples for this lobe from the global sampling rate.", "int", presets=None)
		self.params["specular1Normal"] = Param("specular1Normal", "Normal", "Override the normal used for this lobe.", "vector", presets=None)
		self.params["specular1IndirectStrength"] = Param("specular1IndirectStrength", "Indirect strength", "Multiplier on the amount of indirect light reflected by this lobe.", "float", presets=None)
		self.params["specular1IndirectClamp"] = Param("specular1IndirectClamp", "Indirect clamp", "Clamp the brightness of indirect samples for this lobe. This can effectively reduce fireflies but makes the shader less accurate. The default value of 0 means no clamping.", "float", presets=None)
		self.params["traceSetSpecular1"] = Param("traceSetSpecular1", "Trace set", "Enter the name of a trace set here to restrict this lobe to trace only against that set.", "string", presets=None)
		self.params["specular1CausticPaths"] = Param("specular1CausticPaths", "Caustics", "Enable this to allow this lobe to form caustic paths. You will need to enable this on all objects in your scene that contribute to the desired caustic. Use this at your own risk, it will be VERY noisy.", "bool", presets=None)
		self.params["specular1InternalDirect"] = Param("specular1InternalDirect", "Internal direct reflections", "Disable this to turn off direct reflections from the inside of materials. This can give more plausible results in some cases when the default behavior leads to widely separated direct highlights.", "bool", presets=None)
		self.params["specular1Distribution"] = Param("specular1Distribution", "Distribution", "Selects the distribution to use for this specular lobe. GGX matches better to empirical data, and will become the only distribution in a later version..", "enum", presets=None)
		self.params["specular2Strength"] = Param("specular2Strength", "Strength", "Multiplier on the intensity of the specular reflection.", "float", presets=None)
		self.params["specular2Color"] = Param("specular2Color", "Color", "Color tint on the specular reflection.", "rgb", presets=None)
		self.params["specular2Roughness"] = Param("specular2Roughness", "Roughness", "The roughness of the specular reflection. Lower numbers produce sharper reflections, higher numbers produce blurrier reflections.", "float", presets=None)
		self.params["specular2Anisotropy"] = Param("specular2Anisotropy", "Anisotropy", "Controls how much the specular highlight is stretched along its axis. The default value of 0.5 produces a round highlight. Higher values will stretch the highlight along the V axis, lower values stretch along the U axis.", "float", presets=None)
		self.params["specular2Rotation"] = Param("specular2Rotation", "Rotation", "Rotates the axis of specular anisotropy around the surface normal. 0 gives no rotation, 0.5 gives 90 degree rotation, 1 gives 180 degree rotation.", "float", presets=None)
		self.params["specular2FresnelMode"] = Param("specular2FresnelMode", "Mode", "Selects which mode to use for the fresnel. Dielectric is appropriate for non-conductive materials such as most organics, plastic, glass and water etc. and gives dark reflections at normal incidence and bright reflections at glancing angles.", "enum", presets=None)
		self.params["specular2Ior"] = Param("specular2Ior", "IOR", "The index of refraction for the dielectric fresnel mode.", "float", presets={'Water': 1.33, 'Glass': 1.5, 'Diamond': 2.4, 'Ethyl alcohol': 1.36, 'Flint glass': 1.6, 'Skin': 1.4, 'Dense glass': 1.7, 'Cornea': 1.37, 'Plastic': 1.55})
		self.params["specular2Reflectivity"] = Param("specular2Reflectivity", "Reflectivity", "Selects the color of the reflection at normal incidence for the metallic fresnel mode.", "rgb", presets={'Platinum': (0.679, 0.642, 0.582), 'Copper': (0.985, 0.649, 0.546), 'Aluminium': (0.914, 0.921, 0.921), 'Tungsten': (0.504, 0.49513, 0.475776), 'Gold': (0.99, 0.791587, 0.3465), 'Titanium': (0.55, 0.501692, 0.4477), 'Chrome': (0.548, 0.549, 0.57), 'Silver': (0.97, 0.959109, 0.92441)})
		self.params["specular2EdgeTint"] = Param("specular2EdgeTint", "Edge tint", "Selects the color of the reflection at glancing angles for the metallic fresnel mode.", "rgb", presets={'Platinum': (0.785, 0.789, 0.783), 'Copper': (0.996, 0.918, 0.859), 'Aluminium': (0.971, 0.979, 0.989), 'Tungsten': (0.403, 0.419, 0.422), 'Gold': (0.99, 0.9801, 0.792), 'Titanium': (0.689119, 0.683298, 0.693), 'Chrome': (0.579, 0.598, 0.62), 'Silver': (0.999, 0.999, 0.998)})
		self.params["specular2RoughnessDepthScale"] = Param("specular2RoughnessDepthScale", "Roughness depth scale", "Controls how much the specular roughness is scaled with each increasing bounce as a noise-reduction technique.", "float", presets=None)
		self.params["specular2ExtraSamples"] = Param("specular2ExtraSamples", "Extra samples", "Add or subtract samples for this lobe from the global sampling rate.", "int", presets=None)
		self.params["specular2Normal"] = Param("specular2Normal", "Normal", "Override the normal used for this lobe.", "vector", presets=None)
		self.params["specular2IndirectStrength"] = Param("specular2IndirectStrength", "Indirect strength", "Multiplier on the amount of indirect light reflected by this lobe.", "float", presets=None)
		self.params["specular2IndirectClamp"] = Param("specular2IndirectClamp", "Indirect clamp", "Clamp the brightness of indirect samples for this lobe. This can effectively reduce fireflies but makes the shader less accurate. The default value of 0 means no clamping.", "float", presets=None)
		self.params["traceSetSpecular2"] = Param("traceSetSpecular2", "Trace set", "Enter the name of a trace set here to restrict this lobe to trace only against that set.", "string", presets=None)
		self.params["specular2CausticPaths"] = Param("specular2CausticPaths", "Caustics", "Enable this to allow this lobe to form caustic paths. You will need to enable this on all objects in your scene that contribute to the desired caustic. Use this at your own risk, it will be VERY noisy.", "bool", presets=None)
		self.params["specular2InternalDirect"] = Param("specular2InternalDirect", "Internal direct reflections", "Disable this to turn off direct reflections from the inside of materials. This can give more plausible results in some cases when the default behavior leads to widely separated direct highlights.", "bool", presets=None)
		self.params["specular2Distribution"] = Param("specular2Distribution", "Distribution", "Selects the distribution to use for this specular lobe. GGX matches better to empirical data, and will become the only distribution in a later version..", "enum", presets=None)
		self.params["transmissionStrength"] = Param("transmissionStrength", "Strength", "Multiplier on the intensity of the transmission.", "float", presets=None)
		self.params["transmissionColor"] = Param("transmissionColor", "Color", "Multiplier on the intensity of the transmission.", "rgb", presets=None)
		self.params["transmissionLinkToSpecular1"] = Param("transmissionLinkToSpecular1", "Link to specular 1", "When this is enabled, the transmission lobe will copy its Roughness and IOR values from the Specular 1 lobe. This is generally what you want for most materials.", "bool", presets=None)
		self.params["transmissionRoughness"] = Param("transmissionRoughness", "Roughness", "The roughness of the transmission. 0 creates a perfect refracted image like water or highly polished glass. Higher values will give results like frosted glass.", "float", presets=None)
		self.params["transmissionIor"] = Param("transmissionIor", "IOR", "The index of refraction of the transmission lobe. Higher values cause a more distorted refracted image.", "float", presets={'Water': 1.33, 'Glass': 1.5, 'Diamond': 2.4, 'Ethyl alcohol': 1.36, 'Flint glass': 1.6, 'Skin': 1.4, 'Dense glass': 1.7, 'Cornea': 1.37, 'Plastic': 1.55})
		self.params["ssAttenuationColor"] = Param("ssAttenuationColor", "Color", "This is the color light tends towards the further it travels through the material.", "rgb", presets=None)
		self.params["ssInScatteringStrength"] = Param("ssInScatteringStrength", "Scattering", "How much in-scattering takes place along the transmitted ray. The default of 0 means no in-scattering. Higher values add more in-scattering at the cost of additional render time.", "float", presets=None)
		self.params["ssDensityScale"] = Param("ssDensityScale", "Density scale", "A scale factor on the attenuation and scattering effects. Scaller values make the object feel smaller, larger values make the object feel larger.", "float", presets=None)
		self.params["ssDirection"] = Param("ssDirection", "Direction", "The direction, or anisotropy, or the scattering. Values greater than zero means light tends to travel through the material from one side to the other, while values less than zero mean light tends to bounce back in the direction it came from.", "float", presets=None)
		self.params["transmissionRoughnessDepthScale"] = Param("transmissionRoughnessDepthScale", "Roughness depth scale", "Controls how much the roughness is scaled with each increasing bounce as a noise-reduction technique.", "float", presets=None)
		self.params["transmissionExtraSamples"] = Param("transmissionExtraSamples", "Extra samples", "Add or subtract samples for this lobe from the global sampling rate.", "int", presets=None)
		self.params["transmissionEnableCaustics"] = Param("transmissionEnableCaustics", "Enable internal reflections", "Enables internal reflection bounces. This should generally always be on, but if you don't care about realism you can make materials with rough transmission and reflection render significantly faster by disabling this.", "bool", presets=None)
		self.params["rrTransmissionDepth"] = Param("rrTransmissionDepth", "RR depth", "Controls the depth at which the Russian roulette optimization kicks in. If you find your renders are too noisy with RR on try raising this to 2.", "int", presets=None)
		self.params["transmissionClamp"] = Param("transmissionClamp", "Indirect clamp", "Clamp the brightness of indirect samples for this lobe. This can effectively reduce fireflies but makes the shader less accurate. The default value of 0 means no clamping.", "float", presets=None)
		self.params["ssSpecifyCoefficients"] = Param("ssSpecifyCoefficients", "Specify attenuation coeffs.", "Enable this to directly specify the scattering and absorption parameters rather than use the Color and Scattering controls in the attenutaion section above.", "bool", presets=None)
		self.params["ssScattering"] = Param("ssScattering", "Scattering", "Scattering coefficient", "rgb", presets={'Apple juice': (0.0111666666667, 0.0135, 0.0179444444444), 'Coffee': (33.8375, 35.35, 37.125), 'Sprite': (4.6e-05, 5.93e-05, 5.93e-05), 'Beer': (0.00127586206897, 0.00237931034483, 0.00255172413793), 'Chardonnay': (0.000909090909091, 0.00142424242424, 0.00209090909091), 'Pacific ocean': (0.018, 0.01834, 0.02281), 'Cranberry juice': (0.00853333333333, 0.0103333333333, 0.0130666666667), 'Merlot': (0.00353333333333, 0.0, 0.0), 'Milk': (79.07418, 88.53138, 97.16274), 'Cola': (0.0110625, 0.013, 0.0)})
		self.params["ssAbsorption"] = Param("ssAbsorption", "Absorption", "Absorption coefficient", "rgb", presets={'Apple juice': (0.0563333333333, 0.103222222222, 0.226888888889), 'Coffee': (20.8625, 28.5875, 38.475), 'Sprite': (0.00082, 0.000796, 0.000870666666667), 'Beer': (0.0499655172414, 0.108310344828, 0.25124137931), 'Chardonnay': (0.0468787878788, 0.0515454545455, 0.104333333333), 'Pacific ocean': (0.31845, 0.31324, 0.30147), 'Cranberry juice': (0.171466666667, 0.409666666667, 0.540266666667), 'Merlot': (0.505733333333, 1.09526666667, 1.27973333333), 'Milk': (0.00666, 0.01998, 0.085914), 'Cola': (0.435375, 0.7175, 1.0730625)})
		self.params["traceSetTransmission"] = Param("traceSetTransmission", "Trace set", "Enter the name of a trace set here to restrict this lobe to trace only against that set.", "string", presets=None)
		self.params["transmissionDoDirect"] = Param("transmissionDoDirect", "Direct lighting", "Enable this to have the transmission lobe calculate direct lighting when leaving a closed volume. This allos you to, for instance, put a glass lens in front of a light source and see the image of the light source in the lens.", "bool", presets=None)
		self.params["transmissionNormal"] = Param("transmissionNormal", "Normal", "Override the normal used for this lobe.", "vector", presets=None)
		self.params["transmissionCausticPaths"] = Param("transmissionCausticPaths", "Caustics", "Enable this to allow this lobe to form caustic paths. You will need to enable this on all objects in your scene that contribute to the desired caustic. Use this at your own risk, it will be VERY noisy.", "bool", presets=None)
		self.params["emissionStrength"] = Param("emissionStrength", "Strength", "Multiplier on the intensity of the emitted light.", "float", presets=None)
		self.params["emissionColor"] = Param("emissionColor", "Color", "Color tint on the emitted light.", "rgb", presets=None)
		self.params["opacity"] = Param("opacity", "Opacity", "Opacity of the material. In the vast majority of cases, if you want to see through your material you should be using transmission. Opacity can be useful for doing cut out effects such as a leaf texture on a card.", "rgb", presets=None)
		self.params["id1"] = Param("id1", "id1", "Color to be output in id_1 AOV.", "rgb", presets=None)
		self.params["id2"] = Param("id2", "id2", "Color to be output in id_2 AOV.", "rgb", presets=None)
		self.params["id3"] = Param("id3", "id3", "Color to be output in id_3 AOV.", "rgb", presets=None)
		self.params["id4"] = Param("id4", "id4", "Color to be output in id_4 AOV.", "rgb", presets=None)
		self.params["id5"] = Param("id5", "id5", "Color to be output in id_5 AOV.", "rgb", presets=None)
		self.params["id6"] = Param("id6", "id6", "Color to be output in id_6 AOV.", "rgb", presets=None)
		self.params["id7"] = Param("id7", "id7", "Color to be output in id_7 AOV.", "rgb", presets=None)
		self.params["id8"] = Param("id8", "id8", "Color to be output in id_8 AOV.", "rgb", presets=None)
		self.params["crypto_asset_override"] = Param("crypto_asset_override", "Crypto asset override", "Overide the cryptomatte asset string for this shader", "string", presets=None)
		self.params["crypto_object_override"] = Param("crypto_object_override", "Crypto object override", "Overide the cryptomatte object string for this shader", "string", presets=None)
		self.params["crypto_material_override"] = Param("crypto_material_override", "Crypto material override", "Overide the cryptomatte material string for this shader", "string", presets=None)
		self.params["standardCompatibleAOVs"] = Param("standardCompatibleAOVs", "Write standard AOVs only", "Enable this to combine the AOVs into only the set that the standard shader outputs.", "bool", presets=None)
		self.params["transmitAovs"] = Param("transmitAovs", "Transmit AOVs", "When enabled on all surfaces in the scene, this will pull the AOVs through transmissive objects, so glass objects etc. will get the diffuse AOV of the objects they refract.", "bool", presets=None)
		self.params["aov_diffuse_color"] = Param("aov_diffuse_color", "Diffuse color", "", "rgb", presets=None)
		self.params["aov_diffuse_color_clamp"] = Param("aov_diffuse_color_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_direct_diffuse"] = Param("aov_direct_diffuse", "Direct diffuse", "", "rgb", presets=None)
		self.params["aov_direct_diffuse_clamp"] = Param("aov_direct_diffuse_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_direct_diffuse_raw"] = Param("aov_direct_diffuse_raw", "Direct diffuse (raw)", "", "rgb", presets=None)
		self.params["aov_direct_diffuse_raw_clamp"] = Param("aov_direct_diffuse_raw_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_indirect_diffuse"] = Param("aov_indirect_diffuse", "Indirect diffuse", "", "rgb", presets=None)
		self.params["aov_indirect_diffuse_clamp"] = Param("aov_indirect_diffuse_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_indirect_diffuse_raw"] = Param("aov_indirect_diffuse_raw", "Indirect diffuse (raw)", "", "rgb", presets=None)
		self.params["aov_indirect_diffuse_raw_clamp"] = Param("aov_indirect_diffuse_raw_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_direct_backlight"] = Param("aov_direct_backlight", "Direct backlight", "", "rgb", presets=None)
		self.params["aov_direct_backlight_clamp"] = Param("aov_direct_backlight_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_indirect_backlight"] = Param("aov_indirect_backlight", "Indirect backlight", "", "rgb", presets=None)
		self.params["aov_indirect_backlight_clamp"] = Param("aov_indirect_backlight_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_direct_specular"] = Param("aov_direct_specular", "Direct specular", "", "rgb", presets=None)
		self.params["aov_direct_specular_clamp"] = Param("aov_direct_specular_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_indirect_specular"] = Param("aov_indirect_specular", "Indirect specular", "", "rgb", presets=None)
		self.params["aov_indirect_specular_clamp"] = Param("aov_indirect_specular_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_direct_specular_2"] = Param("aov_direct_specular_2", "Direct specular 2", "", "rgb", presets=None)
		self.params["aov_direct_specular_2_clamp"] = Param("aov_direct_specular_2_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_indirect_specular_2"] = Param("aov_indirect_specular_2", "Indirect specular 2", "", "rgb", presets=None)
		self.params["aov_indirect_specular_2_clamp"] = Param("aov_indirect_specular_2_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_single_scatter"] = Param("aov_single_scatter", "Single scatter", "", "rgb", presets=None)
		self.params["aov_single_scatter_clamp"] = Param("aov_single_scatter_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_sss"] = Param("aov_sss", "SSS", "", "rgb", presets=None)
		self.params["aov_sss_clamp"] = Param("aov_sss_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_refraction"] = Param("aov_refraction", "Refraction", "", "rgb", presets=None)
		self.params["aov_refraction_clamp"] = Param("aov_refraction_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_emission"] = Param("aov_emission", "Emission", "", "rgb", presets=None)
		self.params["aov_emission_clamp"] = Param("aov_emission_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_uv"] = Param("aov_uv", "UV", "", "rgb", presets=None)
		self.params["aov_depth"] = Param("aov_depth", "Depth", "", "rgb", presets=None)
		self.params["aov_light_group_1"] = Param("aov_light_group_1", "Light group [1]", "", "rgb", presets=None)
		self.params["aov_light_group_1_clamp"] = Param("aov_light_group_1_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_light_group_2"] = Param("aov_light_group_2", "Light group [2]", "", "rgb", presets=None)
		self.params["aov_light_group_2_clamp"] = Param("aov_light_group_2_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_light_group_3"] = Param("aov_light_group_3", "Light group [3]", "", "rgb", presets=None)
		self.params["aov_light_group_3_clamp"] = Param("aov_light_group_3_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_light_group_4"] = Param("aov_light_group_4", "Light group [4]", "", "rgb", presets=None)
		self.params["aov_light_group_4_clamp"] = Param("aov_light_group_4_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_light_group_5"] = Param("aov_light_group_5", "Light group [5]", "", "rgb", presets=None)
		self.params["aov_light_group_5_clamp"] = Param("aov_light_group_5_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_light_group_6"] = Param("aov_light_group_6", "Light group [6]", "", "rgb", presets=None)
		self.params["aov_light_group_6_clamp"] = Param("aov_light_group_6_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_light_group_7"] = Param("aov_light_group_7", "Light group [7]", "", "rgb", presets=None)
		self.params["aov_light_group_7_clamp"] = Param("aov_light_group_7_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_light_group_8"] = Param("aov_light_group_8", "Light group [8]", "", "rgb", presets=None)
		self.params["aov_light_group_8_clamp"] = Param("aov_light_group_8_clamp", "Clamp", "Clamp this AOV to this value", "float", presets=None)
		self.params["aov_id_1"] = Param("aov_id_1", "ID [1]", "", "rgb", presets=None)
		self.params["aov_id_2"] = Param("aov_id_2", "ID [2]", "", "rgb", presets=None)
		self.params["aov_id_3"] = Param("aov_id_3", "ID [3]", "", "rgb", presets=None)
		self.params["aov_id_4"] = Param("aov_id_4", "ID [4]", "", "rgb", presets=None)
		self.params["aov_id_5"] = Param("aov_id_5", "ID [5]", "", "rgb", presets=None)
		self.params["aov_id_6"] = Param("aov_id_6", "ID [6]", "", "rgb", presets=None)
		self.params["aov_id_7"] = Param("aov_id_7", "ID [7]", "", "rgb", presets=None)
		self.params["aov_id_8"] = Param("aov_id_8", "ID [8]", "", "rgb", presets=None)
		self.params["aov_crypto_asset"] = Param("aov_crypto_asset", "Crypto Asset", "", "rgb", presets=None)
		self.params["aov_crypto_object"] = Param("aov_crypto_object", "Crypto Object", "", "rgb", presets=None)
		self.params["aov_crypto_material"] = Param("aov_crypto_material", "Crypto Material", "", "rgb", presets=None)
		self.params["aov_shadow_group_1"] = Param("aov_shadow_group_1", "Shadow group [1]", "", "rgba", presets=None)
		self.params["aov_shadow_group_2"] = Param("aov_shadow_group_2", "Shadow group [2]", "", "rgba", presets=None)
		self.params["aov_shadow_group_3"] = Param("aov_shadow_group_3", "Shadow group [3]", "", "rgba", presets=None)
		self.params["aov_shadow_group_4"] = Param("aov_shadow_group_4", "Shadow group [4]", "", "rgba", presets=None)
		self.params["aov_shadow_group_5"] = Param("aov_shadow_group_5", "Shadow group [5]", "", "rgba", presets=None)
		self.params["aov_shadow_group_6"] = Param("aov_shadow_group_6", "Shadow group [6]", "", "rgba", presets=None)
		self.params["aov_shadow_group_7"] = Param("aov_shadow_group_7", "Shadow group [7]", "", "rgba", presets=None)
		self.params["aov_shadow_group_8"] = Param("aov_shadow_group_8", "Shadow group [8]", "", "rgba", presets=None)
		self.params["rr"] = Param("rr", "RR", "When this is enabled the shader will automatically stop tracing indirect bounces when the final contribution for continuing would be insignificant. This allows you to go to very high ray depths without a significant render time hit.", "bool", presets=None)
		self.params["traceSetAll"] = Param("traceSetAll", "Global trace set", "Enter the name of a trace set here to restrict the shader to trace only against that set. Entering a different trace set in the individual lobes' Trace set parameters will override the one set here.", "string", presets=None)
		self.params["traceSetShadows"] = Param("traceSetShadows", "Shadow trace set", "Enter the name of a trace set here to restrict the shader to trace only against that set for shadows.", "string", presets=None)
		self.params["debug"] = Param("debug", "Debug", "Select a component here to replace the shader result with that component. This allows you to quickly debug your inputs and check value ranges while setting up shading.", "enum", presets=None)

		self.addSwatch()
		self.beginScrollLayout()

		self.beginLayout("Diffuse", collapse=False)
		self.addCustomFlt("diffuseStrength")
		self.addCustomRgb("diffuseColor")
		self.addCustomFlt("diffuseRoughness")
		self.beginLayout("Backlight", collapse=True)
		self.addCustomFlt("backlightStrength")
		self.addCustomRgb("backlightColor")
		self.addCustomFlt("backlightIndirectStrength")
		self.endLayout() # END Backlight
		self.beginLayout("SSS", collapse=True)
		self.addCustomFlt("sssMix")
		self.addControl("sssMode", label="Mode", annotation="Algorithm to use for SSS calculation. cubic is the standard Arnold SSS. The diffusion and directional modes both take longer to calculate but preserve detail much better than the cubic.")
		self.addCustomFlt("sssDensityScale")
		self.addCustomFlt("sssRadius")
		self.addCustomFlt("sssWeight1")
		self.addCustomRgb("sssRadiusColor")
		self.addCustomFlt("sssRadius2")
		self.addCustomFlt("sssWeight2")
		self.addCustomRgb("sssRadiusColor2")
		self.addCustomFlt("sssRadius3")
		self.addCustomFlt("sssWeight3")
		self.addCustomRgb("sssRadiusColor3")
		self.addControl("sssTraceSet", label="Trace set", annotation="Enter the name of a trace set here to restrict the sss to trace only against that set.")
		self.endLayout() # END SSS
		self.beginLayout("Advanced", collapse=True)
		self.addControl("diffuseExtraSamples", label="Diffuse extra samples", annotation="Add or subtract samples for the diffuse and backlight lobes from the global sampling rate.")
		self.addControl("sssExtraSamples", label="SSS extra samples", annotation="Add or subtract samples for the sss lobe from the global sampling rate. Note that this parameter only works with the diffusion and directional modes.")
		self.addCustomFlt("diffuseIndirectStrength")
		self.addCustomFlt("diffuseIndirectClamp")
		self.addControl("diffuseNormal", label="Normal", annotation="Override the normal used for this lobe.")
		self.addControl("traceSetDiffuse", label="Diffuse trace set", annotation="Enter the name of a trace set here to restrict the diffuse lobe to trace only against that set.")
		self.addControl("traceSetBacklight", label="Backlight trace set", annotation="Enter the name of a trace set here to restrict the backlight lobe to trace only against that set.")
		self.endLayout() # END Advanced
		self.endLayout() # END Diffuse
		self.beginLayout("Specular 1", collapse=False)
		self.addCustomFlt("specular1Strength")
		self.addCustomRgb("specular1Color")
		self.addCustomFlt("specular1Roughness")
		self.addCustomFlt("specular1Anisotropy")
		self.addCustomFlt("specular1Rotation")
		self.beginLayout("Fresnel", collapse=False)
		self.addControl("specular1FresnelMode", label="Mode", annotation="Selects which mode to use for the fresnel. Dielectric is appropriate for non-conductive materials such as most organics, plastic, glass and water etc. and gives dark reflections at normal incidence and bright reflections at glancing angles.")
		self.addCustomFlt("specular1Ior")
		self.addCustomRgb("specular1Reflectivity")
		self.addCustomRgb("specular1EdgeTint")
		self.endLayout() # END Fresnel
		self.beginLayout("Advanced", collapse=True)
		self.addCustomFlt("specular1RoughnessDepthScale")
		self.addControl("specular1ExtraSamples", label="Extra samples", annotation="Add or subtract samples for this lobe from the global sampling rate.")
		self.addControl("specular1Normal", label="Normal", annotation="Override the normal used for this lobe.")
		self.addCustomFlt("specular1IndirectStrength")
		self.addCustomFlt("specular1IndirectClamp")
		self.addControl("traceSetSpecular1", label="Trace set", annotation="Enter the name of a trace set here to restrict this lobe to trace only against that set.")
		self.addControl("specular1CausticPaths", label="Caustics", annotation="Enable this to allow this lobe to form caustic paths. You will need to enable this on all objects in your scene that contribute to the desired caustic. Use this at your own risk, it will be VERY noisy.")
		self.addControl("specular1InternalDirect", label="Internal direct reflections", annotation="Disable this to turn off direct reflections from the inside of materials. This can give more plausible results in some cases when the default behavior leads to widely separated direct highlights.")
		self.addControl("specular1Distribution", label="Distribution", annotation="Selects the distribution to use for this specular lobe. GGX matches better to empirical data, and will become the only distribution in a later version..")
		self.endLayout() # END Advanced
		self.endLayout() # END Specular 1
		self.beginLayout("Specular 2", collapse=True)
		self.addCustomFlt("specular2Strength")
		self.addCustomRgb("specular2Color")
		self.addCustomFlt("specular2Roughness")
		self.addCustomFlt("specular2Anisotropy")
		self.addCustomFlt("specular2Rotation")
		self.beginLayout("Fresnel", collapse=False)
		self.addControl("specular2FresnelMode", label="Mode", annotation="Selects which mode to use for the fresnel. Dielectric is appropriate for non-conductive materials such as most organics, plastic, glass and water etc. and gives dark reflections at normal incidence and bright reflections at glancing angles.")
		self.addCustomFlt("specular2Ior")
		self.addCustomRgb("specular2Reflectivity")
		self.addCustomRgb("specular2EdgeTint")
		self.endLayout() # END Fresnel
		self.beginLayout("Advanced", collapse=True)
		self.addCustomFlt("specular2RoughnessDepthScale")
		self.addControl("specular2ExtraSamples", label="Extra samples", annotation="Add or subtract samples for this lobe from the global sampling rate.")
		self.addControl("specular2Normal", label="Normal", annotation="Override the normal used for this lobe.")
		self.addCustomFlt("specular2IndirectStrength")
		self.addCustomFlt("specular2IndirectClamp")
		self.addControl("traceSetSpecular2", label="Trace set", annotation="Enter the name of a trace set here to restrict this lobe to trace only against that set.")
		self.addControl("specular2CausticPaths", label="Caustics", annotation="Enable this to allow this lobe to form caustic paths. You will need to enable this on all objects in your scene that contribute to the desired caustic. Use this at your own risk, it will be VERY noisy.")
		self.addControl("specular2InternalDirect", label="Internal direct reflections", annotation="Disable this to turn off direct reflections from the inside of materials. This can give more plausible results in some cases when the default behavior leads to widely separated direct highlights.")
		self.addControl("specular2Distribution", label="Distribution", annotation="Selects the distribution to use for this specular lobe. GGX matches better to empirical data, and will become the only distribution in a later version..")
		self.endLayout() # END Advanced
		self.endLayout() # END Specular 2
		self.beginLayout("Transmission", collapse=True)
		self.addCustomFlt("transmissionStrength")
		self.addCustomRgb("transmissionColor")
		self.addControl("transmissionLinkToSpecular1", label="Link to specular 1", annotation="When this is enabled, the transmission lobe will copy its Roughness and IOR values from the Specular 1 lobe. This is generally what you want for most materials.")
		self.addCustomFlt("transmissionRoughness")
		self.addCustomFlt("transmissionIor")
		self.beginLayout("Attenuation", collapse=True)
		self.addCustomRgb("ssAttenuationColor")
		self.addCustomFlt("ssInScatteringStrength")
		self.addCustomFlt("ssDensityScale")
		self.addCustomFlt("ssDirection")
		self.endLayout() # END Attenuation
		self.beginLayout("Advanced", collapse=True)
		self.addCustomFlt("transmissionRoughnessDepthScale")
		self.addControl("transmissionExtraSamples", label="Extra samples", annotation="Add or subtract samples for this lobe from the global sampling rate.")
		self.addControl("transmissionEnableCaustics", label="Enable internal reflections", annotation="Enables internal reflection bounces. This should generally always be on, but if you don't care about realism you can make materials with rough transmission and reflection render significantly faster by disabling this.")
		self.addControl("rrTransmissionDepth", label="RR depth", annotation="Controls the depth at which the Russian roulette optimization kicks in. If you find your renders are too noisy with RR on try raising this to 2.")
		self.addCustomFlt("transmissionClamp")
		self.addControl("ssSpecifyCoefficients", label="Specify attenuation coeffs.", annotation="Enable this to directly specify the scattering and absorption parameters rather than use the Color and Scattering controls in the attenutaion section above.")
		self.addCustomRgb("ssScattering")
		self.addCustomRgb("ssAbsorption")
		self.addControl("traceSetTransmission", label="Trace set", annotation="Enter the name of a trace set here to restrict this lobe to trace only against that set.")
		self.addControl("transmissionDoDirect", label="Direct lighting", annotation="Enable this to have the transmission lobe calculate direct lighting when leaving a closed volume. This allos you to, for instance, put a glass lens in front of a light source and see the image of the light source in the lens.")
		self.addControl("transmissionNormal", label="Normal", annotation="Override the normal used for this lobe.")
		self.addControl("transmissionCausticPaths", label="Caustics", annotation="Enable this to allow this lobe to form caustic paths. You will need to enable this on all objects in your scene that contribute to the desired caustic. Use this at your own risk, it will be VERY noisy.")
		self.endLayout() # END Advanced
		self.endLayout() # END Transmission
		self.beginLayout("Emission", collapse=True)
		self.addCustomFlt("emissionStrength")
		self.addCustomRgb("emissionColor")
		self.endLayout() # END Emission
		self.addCustomRgb("opacity")
		self.beginLayout("IDs", collapse=True)
		self.addCustomRgb("id1")
		self.addCustomRgb("id2")
		self.addCustomRgb("id3")
		self.addCustomRgb("id4")
		self.addCustomRgb("id5")
		self.addCustomRgb("id6")
		self.addCustomRgb("id7")
		self.addCustomRgb("id8")
		self.endLayout() # END IDs
		self.beginLayout("AOVs", collapse=True)
		self.addControl("crypto_asset_override", label="Crypto asset override", annotation="Overide the cryptomatte asset string for this shader")
		self.addControl("crypto_object_override", label="Crypto object override", annotation="Overide the cryptomatte object string for this shader")
		self.addControl("crypto_material_override", label="Crypto material override", annotation="Overide the cryptomatte material string for this shader")
		self.addControl("standardCompatibleAOVs", label="Write standard AOVs only", annotation="Enable this to combine the AOVs into only the set that the standard shader outputs.")
		self.addControl("transmitAovs", label="Transmit AOVs", annotation="When enabled on all surfaces in the scene, this will pull the AOVs through transmissive objects, so glass objects etc. will get the diffuse AOV of the objects they refract.")
		self.addControl("aov_diffuse_color", label="Diffuse color", annotation="")
		self.addCustomFlt("aov_diffuse_color_clamp")
		self.addControl("aov_direct_diffuse", label="Direct diffuse", annotation="")
		self.addCustomFlt("aov_direct_diffuse_clamp")
		self.addControl("aov_direct_diffuse_raw", label="Direct diffuse (raw)", annotation="")
		self.addCustomFlt("aov_direct_diffuse_raw_clamp")
		self.addControl("aov_indirect_diffuse", label="Indirect diffuse", annotation="")
		self.addCustomFlt("aov_indirect_diffuse_clamp")
		self.addControl("aov_indirect_diffuse_raw", label="Indirect diffuse (raw)", annotation="")
		self.addCustomFlt("aov_indirect_diffuse_raw_clamp")
		self.addControl("aov_direct_backlight", label="Direct backlight", annotation="")
		self.addCustomFlt("aov_direct_backlight_clamp")
		self.addControl("aov_indirect_backlight", label="Indirect backlight", annotation="")
		self.addCustomFlt("aov_indirect_backlight_clamp")
		self.addControl("aov_direct_specular", label="Direct specular", annotation="")
		self.addCustomFlt("aov_direct_specular_clamp")
		self.addControl("aov_indirect_specular", label="Indirect specular", annotation="")
		self.addCustomFlt("aov_indirect_specular_clamp")
		self.addControl("aov_direct_specular_2", label="Direct specular 2", annotation="")
		self.addCustomFlt("aov_direct_specular_2_clamp")
		self.addControl("aov_indirect_specular_2", label="Indirect specular 2", annotation="")
		self.addCustomFlt("aov_indirect_specular_2_clamp")
		self.addControl("aov_single_scatter", label="Single scatter", annotation="")
		self.addCustomFlt("aov_single_scatter_clamp")
		self.addControl("aov_sss", label="SSS", annotation="")
		self.addCustomFlt("aov_sss_clamp")
		self.addControl("aov_refraction", label="Refraction", annotation="")
		self.addCustomFlt("aov_refraction_clamp")
		self.addControl("aov_emission", label="Emission", annotation="")
		self.addCustomFlt("aov_emission_clamp")
		self.addControl("aov_uv", label="UV", annotation="")
		self.addControl("aov_depth", label="Depth", annotation="")
		self.addControl("aov_light_group_1", label="Light group [1]", annotation="")
		self.addCustomFlt("aov_light_group_1_clamp")
		self.addControl("aov_light_group_2", label="Light group [2]", annotation="")
		self.addCustomFlt("aov_light_group_2_clamp")
		self.addControl("aov_light_group_3", label="Light group [3]", annotation="")
		self.addCustomFlt("aov_light_group_3_clamp")
		self.addControl("aov_light_group_4", label="Light group [4]", annotation="")
		self.addCustomFlt("aov_light_group_4_clamp")
		self.addControl("aov_light_group_5", label="Light group [5]", annotation="")
		self.addCustomFlt("aov_light_group_5_clamp")
		self.addControl("aov_light_group_6", label="Light group [6]", annotation="")
		self.addCustomFlt("aov_light_group_6_clamp")
		self.addControl("aov_light_group_7", label="Light group [7]", annotation="")
		self.addCustomFlt("aov_light_group_7_clamp")
		self.addControl("aov_light_group_8", label="Light group [8]", annotation="")
		self.addCustomFlt("aov_light_group_8_clamp")
		self.addControl("aov_id_1", label="ID [1]", annotation="")
		self.addControl("aov_id_2", label="ID [2]", annotation="")
		self.addControl("aov_id_3", label="ID [3]", annotation="")
		self.addControl("aov_id_4", label="ID [4]", annotation="")
		self.addControl("aov_id_5", label="ID [5]", annotation="")
		self.addControl("aov_id_6", label="ID [6]", annotation="")
		self.addControl("aov_id_7", label="ID [7]", annotation="")
		self.addControl("aov_id_8", label="ID [8]", annotation="")
		self.addControl("aov_crypto_asset", label="Crypto Asset", annotation="")
		self.addControl("aov_crypto_object", label="Crypto Object", annotation="")
		self.addControl("aov_crypto_material", label="Crypto Material", annotation="")
		self.addControl("aov_shadow_group_1", label="Shadow group [1]", annotation="")
		self.addControl("aov_shadow_group_2", label="Shadow group [2]", annotation="")
		self.addControl("aov_shadow_group_3", label="Shadow group [3]", annotation="")
		self.addControl("aov_shadow_group_4", label="Shadow group [4]", annotation="")
		self.addControl("aov_shadow_group_5", label="Shadow group [5]", annotation="")
		self.addControl("aov_shadow_group_6", label="Shadow group [6]", annotation="")
		self.addControl("aov_shadow_group_7", label="Shadow group [7]", annotation="")
		self.addControl("aov_shadow_group_8", label="Shadow group [8]", annotation="")
		self.endLayout() # END AOVs
		self.beginLayout("Advanced", collapse=True)
		self.addControl("rr", label="RR", annotation="When this is enabled the shader will automatically stop tracing indirect bounces when the final contribution for continuing would be insignificant. This allows you to go to very high ray depths without a significant render time hit.")
		self.addControl("traceSetAll", label="Global trace set", annotation="Enter the name of a trace set here to restrict the shader to trace only against that set. Entering a different trace set in the individual lobes' Trace set parameters will override the one set here.")
		self.addControl("traceSetShadows", label="Shadow trace set", annotation="Enter the name of a trace set here to restrict the shader to trace only against that set for shadows.")
		self.addControl("debug", label="Debug", annotation="Select a component here to replace the shader result with that component. This allows you to quickly debug your inputs and check value ranges while setting up shading.")
		self.endLayout() # END Advanced
		self.addBumpLayout()

		pm.mel.AEdependNodeTemplate(self.nodeName)
		self.addExtraControls()

		self.endScrollLayout()
