// Define da_AiOptions
global proc da_AiOptions(){
	if (`pluginInfo -q -l mtoa`){
		if( !`objExists defaultArnoldRenderOptions` ){
			createNode aiOptions -n defaultArnoldRenderOptions;
		}
		select -cl;
	}
}

// Define da_UndoClear
global proc da_UndoClear(){
    undoInfo -st 0;
    undoInfo -st 1;
}

// Define da_May9MenuRefresh
global proc da_May9MenuRefresh(){
    da_May9MenuRemover;
    da_May9Menu;
}

// Define da_MouseOver_MM_May9
string $myWrapSimbol = "\n";

global proc da_MouseOver_MM_May9(){    
	if( `popupMenu -ex da_SelectOverCleaner` ) {
	    deleteUI da_SelectOverCleaner;
	}

	popupMenu -ctl 1 -sh 1 -alt 1 -b 2 -mm 1 -p viewPanes -pmc (
	    "string $myComponentOver[] = `ls -preSelectHilite`;" +
	    "if ( `popupMenu -e -ex da_SelectOverCleaner` ){" +
	        "popupMenu -e -dai da_SelectOverCleaner;" + " setParent -m da_SelectOverCleaner;" +
	    "if ( `dagObjectHit` )" +
		    "menuItem -l `da_ObjectOver` -rp \"N\" -c \"select `da_ObjectOver`; print (`da_ObjectOver` + $myWrapSimbol) \";" +
	    "else" +
	        " menuItem -en 0 -l \"No Object Detected\" -rp \"N\";" +
	    "if ( size( $myComponentOver ) ) " +
	        "menuItem -l $myComponentOver[0] -rp \"S\" -c \"select $myComponentOver[0]; print ($myComponentOver[0] + $myWrapSimbol)\";" +
	    "else" +
	        " menuItem -en 0 -l \"No polyComponent Detected\" -rp \"S\";}"
	) da_SelectOverCleaner;
}

global proc string da_ObjectOver(){
    dagObjectHit -mn "da_SelectOverCleaner";
    string $myChildren[] = `popupMenu -q -itemArray da_SelectOverCleaner`; 
    string $myObjecItem = `menuItem -q -l $myChildren[0]`;
    string $myObject[];
    tokenize $myObjecItem "." $myObject;
    popupMenu -e -dai da_SelectOverCleaner;
 
	return $myObject[0];
}

// Define da_round
global proc int da_round(float $da_value){
    float $n = $da_value % 1;
    if($n >= 0.5){
    	$da_value = `ceil $da_value`;
    }else{
    	$da_value = `floor $da_value`;
    }
    return $da_value;
}

// Define da_QueryFilterExpand
global proc int da_QueryFilterExpand(){
	for ($i=0;$i<256;$i++){
		string $myFilterExpand[] = `filterExpand -ex 1 -sm $i`;
		
		if (size($myFilterExpand)>0){
			return $i;
		}
	}
}

// Define da_QueryArrayFilterExpand
global proc int[] da_QueryArrayFilterExpand(){
    int $myArray[];
    clear $myArray;

	for ($i=0;$i<256;$i++){
		string $myFilterExpand[] = `filterExpand -ex 1 -sm $i`;
		
		if (size($myFilterExpand)>0){
			 $myArray[size($myArray)] = $i;
		}
	}
	return $myArray;
}

// Define da_QueryArrayNodeType
global proc string[] da_QueryArrayNodeType(){
    string $mySel[] = `ls -sl`;
    string $myArrayNodeType[];
    clear $myArrayNodeType;
    
    if (size($mySel)){
        for ($i = 0; $i < size($mySel); $i++){
            select $mySel[$i];
            string $myShape[] = `listRelatives -f -s`;
            if (size($myShape)){
                string $myNodeType = `nodeType $myShape[0]`;
                appendStringArray ( $myArrayNodeType, {$myNodeType}, size(`ls -sl`) );
            }else{
                string $myNodeType = `nodeType $mySel[$i]`;
                appendStringArray ( $myArrayNodeType, {$myNodeType}, size(`ls -sl`) );
            }
            select -cl;
        }
    }
    return $myArrayNodeType;
}

// Define da_MotionTrailToCurve
global proc da_MotionTrailToCurve(){ 
    $selected = `ls -dag -et snapshotShape`;
    for ($obj in $selected) {
        $pts = (getAttr($obj+".pts"));
        $size = size($pts);
        $curve = `curve -d 1 -p $pts[0] $pts[1] $pts[2] -p $pts[4] $pts[5] $pts[6] -k 0 -k 1`;
        
    	for($i=8;$i<$size;$i+=4){
    	    curve -os -a -p $pts[$i] $pts[$i+1] $pts[$i+2] $curve;
    	}
    }
}

// Define da_AntiAlias
global proc da_AntiAlias(){
    setAttr "hardwareRenderingGlobals.multiSampleEnable" 1;
}

global proc da_NoAntiAlias(){
    setAttr "hardwareRenderingGlobals.multiSampleEnable" 0;
}

// Define da_AntiAliasPrefs
global proc da_AntiAliasPrefs(){
    if (`getAttr "hardwareRenderingGlobals.multiSampleEnable"`){
        setAttr "hardwareRenderingGlobals.multiSampleEnable" 0;
        optionVar -iv "da_AntiAliasEnable" 0;
        scriptJob -e "NewSceneOpened" da_NoAntiAlias;
    }else{
        setAttr "hardwareRenderingGlobals.multiSampleEnable" 1;
        optionVar -iv "da_AntiAliasEnable" 1;
        scriptJob -e "NewSceneOpened" da_AntiAlias;
    }
    savePrefs -g -hk;
}

// Define da_May9HotkeySetRemover
global proc da_May9HotkeySetRemover(){
	hotkeySet -edit -current `optionVar -q "da_initialHotkey"`;
	optionVar -rm da_initialHotkey;
	hotkeySet -e -delete May9_Next;
}

// Define da_May9HotkeySet
global proc da_May9HotkeySet(){
	if(`hotkeySet -q -current` == "May9_Next"){
		da_May9HotkeySetRemover;
	}
	optionVar -sv da_initialHotkey `hotkeySet -q -current`;
	hotkeySet -source `optionVar -q "da_initialHotkey"` -current May9_Next;
	da_May9Hotkeys;
	hotkeySet -edit -current May9_Next;
}

// Define da_Quit
global proc da_Quit(){
	if(!saveChanges("")) return;

	$i = `getpid`;
	system("taskkill /PID "  + $i +" /f");
}


// Define jh_getComponentId by Jefri Haryono under MIT license
global proc int jh_getComponentId(string $component){
    string $suffix=match("\\[(.)+", $component);
    int $id=match("[0-9]+", $suffix);

    return $id;
}

// Define da_ConnectAttributes
global proc da_ConnectAttributes(){
    global string $outputAttribute;
    global string $inputAttribute;
    
    string $myNodes[] = `ls -sl`;
    
    string $outputAttribute = `textFieldGrp -query -tx outputAttribute`;
    string $inputAttribute = `textFieldGrp -query -tx inputAttribute`;
    
    for($i=1; $i<size($myNodes); $i++){
        connectAttr -f ($myNodes[0] + "." + $outputAttribute) ($myNodes[$i] + "." + $inputAttribute);
    }
    deleteUI ConnectAttribute;
}

global proc da_ConnectAttributesUI(){
    if(`window -exists ConnectAttribute`){
    deleteUI ConnectAttribute;
    }
    global string $outputAttribute;
    global string $inputAttribute;
    
    window -rtf 1 -t "Connect Attribute Manager" -wh 1 1 ConnectAttribute;
    
    columnLayout;
    textFieldGrp -l "First Object Output Attr" outputAttribute;
    textFieldGrp -l "Other Object(s) Input Attr" inputAttribute;
    
    button -c da_ConnectAttributes -l "Connect";
    showWindow ConnectAttribute;
}

// Define jh_rainCurvesFromEdges by Jefri Haryono under MIT license
global proc string[] jh_rainCurvesFromEdges(){
    string $resultCurveGrp[];
    string $edges[]=`filterExpand -ex 1 -sm 32`;

    if(size($edges)<1)
        return $resultCurveGrp;

    string $obj[]=`ls -sl -o`;
    int $edgeNum[]=`polyEvaluate -edge $obj[0]`;
    int $isSelect[];
    int $isProcessed[];

    for($i=0;$i<$edgeNum[0];$i++){
        $isSelect[size($isSelect)] = 0;
        $isProcessed[size($isProcessed)] = 0;
    }

    for($edge in $edges){    
        $currId = jh_getComponentId($edge);
        $isSelect[$currId] = 1;
    }

    string $edgeGroups[];

    for($iter=0;$iter<size($edges);$iter++){
        int $edgeId = jh_getComponentId($edges[$iter]);
        
        if($isProcessed[$edgeId])
            continue;
       
        $isProcessed[$edgeId] = 1;
        
        string $currEdge = $edges[$iter];
        string $edgeStack[] = {$currEdge};
        int $stackSize = 1;

        string $currEdgeList = "";

        while($stackSize>0){
            $currEdge = $edgeStack[$stackSize-1];
            $edgeStack[$stackSize-1] = "";
            $stackSize -= 1 ;
            $currEdgeList = $currEdgeList + $currEdge + ";";
            
            select -r $currEdge;
            PolySelectTraverse 1;
            select -d $currEdge;
            string $nEdges[] =`filterExpand -ex 1 -sm 32`;

            for($nEdge in $nEdges){
                int $nId = jh_getComponentId($nEdge);
                if($isProcessed[$nId])
                    continue; 
                    
                if (!$isSelect[$nId])
                    continue;
                    
                $isProcessed[$nId] = 1;
                $edgeStack[$stackSize] = $nEdge;
                $stackSize+=1;
            }
        }
        $edgeGroups[size($edgeGroups)] = $currEdgeList;
    }
    
    for($edgeGroup in $edgeGroups){
        string $tokens[];
        int $numTokens = tokenize($edgeGroup,";",$tokens);
        select -r $tokens;
        string $newCurve[] = `polyToCurve -form 2 -degree 3 -conformToSmoothMeshPreview 1`;
        $resultCurveGrp[size($resultCurveGrp)] = $newCurve[0];
    }

    if(size($resultCurveGrp)>0)
        select -r $resultCurveGrp;

    return $resultCurveGrp;
}