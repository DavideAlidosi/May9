// Define aiAreaLight marking menu
global proc aiAreaLight_MM_May9(){

int $lightCheck = `renderManip -q -st`;

menuItem
-l "Light Linking..." 
-c "LightCentricLightLinkingEditor;" 
-rp "W" 
-i "out_defaultLightList.png";

menuItem
-l "Look Through" 
-c "da_LookThruSelected" 
-rp "N" 
-i "snapshot.svg";

menuItem
-l "Persp View" 
-c "dR_DoCmd(\"viewPersp\");" 
-rp "S" 
-i "singlePerspLayout.png";

menuItem
-l "Light Editor..." 
-c "da_LightList" 
-rp "NW" 
-i "light_manager.png";

menuItem
-l "Edit Light..." 
-c "AttributeEditor" 
-rp "SW" 
-i "attributes.png";

menuItem
-l "Temperature" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "Cold" 
-c "da_AiColdLight";

menuItem
-l "Neutral" 
-c "da_AiNeutralLight";

menuItem
-l "Warm" 
-c "da_AiWarmLight";

setParent -m ..;

menuItem
-l "Normalize" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On" 
-c "da_AiLightNormalize" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_AiNoLightNormalize" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

if (`pluginInfo -q -l mtoa`){
string $myArnoldVersion = substituteAllString(`pluginInfo -q -v mtoa`, ".", "");
int $myArnoldIntVersion = `substring $myArnoldVersion 1 3`;

if ($myArnoldIntVersion >= 320){
menuItem
-l "Visible" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On" 
-c "da_AiLightVisible" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_AiNoLightVisible" 
-i "rvViewingPipelineOff.png";

setParent -m ..;
}
}

menuItem 
-d 1;

menuItem
-l "Samples" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "Low" 
-c "da_AiLowSample";

menuItem
-l "High" 
-c "da_AiHighSample";

setParent -m ..;

menuItem
-l "Area to Portal Light" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On" 
-c "da_AiPortalLight" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_AiNoPortalLight" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

setParent -m ..;

} 
// Define AirField marking menu
global proc AirField_MM_May9(){
string $myCurTransform[] = `ls -sl -typ "transform"`;

menuItem
-l "Add Compass to Direction" 
-c "da_AirWindController" 
-rp "N" 
-i "out_implicitSphere.png";

menuItem
-l "Assign Field to Selected" 
-c "AffectSelectedObject" 
-rp "W" 
-i "connectField.png" 
-en (size($myCurTransform) >= 2);

menuItem
-l "Dynamic Relationship..."
-c "DynamicRelationshipEditor"
-i "passSetRelationEditor.png"
-rp "S";

setParent -m ..;

} 
// Define AiVolume marking menu
global proc AiVolume_MM_May9(){

menuItem
-l "Edit Material..." 
-c "da_AiVolumeShader" 
-rp "E" 
-i "VolumeShelf.png";

menuItem
-l "Edit Volume..." 
-c "da_AiVolumeShapes" 
-rp "W" 
-i "WireFrameOnShaded.png";

setParent -m ..;

} 
// Define All marking menu
global proc All_MM_May9(){
int $IntCreationCheck = `optionVar -q createPolyPrimitiveAsTool` && `optionVar -q createNurbsPrimitiveAsTool`;

string $currentPanel = `getPanel -wf`;
string $myKeyTangent[] = `keyTangent -q -global -ott`;
string $myCurTransform[] = `ls -sl -typ "transform"`;

menuItem -bld 1 
-l "Poly/NURBS"
-sm 1
-rp "N"
-i "da_PolyCurve.png";

menuItem -bld 1 
-l "Cube"
-c "CreatePolygonCube;"
-rp "W"
-i "polyCube.png";

menuItem -bld 1 
-l "Plane"
-c "CreatePolygonPlane"
-rp "SW"
-i "polyMesh.png";

menuItem -bld 1 
-l "CV Curve"
-c "CVCurveTool"
-rp "NE"
-i "curveCV.png";

menuItem -bld 1 
-l "Circle"
-c "CreateNURBSCircle;"
-rp "E"
-i "circle.png";

menuItem -bld 1 
-l "Quad Draw"
-c "dR_quadDrawTool;"
-rp "N"
-i "quadDraw_NEX32.png";

menuItem -bld 1 
-l "Create"
-c "CreatePolygonTool;"
-rp "NW"
-i "polyCreateFacet.png";

menuItem -bld 1 
-l "Plane"
-c "CreateNURBSPlane"
-rp "SE"
-i "plane.png";

menuItem -bld 1 
-l "Import AI Curves..."
-c "CreateIllustratorCurves"
-i "aiObject.png";

menuItem -bld 1 
-l "Curves Based Text..."
-c "CreateTextOptions"
-i "text.png";

menuItem
-d 1;

menuItem -bld 1 
-l "Interactive Creation"
-c "da_TogglePrimitiveAsTool"
-cb ($IntCreationCheck);

setParent -m ..;

menuItem -bld 1 
-l "Rendering"
-sm 1
-rp "W"
-i "render.png";

menuItem -bld 1 
-l "Render Frame"
-c "RenderIntoNewWindow"
-rp "N"
-i "RS_render.png";

menuItem -bld 1 
-l "Select Camera"
-c "da_SelectCamera"
-rp "NE"
-i "Camera.png";

menuItem -bld 1 
-l "Render Sequence"
-c "RenderSequence"
-rp "NW"
-i "batchRender.png";

menuItem -bld 1 
-l "Color Management"
-c "da_ToggleColorManagement" 
-rp "S"
-cb (`colorManagementPrefs -q -cme`);

menuItem -bld 1 
-l "Start IPR Render"
-c "da_RenderViews"
-rp "W"
-i "render.png";

menuItem -bld 1 
-l "Resolution Gate"
-c "da_ToggleResolutionGate"
-rp "SW"
-i "ResolutionGate.png";

menuItem -bld 1 
-l "Playblast"
-c "performPlayblast 3"
-rp "SE"
-i "playblast.png";

menuItem -bld 1 
-l "Render Settings..."
-c "unifiedRenderGlobalsWindow"
-i "rvRenderGlobals.png";

menuItem -bld 1 
-l "Render Setup..."
-c "RenderSetupWindow"
-i "render_setup.png";

if (`pluginInfo -q -l substancemaya` == 1){
menuItem -bld 1 
-l "Substance Settings..." 
-c "SubstancePluginSettingsWindow" 
-i "Substance_Settings.png";
}

menuItem -bld 1 
-l "Transfer Maps..."
-c "performSurfaceSampling 1"
-i "Textured.png";

menuItem -bld 1 
-l "Camera Bookmark..."
-c "da_CameraBookmark"
-i "Bookmark.png";

menuItem -bld 1 
-l "File Path Editor..."
-c "FilePathEditor;"
-i "folder-open.png";

menuItem
-d 1;

menuItem -bld 1 
-l "Export StandIn..."
-c "da_doExportStandIn"
-i "ExportStandinShelf.png"
-en (size($myCurTransform) >= 1);

menuItem -bld 1 
-l "Import StandIn..."
-c "da_CreateStandInFile"
-i "StandinShelf.png";

setParent -m ..;

setParent -m ..;

menuItem -bld 1 
-l "Rigging"
-sm 1
-rp "SW"
-i "humanIK_CharCtrl.png";

menuItem -bld 1 
-l "Create Joint"
-c "JointTool"
-rp "SW"
-i "kinJoint.png";

menuItem -bld 1 
-l "Parent Constraint"
-c "pointConstraint -mo -weight 1"
-rp "S"
-i "parentConstraint.png"
-en (size($myCurTransform) >= 2);

menuItem -bld 1 
-l "Orient Constraint"
-c "orientConstraint -mo -weight 1;"
-rp "E"
-i "orientConstraint.png"
-en (size($myCurTransform) >= 2);

menuItem -bld 1 
-l "Aim Constraint"
-c "aimConstraint -mo -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"vector\" -worldUpVector 0 1 0" 
-rp "N"
-i "aimConstraint.png"
-en (size($myCurTransform) >= 2);

menuItem -bld 1 
-l "Point Constraint"
-c "pointConstraint -mo -weight 1"
-rp "SE"
-i "posConstraint.png"
-en (size($myCurTransform) >= 2);

menuItem -bld 1 
-l "Scale Constraint"
-c "scaleConstraint -mo -weight 1"
-rp "NW"
-i "scaleConstraint.png"
-en (size($myCurTransform) >= 2);

menuItem -bld 1 
-l "IK Handle"
-c "IKHandleTool"
-rp "W"
-i "kinHandle.png";

menuItem -bld 1 
-l "IK Spline Handle..."
-c "IKSplineHandleToolOptions"
-i "kinSplineHandle.png";

if (`about -api` >= 20200000){
menuItem -bld 1 
-l "Proximity Wrap..."
-c "ProximityWrapOptions;AttributeEditor"
-i "out_baseLattice.png"
-en (size($myCurTransform) == 0);
}

menuItem -bld 1 
-l "Cluster..."
-c "CreateClusterOptions"
-i "cluster.png";

menuItem
-d 1;

menuItem -bld 1 
-l "Connection Manager..."
-c "da_ConnectAttributesUI"
-i "da_OneToMany.png";

menuItem -bld 1 
-l "Connection Editor..."
-c "ConnectionEditor"
-i "out_list.png";

menuItem -bld 1 
-l "Expression Editor..."
-c "ExpressionEditor"
-i "out_expression.png";

menuItem -bld 1 
-l "Channel Control..."
-c "ChannelControlEditor"
-i "channelBox.png";

menuItem
-d 1;

if (size($myCurTransform) >= 1){

menuItem -bld 1 
-l "Attributes"
-sm 1
-i "attributes.png";

menuItem -bld 1 
-l "Add..."
-c "AddAttribute"
-i "publishAttributes.png";

menuItem -bld 1 
-l "Delete..."
-c "DeleteAttribute"
-i "unpublishAttributes.png";

menuItem -bld 1 
-l "Edit..."
-c "RenameAttribute"
-i "setEdEditMode.png";

setParent -m ..;
}

if (size($myCurTransform) >= 1){
menuItem -bld 1 
-l "Character Set"
-sm 1
-i "HIKcreateControlRig.png";

menuItem -bld 1 
-l "Create Character..."
-c "CreateCharacterOptions"
-i "HIKCharacterToolFullBody.png";

menuItem -bld 1 
-l "Define SubCharacter..."
-c "CreateSubCharacterOptions"
-i "HIKCharacterToolBodyPart.png";

setParent -m ..;

menuItem -bld 1 
-l "Controller"
-sm 1
-i "teLockUnchecked.png";

menuItem -bld 1 
-l "Tag As Controller"
-c "TagAsController"
-i "circle.png";

menuItem -bld 1 
-l "Parent Controller"
-c "TagAsControllerParent"
-i "parent.png"
-en (size($myCurTransform) >= 2);

if (`about -api` >= 20180000){

menuItem -bld 1 
-l "Prossimity On"
-c "da_ControllerProssimity"
-i "rvViewingPipelineOn.png";

menuItem -bld 1 
-l "Prossimity Off"
-c "da_ControllerNoProssimity"
-i "rvViewingPipelineOff.png";
}

menuItem
-d 1;

menuItem -bld 1 
-l "Create Buffer"
-c "da_CreateBufferGRP" 
-i "out_transform.png";

setParent -m ..;
}

menuItem
-d 1;

if (`gmatch $currentPanel "modelPanel*"` && `about -api` >= 20180000){
menuItem
-l "Controllers Visibility" -bld 1  
-c "da_ToggleControllersVis" 
-cb (`modelEditor -q -controllers $currentPanel`);
}

menuItem -bld 1
-l "Highlight Affected" 
-c "if(`displayAffected -q`){displayPref -displayAffected false;}else{displayPref -displayAffected true;}" 
-cb (`displayAffected -q`);

setParent -m ..;

menuItem -bld 1 
-l "Lights"
-sm 1
-rp "E"
-i "spotlight.png";

menuItem -bld 1 
-l "Directional"
-c "CreateDirectionalLight;"
-rp "E"
-i "directionallight.png";

menuItem -bld 1 
-l "Spot"
-c "CreateSpotLight;"
-rp "SE"
-i "spotlight.png";

menuItem -bld 1 
-l "Point"
-c "CreatePointLight;"
-rp "SW"
-i "pointlight.png";

if (`getAttr defaultRenderGlobals.currentRenderer` == "arnold"){
menuItem -bld 1 
-l "Area"
-c "da_AiAreaLight"
-rp "NE"
-i "AreaLightShelf.png";
}else{
menuItem -bld 1 
-l "Area"
-c "CreateAreaLight"
-rp "NE"
-i "out_areaLight.png";
}

if (`getAttr defaultRenderGlobals.currentRenderer` == "arnold"){
menuItem -bld 1 
-l "SkyDome"
-c "da_AiSkyDome"
-rp "NW"
-i "SkydomeLightShelf.png";
}

if (`getAttr defaultRenderGlobals.currentRenderer` == "arnold"){
menuItem -bld 1 
-l "Photometric"
-c "da_AiPhotometric"
-rp "S"
-i "PhotometricLightShelf.png";
}else{
menuItem -bld 1 
-l "Volume"
-c "CreateVolumeLight"
-rp "S"
-i "volumelight.png";
}

if (`getAttr defaultRenderGlobals.currentRenderer` == "arnold"){
menuItem -bld 1 
-l "Portal"
-c "da_AiLightPortal"
-rp "N"
-i "LightPortalShelf.png";
}else{
menuItem -bld 1 
-l "Ambient"
-c "CreateAmbientLight"
-rp "N"
-i "ambientlight.png";
}

menuItem -bld 1 
-l "Light Editor..."
-c "da_LightList"
-i "light_manager.png";

menuItem -bld 1 
-l "Light Linking..."
-c "LightCentricLightLinkingEditor"
-i "out_defaultLightList.png";

setParent -m ..;

menuItem -bld 1 
-l "Objects"
-sm 1
-rp "NE"
-i "posEmitter.png";

menuItem -bld 1 
-l "Camera"
-c "CreateCameraOnly"
-rp "N"
-i "Camera.png";

menuItem -bld 1 
-l "Locator"
-c "CreateLocator"
-rp "NE"
-i "out_locator.png";

menuItem -bld 1 
-l "Fluid Container"
-c "Create3DContainer"
-rp "E"
-i "fluidCreate3D.png";

menuItem -bld 1 
-l "Arnold Volume"
-c "da_AiVolumes"
-rp "W"
-i "VolumeShelf.png";

menuItem -bld 1 
-l "Compass"
-c "da_Compass" 
-rp "NW" 
-i "out_implicitSphere.png";

menuItem -bld 1 
-l "nParticle Emitter"
-c "NCreateEmitter"
-rp "S"
-i "posEmitter.png";

menuItem -bld 1 
-l "Paint nParticles"
-c "NParticleTool"
-rp "SE"
-i "particle.png";

if (`pluginInfo -q -l bifrostGraph`){
menuItem -bld 1 
-l "Bifrost Graph..."
-c "CreateNewBifrostGraph"
-i "da_bifrostBoard.png";
}

if (`pluginInfo -q -l mayaUsdPlugin`){
menuItem -bld 1 
-l "USD Stage..."
-c "mayaUsdCreateStageWithNewLayer;UsdLayerEditor"
-i "USD_stage.png";
}

menuItem -bld 1 
-l "Constuct Plane..."
-c "CreateConstructionPlaneOptions" 
-i "sketchPlane.png";

menuItem -bld 1 
-l "Annotation..."
-c "CreateAnnotateNode"
-i "annotation.png";

menuItem -bld 1 
-l "Paint Effects..."
-c "PaintOnPaintableObjects;MakePaintable;PaintEffectsToolOptions"
-i "userPaint.png";

setParent -m ..;

menuItem -bld 1 
-l "Animation"
-sm 1
-rp "NW"
-i "out_animCurveTA.png";

menuItem -bld 1 
-l "Mouse Tracker"
-c "da_MouseTrack"
-rp "N"
-i "aselect.png"
-en (size($myCurTransform) >= 1);

menuItem -bld 1 
-l "Set Smart Keyframe"
-c "da_KeyKeyedOnly"
-rp "NW"
-i "keyIntoclip.png"
-en (size($myCurTransform) >= 1);

menuItem -bld 1 
-l "Noise Selected Channel"
-c "da_NoiseChannel"
-rp "W"
-i "normCurves.png";

menuItem -bld 1 
-l "Sine Selected Channel"
-c "da_SineChannel"
-rp "SW"
-i "traxGraphAnimCurves.png";

menuItem -bld 1 
-l "Attach to Motion Path"
-c "da_AttachToMotionPath"
-rp "S"
-i "motionPath.png"
-en (size($myCurTransform) >= 2);

menuItem -bld 1 
-l "Round Keyframes"
-c "da_roundKeyframe"
-rp "NE"
-i "teSetKeyframe.png"
-en (size($myCurTransform) >= 1);

menuItem -bld 1 
-l "Delete Static Channels" 
-c "delete -staticChannels -unitlessAnimationCurves false -hierarchy none -controlPoints 0 -shape 1" 
-rp "E"
-i "deleteGeneric.png"
-en (size($myCurTransform) >= 1);

menuItem -bld 1 
-l "Bake Simulation..."
-c "BakeSimulationOptions"
-i "bakeAnimation.png" 
-en (size($myCurTransform) >= 1);

menuItem -bld 1 
-l "Editable Motion Trail..."
-c "CreateMotionTrailOptions"
-i "motionTrail.png"
-en (size($myCurTransform) >= 1);

menuItem -bld 1 
-l "Grease Pencil Tool..."
-c "GreasePencilTool"
-i "GreasePencil.png";

menuItem -bld 1 
-l "Set Driven Key..."
-c "SetDrivenKeyOptions"
-i "setDrivenKeyframe.png";

if (`about -api` >= 20220000){
menuItem -bld 1 
-l "Ghosting Editor..."
-c "OpenGhostEditor"
-i "ghostingEditor.png";
}

menuItem -bld 1 
-l "MASH Editor..."
-c "MASHOutliner"
-i "MASH_Editor.png";

menuItem
-d 1;

menuItem -bld 1 
-l "Play Max Real-time"
-c "da_maxPlaybackSpeedToggle"
-cb (`playbackOptions -q -maxPlaybackSpeed`);

menuItem -bld 1 
-l "Stepped Tangent"
-c "da_ToggleKeyTangent"
-cb ($myKeyTangent[0] == "step");

if (`about -api` >= 20200000){
menuItem -bld 1 
-l "Auto Snap Key"
-c "da_AutoSnapKeyToggle"
-cb (`optionVar -q scaleKeyAutoSnap`);
}

setParent -m ..;

menuItem -bld 1 
-l "Scene"
-sm 1
-rp "SE"
-i "CameraAE.png";

if (`about -api` >= 20190000){
int $HUDCheck = `optionVar -q frameRateVisibility` && `optionVar -q currentFrameVisibility` && `optionVar -q objectDetailsVisibility` && `optionVar -q sceneTimecodeVisibility` && `optionVar -q polyCountVisibility` && `optionVar -q focalLengthVisibility` && `optionVar -q evaluationVisibility` && `optionVar -q cacheVisibility`;
menuItem -bld 1 
-l "HUD Info"
-c "da_ToggleHUD"
-rp "SE"
-cb ($HUDCheck);
}else{
int $HUDCheck = `optionVar -q frameRateVisibility` && `optionVar -q currentFrameVisibility` && `optionVar -q objectDetailsVisibility` && `optionVar -q sceneTimecodeVisibility` && `optionVar -q polyCountVisibility` && `optionVar -q focalLengthVisibility` && `optionVar -q evaluationVisibility`;
menuItem -bld 1 
-l "HUD Info"
-c "da_ToggleHUD"
-rp "SE"
-cb ($HUDCheck);
}

menuItem -bld 1 
-l "Select Hierarchy"
-c "SelectHierarchy"
-rp "N"
-i "selectByHierarchy.png"
-en (size($myCurTransform) >= 1);

menuItem -bld 1 
-l "Selection Size"
-c "da_SelectionSize"
-rp "SW"
-i "out_decomposeMatrix.png";

menuItem -bld 1 
-l "Select Layer Objects"
-c "da_SelectLayerObject"
-rp "S"
-i "channelLayers.png"
-en (size($myCurTransform) >= 1);

menuItem -bld 1 
-l "Select None"
-c "SelectNone" 
-rp "E"
-i "hotkeyFieldClear.png";

menuItem -bld 1 
-l "Select All"
-c "SelectAll" 
-rp "NE"
-i "aselect.png";

menuItem -bld 1 
-l "Distance Tool"
-c "DistanceTool"
-rp "W"
-i "distanceDim.png";

menuItem -bld 1 
-l "Content Browser..."
-c "ContentBrowserWindow"
-i "folder-open.png";

if (`pluginInfo -q -l bifrostGraph` == 1){
menuItem -bld 1 
-l "Bifrost Browser..."
-c "bifrostBrowser"
-i "out_bifrostBoard.png";
}

if (`pluginInfo -q -l mayaUsdPlugin`){
menuItem -bld 1 
-l "USD Stage from File..."
-c "mayaUsdCreateStageFromFile"
-i "USD_stage.png";
}

menuItem -bld 1 
-l "Create Reference..."
-c "CreateReference"
-i "createReference.png";

menuItem -bld 1 
-l "Import GPU Cache..."
-c "doGpuCacheImportArgList 1 {\"0\",\"0\"}"
-i "greasePencilImport.png";

menuItem -bld 1 
-l "Optimize Scene Size..." 
-c "OptimizeSceneOptions"
-i "sequenceCompress.png";

if (`about -api` >= 20190000){
string $evalMode[] = `evaluationManager -q -m`;

menuItem
-d 1;

menuItem -bld 1 
-l "Parallel Evaluation" 
-c "da_evalToggle"
-cb ($evalMode[0] == "parallel");

menuItem -bld 1 
-l "Cached Playback" 
-c "da_ToggleCachePlayback"
-cb (`python "CachePreferenceEnabled().get_value()"`)
-en ($evalMode[0] == "parallel");

if (`about -api` >= 20190100){
menuItem -bld 1 
-l "Cached Smooth Meshes" 
-c "da_ToggleSmoothMeshCache"
-cb (`python "CachePreferenceCacheSmoothMeshes().get_value()"`)
-en (`python "CachePreferenceEnabled().get_value()"` && $evalMode[0] == "parallel");
}

if (`about -api` >= 20200000){
menuItem -bld 1 
-l "Cached Dynamics" 
-c "da_ToggleSmoothDynamics"
-cb (`python "CachePreferenceDynamicsSupportEnabled().get_value()"`)
-en (`python "CachePreferenceEnabled().get_value()"` && $evalMode[0] == "parallel");
}

}else{
string $evalMode[] = `evaluationManager -q -m`;

menuItem -bld 1 
-l "Parallel Evaluation" 
-c "da_evalToggle"
-cb ($evalMode[0] == "parallel");
}

setParent -m ..;

if (size($myCurTransform) >= 1){
menuItem -bld 1 
-l "Transform"
-sm 1
-rp "S"
-i "HIKCustomRigToolTranslate.png";

menuItem -bld 1 
-l "Match Pivot"
-c "MatchPivots"
-rp "S"
-i "UVPivotBottom.png"
-en (size($myCurTransform) >= 2);

menuItem -bld 1 
-l "Match Transform"
-c "MatchTransform"
-rp "SW"
-i "move_M.png"
-en (size($myCurTransform) >= 2);

menuItem -bld 1 
-l "Expose Pivot/Rotate Order"
-c "da_ExposeRotationOrder;da_pivotKeyable" 
-rp "NE"
-i "pickPivotComp.png";

menuItem -bld 1 
-l "Toggle Local Axes" 
-c "ToggleLocalRotationAxes"
-rp "E"
-i "polyNormalSetToFace.png";

menuItem -bld 1 
-l "Freeze/Delete Non-Deform"
-c "da_FreezeDelNonDef" 
-rp "NW"
-i "FreezeTransform.png";

menuItem -bld 1 
-l "Center Pivot"
-c "CenterPivot" 
-rp "SE"
-i "CenterPivot.png";

menuItem -bld 1 
-l "Reset Transforms"
-c "da_ResetTransform"
-rp "W"
-i "out_buttonManip.png";

menuItem -bld 1 
-l "Bake Pivot..."
-c "BakeCustomPivotOptions"
-i "menuIconModify.png";

menuItem -bld 1 
-l "Align Tool..."
-c "setToolTo alignToolCtx"
-i "alignTool.png"
-en (size($myCurTransform) >= 2);

menuItem -bld 1 
-l "Duplicate Special..."
-c "DuplicateSpecialOptions" 
-i "da_duplicate.png";

menuItem -bld 1 
-l "Mirror Duplicate..."
-c "da_TransformMirrorSelector"
-i "polyMirrorGeometry.png";

menuItem -bld 1 
-l "Connect Transform..."
-c "da_ConnectTransformUI"
-i "da_OneToMany.png"
-en (size($myCurTransform) >= 2);

if (!(catchQuiet (`getAttr ($myCurTransform[0] + ".drp")`))){
int $myDrpSetting = getAttr ($myCurTransform[0] + ".drp");

menuItem
-d 1;

menuItem -bld 1 
-l "Pivot Visibility" 
-c "da_TogglePivotVisibility"
-cb ($myDrpSetting);
}

setParent -m ..;
}

if (`gmatch $currentPanel "modelPanel*"`){
string $myCamera = `modelPanel -q -cam $currentPanel`;
string $myOverrideCheck = `modelEditor -q -rom $currentPanel`;

menuItem -bld 1
-l "Isolate Select" 
-c "ToggleIsolateSelect" 
-cb (`isolateSelect -q -state $currentPanel`);

menuItem -bld 1
-l "Lock Camera" 
-c "changeCameraLockStatus `getPanel -wf`" 
-cb (`camera -q -lt $myCamera`);

menuItem -bld 1
-l "Local Tumble" 
-c "da_ToggleLocalTumble" 
-cb (`tumbleCtx -q -asp tumbleContext`);

menuItem -bld 1
-l "Selection Highlight" 
-c "da_ToggleSelectionHighlighting" 
-cb (`modelEditor -q -sel $currentPanel`);

if (`pluginInfo -q -l mtoa`){
string $myArnoldVersion = substituteAllString(`pluginInfo -q -v mtoa`, ".", "");
int $myArnoldIntVersion = `substring $myArnoldVersion 1 3`;

if (`about -api` >= 20180000 && $myArnoldIntVersion >= 320){
int $myRenderDevice = `getAttr "defaultArnoldRenderOptions.renderDevice"`;

menuItem 
-d 1;

menuItem -bld 1
-l "Arnold Viewport" 
-c "da_ArnoldRenderViewport" 
-cb ($myOverrideCheck == "arnoldViewOverride");

if ($myOverrideCheck == "arnoldViewOverride"){
menuItem
-c "arnoldViewOverrideOptionBox" 
-ob 1;
}

menuItem -bld 1
-l "Arnold GPU" 
-c "da_ToggleRenderDevice" 
-cb ($myRenderDevice);

menuItem 
-d 1;
}
}
}else{
if (`gmatch $currentPanel "hyperShadePanel*"`){
menuItem
-l "Create Asset" -bld 1 
-c "CreateContainer; filterUIClearFilter hyperShadePrimaryNodeEditor; da_ExpandShade" 
-i "createContainer.png";
}
else if(`gmatch $currentPanel "nodeEditorPanel*"` || `gmatch $currentPanel "hyperGraphPanel*"` || `gmatch $currentPanel "outlinerPanel*"`){
menuItem -bld 1
-l "Create Asset" 
-c "CreateContainer" 
-i "createContainer.png";
}
}

menuItem 
-d 1;

menuItem -bld 1
-l "Construction History" 
-c "if (`constructionHistory -q -tgl`) constructionHistory -tgl off; else constructionHistory -tgl on;" 
-cb (`constructionHistory -q -tgl`);

setParent -m ..;

} 
// Define Bif marking menu
global proc Bif_MM_May9(){

menuItem
-l "Bifrost Graph Editor..." 
-c "da_BifBoardEdit" 
-rp "N" 
-i "out_bifrostCompound.png";

setParent -m ..;

}
// Define BifBifrost marking menu
global proc BifBifrost_MM_May9(){

menuItem
-l "Bifrost Graph Editor..." 
-c "da_BifBoardEdit" 
-rp "N" 
-i "out_bifrostCompound.png";

setParent -m ..;

}
// Define BifrostBifrost marking menu
global proc BifrostBifrost_MM_May9(){

int $bifrostHUDCheck = `optionVar -q bifrostHUDVisibility`;

menuItem
-l "Stop Processing" 
-c "bifrost -edit -stopProcessing;" 
-rp "N" 
-i "rvIPRStop.png";

menuItem
-l "Bifrost Options..." 
-c "performBifrostOptionsChange" 
-i "out_bifrostAttrNotifier.png" 
-rp "S";

menuItem
-l "Create Cache" 
-i "nClothCacheCreate.png" 
-c "performCreateBifrostCache 0 0";

menuItem
-c "performCreateBifrostCache 1 0" 
-ob 1;

menuItem
-l "Delete Cache" 
-i "nClothCacheDelete.png" 
-c "bifrost -edit -flushScratchCache";

menuItem
-d 1;

menuItem
-l "HUD Info" 
-c "ToggleBifrostHUD" 
-cb (1 == $bifrostHUDCheck);

setParent -m ..;

} 
// Define Bifrost marking menu
global proc Bifrost_MM_May9(){

int $bifrostHUDCheck = `optionVar -q bifrostHUDVisibility`;

menuItem
-l "Stop Processing" 
-c "bifrost -edit -stopProcessing;" 
-rp "N" 
-i "rvIPRStop.png";

menuItem
-l "Bifrost Options..." 
-c "performBifrostOptionsChange" 
-i "out_bifrostAttrNotifier.png" 
-rp "S";

menuItem
-l "Add Foam" 
-c "AddBifrostFoam" 
-rp "E";

menuItem
-l "Remove Foam" 
-c "RemoveBifrostFoam" 
-rp "W";

menuItem
-l "Add Field" 
-c "AddBifrostMotionField" 
-rp "SE";

menuItem
-l "Remove Field" 
-c "RemoveBifrostField" 
-rp "SW";

menuItem
-l "Add Killplane" 
-c "AddBifrostKillplane" 
-rp "NW";

menuItem
-l "Add Kill Field" 
-c "AddBifrostKillField" 
-rp "NE";

menuItem
-l "Assign New Material..."
-c "createAssignNewMaterialTreeLister \"\""
-i "render_adskMaterial.png";

menuItem
-l "Render As" 
-sm 1;

radioMenuItemCollection;

menuItem
-l "Surface" 
-c "setAttr \".renderAs\" 0" 
-rb (`getAttr ".renderAs"` == 0);

menuItem
-l "Points" 
-c "setAttr \".renderAs\" 1" 
-rb (`getAttr ".renderAs"` == 1);

menuItem
-l "Volume" 
-c "setAttr \".renderAs\" 2" 
-rb (`getAttr ".renderAs"` == 2);

setParent -m ..;

menuItem
-l "Mesh" 
-sm 1;

menuItem
-l "On" 
-c "da_BifrostMesh" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_BifrostNoMesh" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Gravity" 
-sm 1;

menuItem
-l "On" 
-c "da_BifrostGravity" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_BifrostNoGravity" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Continuous Emission" 
-sm 1;

menuItem
-l "On" 
-c "da_BifrostContinuousEmission" 
-rp "N" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_BifrostNoContinuousEmission" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Create Cache" 
-i "nClothCacheCreate.png" 
-c "performCreateBifrostCache 0 0";

menuItem
-c "performCreateBifrostCache 1 0" 
-ob 1;

menuItem
-l "Delete Cache" 
-i "nClothCacheDelete.png" 
-c "bifrost -edit -flushScratchCache";

menuItem
-d 1;

menuItem
-l "Set Liquid Initial State" 
-i "fluidInitialStateSet.png" 
-c "doSetBifrostInitialState 1 { \"\", \"0\" }" ;

menuItem
-c "performSetBifrostInitialState 1 0" 
-ob 1;

menuItem
-l "Clear Liquid Initial State" 
-i "fluidInitialStateClear.png"
-c "ClearBifrostInitialState";

menuItem
-d 1;

menuItem
-l "HUD Info" 
-c "ToggleBifrostHUD" 
-cb (1 == $bifrostHUDCheck);

setParent -m ..;

} 
// Define Board marking menu
global proc Board_MM_May9(){
string $myBoard[] = `ls -sl`;

menuItem
-l "Bifrost Graph Editor..." 
-c "openBifrostGraphEditorFromSelection" 
-rp "N" 
-i "out_bifrostCompound.png";

if (attributeExists ("mesh", $myBoard[0]) && size($myBoard) == 1){
menuItem
-l "Generate Maya Geo" 
-c "da_BifrostGeoToMaya" 
-rp "S" 
-i "out_mesh.png";
}

setParent -m ..;

} 
// Define Camera marking menu
global proc Camera_MM_May9(){

int $cameraCheck = `renderManip -q -st`;

menuItem
-l "Look Through" 
-c "da_LookThruSelected" 
-rp "N" 
-i "snapshot.svg";

menuItem
-l "Camera Manipulators" 
-c "da_ToggleCameraManipulators" 
-rp "E" 
-cb (1 == $cameraCheck);

menuItem
-l "Persp View" 
-c "dR_DoCmd(\"viewPersp\");" 
-rp "S" 
-i "singlePerspLayout.png";

menuItem
-l "Add DOF Control" 
-c "da_DofLocator" 
-rp "W" 
-i "cameraAim.png";

menuItem
-l "Convert to" 
-sm 1
-i "hyperShadeResetCameraView.png";

menuItem
-l "Camera" 
-c "cameraMakeNode 1 \"\"" 
-i "view.png";

menuItem
-l "Camera and Aim" 
-c "cameraMakeNode 1 \"\"; cameraMakeNode 2 \"\"" 
-i "cameraAim.png";

menuItem
-l "Camera, Aim and Up" 
-c "cameraMakeNode 1 \"\"; cameraMakeNode 3 \"\"" 
-i "cameraAimUp.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Add Image Plane..." 
-c "da_CameraImagesPlane" 
-i "out_imagePlane.png";

menuItem
-l "Add Movie Plane..." 
-c "da_CameraVideoImagesPlane" 
-i "da_video_plane.png";

setParent -m ..;

} 
// Define Cluster marking menu
global proc Cluster_MM_May9(){
string $myCurTransform[] = `ls -sl -typ "transform"`;

if (size($myCurTransform) >= 2){
menuItem
-l "Controller Orient" 
-c "da_CtrlOrientConstraint" 
-rp "NW" 
-i "orientConstraint.png";

menuItem
-l "Controller Point" 
-c "da_CtrlPointConstraint" 
-rp "NE" 
-i "posConstraint.png";

menuItem
-l "Controller Aim" 
-c "da_CtrlAimConstraint" 
-rp "SW" 
-i "aimConstraint.png";

menuItem
-l "Controller Parent" 
-c "da_CtrlParentConstraint" 
-rp "N" 
-i "parentConstraint.png";
}

menuItem
-l "Create Flexor" 
-c "createFlexorWin" 
-rp "W" 
-i "lattice.png";

menuItem
-l "Edit Membership Tool" 
-c "da_EditMembershipTool" 
-rp "S" 
-i "setEdit.png";

if (!`optionVar -q deformationUseComponentTags`){
menuItem
-l "Deformer Set Editor..."
-c "DeformerSetEditor"
-rp "E" 
-i "da_deformerSetEditor.png";
}

menuItem
-l "Cluster Relative" 
-sm 1;

menuItem
-l "On" 
-c "da_ClusterRelative" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_ClusterNoRelative" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

setParent -m ..;

} 
// Define CMuscle marking menu
global proc CMuscle_MM_May9(){

menuItem
-l "Joint Orientation..." 
-c "OrientJointOptions" 
-rp "N" 
-i "orientJoint.png";

menuItem
-l "Go To Bind Pose" 
-c "GoToBindPose;" 
-rp "NE" 
-i "goToBindPose.png";

menuItem
-l "Mirror Joint" 
-c "mirrorJoint" 
-rp "NW" 
-i "kinMirrorJoint_S.png";

menuItem
-c "MirrorJointOptions" 
-ob 1;

menuItem
-l "Select Hierarchy" 
-c "SelectHierarchy" 
-rp "S" 
-i "selectByHierarchy.png";

menuItem
-l "IK Spline Handle..." 
-c "IKSplineHandleToolOptions" 
-rp "W" 
-i "kinSplineHandle.png";

menuItem
-l "IK Handle" 
-c "IKHandleTool" 
-rp "SW" 
-i "kinHandle.png";

menuItem
-l "Bind Skin..." 
-c "SmoothBindSkinOptions" 
-rp "E" 
-i "smoothSkin.png";

menuItem
-l "Display Joint As" 
-sm 1;

menuItem
-l "Bone" 
-c "da_JointsAsBone" 
-i "out_joint.png";

menuItem
-l "None" 
-c "da_JointsAsNone" 
-i "RS_disable.png";

setParent -m ..;

menuItem
-l "Display Bone As" 
-sm 1;

menuItem
-l "Fat" 
-c "da_BoneAsFat" 
-i "pickJointObj.png";

menuItem
-l "Off" 
-c "da_BoneAsOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Muscle Builder..." 
-c "cMuscleBuilder" 
-i "cMuscle_muscle_muscleBuilder.png";

menuItem
-l "Connect Selected Muscle" 
-c "cMuscle_connectToSystem(); " 
-i "cMuscle_skin_connMus.png";

menuItem
-d 1;

menuItem
-l "Joint Size..." 
-c "jdsWin" 
-i "resizeWindow.png";

setParent -m ..;

} 
// Define CollideMesh marking menu
global proc CollideMesh_MM_May9(){

menuItem
-l "Add Mesh as Collider" 
-c "AddCollider" 
-rp "N" 
-i "expandContainer.png";

menuItem
-l "Add Mesh as Deformer" 
-c "AddDeformer" 
-rp "S" 
-i "collapseContainer.png";

setParent -m ..;

}
// Define Constraint marking menu
global proc Constraint_MM_May9(){
string $mySel[] = `ls -sl`;
string $myQueryArrayNodeType[] = `da_QueryArrayNodeType`;

select $mySel;

if (stringArrayContains("dragField", $myQueryArrayNodeType) || stringArrayContains("gravityField", $myQueryArrayNodeType) || stringArrayContains("newtonField", $myQueryArrayNodeType) || stringArrayContains("radialField", $myQueryArrayNodeType) || stringArrayContains("turbulenceField", $myQueryArrayNodeType) || stringArrayContains("uniformField", $myQueryArrayNodeType) || stringArrayContains("vortexField", $myQueryArrayNodeType)){
Field_MM_May9;
}else if (stringArrayContains("joint", $myQueryArrayNodeType) && stringArrayContains("mesh", $myQueryArrayNodeType)){
JointPoly_MM_May9;
}else{
switch ($myQueryArrayNodeType[0]){
case "joint": Joint_MM_May9; break;
case "nurbsCurve": Curves_MM_May9; break;
default: Constraints_MM_May9; break;
}
}

} 
// Define Constraints marking menu
global proc Constraints_MM_May9(){
string $myCurTransform[] = `ls -sl -typ "transform"`;

menuItem
-l "Shape to Joint(s)" 
-c "da_shapeParentJoints" 
-rp "E" 
-i "XRayJoints.png";

if (size($myCurTransform) >= 2){
menuItem
-l "Controller Aim" 
-c "da_CtrlAimConstraint" 
-rp "SW" 
-i "aimConstraint.png";

menuItem
-l "Controller Parent" 
-c "da_CtrlParentConstraint" 
-rp "N" 
-i "parentConstraint.png";

menuItem
-l "Controller Pole Vector" 
-c "da_CtrlPoleVectorConstraint" 
-rp "SE" 
-i "poleVectorConstraint.png";

menuItem
-l "Controller Point" 
-c "da_CtrlPointConstraint" 
-rp "NE" 
-i "posConstraint.png";

menuItem
-l "Controller Orient" 
-c "da_CtrlOrientConstraint" 
-rp "NW" 
-i "orientConstraint.png";
}

menuItem 
-l "Match Pivots"
-c "MatchPivots"
-rp "S"
-i "pickPivotComp.png";

menuItem
-l "Reset Constraint Offset" 
-c "da_ResetConstraintOffset" 
-rp "W" 
-i "out_aimConstraint.png";

menuItem
-l "IK on Selected Joints" 
-c "da_IkOnJoint" 
-i "out_ikRPsolver.png";

menuItem
-l "IK on Selected Curve" 
-c "da_IkOnCurve" 
-i "out_ikHandleGadget.png";

menuItem
-l "Select Weighted Vertices" 
-c "da_SelectVertexJoint" 
-i "uvIsolateSelectReset.png";

menuItem
-l "Move Skinned Joints" 
-c "MoveSkinJointsTool" 
-i "moveSkinnedJoint.png";

menuItem
-d 1;

menuItem
-l "Bind Skin..." 
-c "SmoothBindSkinOptions" 
-i "smoothSkin.png";

menuItem
-l "Bind Rigid Skin" 
-c "da_BindRigidSkin" 
-i "detachSkin.png";

menuItem
-l "Rigid Bind..." 
-c "RigidBindSkinOptions" 
-i "rigidBind.png";

menuItem
-l "Delta Skin" 
-c "da_DeltaSkin" 
-i "smoothSkinWeights.png";

menuItem
-d 1;

menuItem
-l "Add Influence..." 
-c "AddInfluenceOptions" 
-i "addWrapInfluence.png";

menuItem
-l "Remove Influence" 
-c "RemoveInfluence" 
-i "removeWrapInfluence.png";

menuItem
-d 1;

menuItem
-l "Muscle Builder..." 
-c "cMuscleBuilder" 
-i "cMuscle_muscle_muscleBuilder.png";

menuItem
-l "Connect Selected Muscle" 
-c "cMuscle_connectToSystem()" 
-i "cMuscle_skin_connMus.png";

menuItem
-d 1;

menuItem
-l "Joint Size..." 
-c "jdsWin" 
-i "resizeWindow.png";

setParent -m ..;

} 
// Define ConstructionPlane marking menu
global proc ConstructionPlane_MM_May9(){

menuItem
-l "Make Live" 
-c "string $mySel[] = `ls -sl`;\nMakeLive;\nselect $mySel" 
-rp "N" 
-i "makeLive.png";

menuItem
-l "Unmake Live" 
-c "makeLive -n" 
-rp "NE" 
-i "setEdRemoveCmd.png";

menuItem
-l "Pole Axis YX"
-c "xform -a -ro 0 0 90"
-rp "S"
-i "da_z.png";

menuItem
-l "Pole Axis YZ"
-c "xform -a -ro 0 90 0"
-rp "E"
-i "da_x.png";

menuItem
-l "Pole Axis XZ"
-c "xform -a -ro 90 0 0"
-rp "W"
-i "da_y.png";

menuItem
-l "Quad Draw" 
-c "dR_quadDrawTool" 
-i "quadDraw_NEX32.png";

setParent -m ..;

} 

// Define Container marking menu
global proc Container_MM_May9(){

menuItem
-l "Edit in Hypergraph..." 
-c "da_EditContainer" 
-rp "N" 
-i "expandContainer.png";

menuItem
-l "Asset Editor..." 
-c "AssetEditor" 
-rp "E" 
-i "out_container.png";

menuItem
-l "Remove" 
-c "unpackAndRemoveContainer(`ls -sl -containers`)" 
-rp "S" 
-i "removeContainer.png";

setParent -m ..;

}

// Define CurveCreate marking menu
global proc CurveCreate_MM_May9(){

menuItem
-l "Connect to Shape(s)" 
-c "da_CurveConnectCreation" 
-rp "N" 
-i "da_OneToMany.png";

setParent -m ..;

} 

// Define CurveCurve marking menu
global proc CurveCurve_MM_May9(){
string $myCurTransform[] = `ls -sl -typ "transform"`;

menuItem
-l "Loft"
-c "Loft"
-rp "W"
-i "skin.png";

menuItem
-c "LoftOptions"
-ob 1;

if (size($myCurTransform) >= 2){
menuItem
-l "Controller"
-sm 1
-rp "E"
-i "teLockUnchecked.png";

menuItem
-l "Orient" 
-c "da_CtrlOrientConstraint" 
-rp "NW" 
-i "orientConstraint.png";

menuItem
-l "Point" 
-c "da_CtrlPointConstraint" 
-rp "NE" 
-i "posConstraint.png";

menuItem
-l "Aim" 
-c "da_CtrlAimConstraint" 
-rp "E" 
-i "aimConstraint.png";

menuItem
-l "Parent" 
-c "da_CtrlParentConstraint" 
-rp "N" 
-i "parentConstraint.png";

setParent -m ..;
}

menuItem
-l "Attach"
-c "AttachCurve"
-rp "SE"
-i "attachCurves.png";

menuItem
-l "Reverse"
-c "ReverseCurve;"
-rp "NW"
-i "reverse.png";

menuItem
-l "Open/Close"
-c "OpenCloseCurve"
-rp "SW"
-i "closeGeom.png";

menuItem
-c "OpenCloseCurveOptions"
-ob 1;

menuItem
-l "Offset"
-c "OffsetCurve;"
-rp "N"
-i "offsetCurve.png";

menuItem
-c "OffsetCurveOptions;"
-ob 1;

menuItem
-l "Extrude"
-c "Extrude;"
-rp "S"
-i "extrude.png";

menuItem
-c "ExtrudeOptions;"
-ob 1;

menuItem
-l "Combine" 
-c "da_CombineCurves" 
-rp "NE"
-i "da_combineCurves.png";

menuItem
-l "Rebuild..."
-c "RebuildCurveOptions"
-i "rebuildCurve.png";

menuItem
-l "Connect Shapes..." 
-c "da_ConnectNurbsShapesUI" 
-i "da_OneToMany.png";

menuItem
-l "Bevel Plus..."
-c "BevelPlusOptions"
-i "bevelPlus.png";

menuItem
-d 1;

menuItem
-l "Rivet to CVs"
-c "da_CurveCvRivet"
-i "pickPointComp.png";

menuItem
-l "Pivot to Origin"
-c "da_PivotToCurvesOrigin"
-i "selectFirstCV.png";

if (size(`filterExpand -sm 12`)){
menuItem
-l "Follicle by Curves Intersection" 
-c "da_FollicleFromCurves" 
-i "out_follicle.png";
}

menuItem
-d 1;

menuItem
-l "Shape" 
-sm 1
-i "da_curveToPoly.png";

menuItem
-l "Paint FX to Curve"
-c "AttachBrushToCurves"
-i "paintFXtoCurve.png";

if (`about -api` >= 20220000){
menuItem
-l "Sweep Mesh"
-c "sweepMeshFromCurve -oneNodePerCurve false"
-i "shelf_sweepMeshFromCurve.png";
}else{
menuItem
-l "Convert to Polygons"
-c "da_curveToPoly"
-i "da_curveToPoly.png";
}

menuItem
-l "Create Curve Collector"
-c "da_aiCurveCollector"
-i "CurveCollectorShelf.png";

setParent -m ..;

menuItem
-l "Surface" 
-sm 1
-i "da_flatPoly.png";

menuItem
-l "Flat Surface"
-c "da_FlattenSurface"
-i "da_flatPoly.png";

menuItem
-l "Bevel Plus Mesh"
-c "da_BevelPlusForText"
-i "polyBevel.png";

setParent -m ..;

menuItem
-l "Component Display" 
-sm 1
-i "RS_visible.png";

menuItem
-l "CVs" 
-c "ToggleCVs" 
-i "selectCVs.png";

menuItem
-l "Hull" 
-c "ToggleHulls" 
-i "pickHullComp.png";

setParent -m ..;

menuItem
-l "Deformers"
-sm 1
-i "bendNLD.png";

if (!`optionVar -q deformationUseComponentTags`){
menuItem
-l "Deformer Set Editor..."
-c "DeformerSetEditor"
-i "da_deformerSetEditor.png";

menuItem
-d 1;
}

menuItem
-l "Create Blend Shape"
-c "CreateBlendShape"
-i "blendShape.png";

menuItem
-l "Add Shape"
-c "AddBlendShape"
-i "ts-add.png";

menuItem 
-d 1;

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare;"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

menuItem 
-d 1;

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_RiggedCluster" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_RiggedClusterUI" 
-i "cluster.png";
}

menuItem
-l "Lattice..."
-c "CreateLatticeOptions"
-i "lattice.png";

setParent -m ..;

menuItem
-l "Dynamics"
-sm 1
-i "out_nucleus.png";

menuItem
-l "Make Curves Dynamic"
-c "makeCurvesDynamic 2 { \"1\", \"0\", \"1\", \"1\", \"0\"}"
-i "hairDynamicCurves.png";

menuItem
-l "Curves to nHair" 
-c "da_CurveToNHairs" 
-i "out_pfxHair.png";

menuItem
-l "Simulation Method"
-sm 1;

menuItem
-l "Static"
-c "da_HairStatic";

menuItem
-l "Passive"
-c "da_HairPassive";

menuItem
-l "Dynamic"
-c "da_HairDynamic";

setParent -m ..;

menuItem
-l "Point Lock"
-sm 1;

menuItem
-l "No Attach"
-c "da_HairNoLock";

menuItem
-l "Base"
-c "da_HairLockBase";

menuItem
-l "Tip"
-c "da_nHairLockTip";

menuItem
-l "Both Ends"
-c "da_HairLockBothEnds";

setParent -m ..;

menuItem
-l "Follicle Braid"
-sm 1;

menuItem
-l "Enable"
-c "da_FollicleBraid";

menuItem
-l "Disable"
-c "da_FollicleNoBraid";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Emit nParticle From CV..."
-c "NEmitFromObjectOptions"
-i "emitter.png";

menuItem
-l "Particle Style"
-sm 1
-i "out_particle.png";

menuItem
-l "Points"
-c "optionVar -stringValue NParticleStyle \"Points\";"
-rp "N"
-i "nPartPoints.png";

menuItem
-l "Balls"
-c "optionVar -stringValue NParticleStyle \"Balls\";"
-i "nPartBalls.png";

menuItem
-l "Cloud"
-c "optionVar -stringValue NParticleStyle \"Cloud\";"
-i "nPartCloud.png";

menuItem
-l "ThickCloud"
-c "optionVar -stringValue NParticleStyle \"ThickCloud\";"
-i "nPartThickCloud.png";

menuItem
-l "Water"
-c "optionVar -stringValue NParticleStyle \"Water\";"
-i "nPartWater.png";

setParent -m ..;

menuItem
-l "Create nSoft Body..."
-c "CreateNSoftBodyOptions"
-i "soft.png";

menuItem
-d 1;

menuItem
-l "Set Fluid Contents"
-c "SetFluidAttrFromCurve"
-i "menuIconFluids.png";

menuItem
-c "SetFluidAttrFromCurveOptions"
-ob 1;

setParent -m ..;

menuItem
-l "Cache"
-sm 1
-i "nClothCacheCreate.png";

menuItem
-l "Create nCache..."
-c "nClothCacheOpt"
-i "nClothCacheCreate.png";

menuItem
-l "Delete nCache"
-c "deleteNclothCache"
-i "nClothCacheDelete.png";

menuItem
-l "Append to Cache"
-c "cacheAppend"
-i "nClothCacheAppend.png";

menuItem
-l "Attach Cache..."
-c "attachCache"
-i "nClothCacheExisting.png";

setParent -m ..;

menuItem
-l "Select" 
-sm 1
-i "selectCVs.png";

menuItem
-l "All CVs"
-c "SelectCurveCVsAll" 
-i "selectCVs.png";

menuItem
-l "First CV"
-c "SelectCurveCVsFirst" 
-i "selectFirstCV.png";

menuItem
-l "Last CV"
-c "SelectCurveCVsLast" 
-i "selectLastCV.png";

setParent -m ..;

} 
// Define CurveCV marking menu
global proc CurveCV_MM_May9(){

Sup_SoftSelect_MM_May9;

menuItem
-l "Add Rivet"
-c "da_CurveCvRivet"
-rp "N" 
-i "pickPointComp.png";

menuItem
-l "Lock Length" 
-c "LockCurveLength;" 
-rp "E" 
-i "lockLength.png" ;

menuItem
-l "Unlock Length" 
-c "UnlockCurveLength" 
-rp "W" 
-i "unlockLength.png";

menuItem
-d 1;

menuItem
-l "Deformers" 
-sm 1
-i "bendNLD.png";

menuItem
-l "Bend" 
-c "Bend" 
-i "bendNLD.png";

menuItem
-l "Flare" 
-c "Flare" 
-i "flareNLD.png";

menuItem
-l "Sine" 
-c "Sine" 
-i "sineNLD.png";

menuItem
-l "Squash" 
-c "Squash" 
-i "squashNLD.png";

menuItem
-l "Twist" 
-c "Twist" 
-i "twistNLD.png";

menuItem
-l "Wave" 
-c "Wave" 
-i "waveNLD.png";

menuItem 
-d 1;

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_PaintableRiggedCluster" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_PaintableRiggedClusterUI" 
-i "cluster.png";
}

menuItem
-l "Lattice..." 
-c "CreateLatticeOptions" 
-i "lattice.png";

setParent -m ..;

menuItem
-l "Dynamics" 
-sm 1
-i "out_nucleus.png";

menuItem
-l "Emit nParticle From CV..." 
-c "NEmitFromObjectOptions" 
-i "emitter.png";

menuItem
-l "Particle Style" 
-sm 1
-i "out_particle.png";

menuItem
-l "Points" 
-c "optionVar -stringValue NParticleStyle \"Points\";" 
-i "nPartPoints.png";

menuItem
-l "Balls" 
-c "optionVar -stringValue NParticleStyle \"Balls\";" 
-i "nPartBalls.png";

menuItem
-l "Cloud" 
-c "optionVar -stringValue NParticleStyle \"Cloud\";" 
-i "nPartCloud.png";

menuItem
-l "ThickCloud" 
-c "optionVar -stringValue NParticleStyle \"ThickCloud\";" 
-i "nPartThickCloud.png";

menuItem
-l "Water" 
-c "optionVar -stringValue NParticleStyle \"Water\";" 
-i "nPartWater.png";

setParent -m ..;

setParent -m ..;

menuItem
-l "nConstraint" 
-sm 1
-i "menuIconConstraints.png";

menuItem
-l "Component to Component" 
-c "doCreateNConstraint pointToPoint 0" 
-i "nConstraintComponent.png";

menuItem
-l "Force Field" 
-c "doCreateNConstraint force 0" 
-i "nConstraintForceField.png" ;

menuItem
-l "Transform Constraint" 
-c "doCreateNConstraint transform 0" 
-i "nConstraintTransform.png";

setParent -m ..;

menuItem
-l "Select" 
-sm 1
-i "selectCVs.png";

menuItem
-l "All CVs"
-c "SelectCurveCVsAll" 
-i "selectCVs.png";

menuItem
-l "First CV"
-c "SelectCurveCVsFirst" 
-i "selectFirstCV.png";

menuItem
-l "Last CV"
-c "SelectCurveCVsLast" 
-i "selectLastCV.png";

menuItem
-d 1;

menuItem
-l "Create Quick Set..."
-c "CreateQuickSelectSet" 
-i "out_objectSet.png";

setParent -m ..;

setParent -m ..;

} 
// Define CurveEP marking menu
global proc CurveEP_MM_May9(){
menuItem
-l "Point On Curve" 
-c "da_PointOnCurve" 
-rp "N" 
-i "ptPosCrvConstraint.png";

setParent -m ..;
}
// Define CurvePoint marking menu
global proc CurvePoint_MM_May9(){

menuItem
-l "Insert Knot" 
-c "InsertKnot;" 
-rp "N" 
-i "insertKnot.png";

menuItem
-l "Detach Curve" 
-c "DetachCurve" 
-rp "S" 
-i "detachCurve.png";

setParent -m ..;

} 
// Define CurveShape marking menu
global proc CurveShape_MM_May9(){

menuItem
-l "Extract Curve" 
-c "da_ExtractCurveShape" 
-rp "N" 
-i "out_nurbsCurve.png";

menuItem
-l "Search and Replace..."
-c "SearchAndReplaceNames"
-rp "S" 
-i "text.png";

menuItem
-l "Default Color" 
-c "da_NoColorOverrides" 
-i "da_blue.png";

menuItem
-d 1;

menuItem
-l "Red Curve" 
-c "da_RedOverrides" 
-i "da_red.png";

menuItem
-l "Green Curve" 
-c "da_GreenOverrides" 
-i "da_green.png";

menuItem
-l "Yellow Curve" 
-c "da_YellowOverrides" 
-i "da_yellow.png";

menuItem
-l "Blue Curve" 
-c "da_BlueOverrides" 
-i "da_lightBlue.png";

setParent -m ..;

}

// Define CurveCreate marking menu
global proc CurveMotionPath_MM_May9(){

menuItem
-l "Swap Motion Path" 
-c "da_SwapMotionPath" 
-rp "N" 
-i "offsetCurve.png";

setParent -m ..;

} 

// Define CurvesOnSurface marking menu
global proc CurvesOnSurface_MM_May9(){

menuItem
-l "Attach" 
-c "AttachCurve" 
-rp "S" 
-i "attachCurves.png";

menuItem
-l "Bevel Plus" 
-c "BevelPlus;" 
-rp "E" 
-i "bevelPlus.png";

menuItem
-c "BevelPlusOptions;" 
-ob 1;

menuItem
-l "Offset Curve On Surface" 
-c "offsetCosPreset(1,0,2,1,0,1,0.01,5)" 
-rp "NE" 
-i "offsetCos.png";

menuItem
-c "OffsetCurveOnSurfaceOptions" 
-ob 1;

menuItem
-l "Loft" 
-c "Loft" 
-rp "W" 
-i "skin.png";

menuItem
-c "LoftOptions" 
-ob 1;

menuItem
-l "Reverse" 
-c "ReverseCurve;" 
-rp "NW" 
-i "reverse.png";

menuItem
-c "ReverseCurveOptions;" 
-ob 1;

menuItem
-l "Open/Close" 
-c "OpenCloseCurve" 
-rp "SW" 
-i "closeGeom.png";

menuItem
-c "OpenCloseCurveOptions" 
-ob 1;

menuItem
-l "Rebuild..." 
-c "RebuildCurveOptions" 
-rp "N" 
-i "rebuildCurve.png";

menuItem
-l "Extend Curve On Surface" 
-c "extendCurvePresetArgList( \"2\", { \"1\", \"1\",\"0\",\"2\",\"0.1\",\"0\",\"0\", \"0\", \"0\",\"1\",\"1\",\"1\" } )" 
-rp "SE" 
-i "extendCos.png";

menuItem
-c "ExtendCurveOnSurfaceOptions" 
-ob 1;

menuItem
-l "Shape" 
-sm 1
-i "da_curveToPoly.png";

menuItem
-l "Paint FX to Curve"
-c "AttachBrushToCurves"
-i "paintFXtoCurve.png";

menuItem
-l "Convert to Polygons"
-c "da_curveToPoly"
-i "da_curveToPoly.png";

setParent -m ..;

menuItem
-l "Surface" 
-sm 1
-i "da_flatPoly.png";

menuItem
-l "Flat Surface"
-c "da_FlattenSurface"
-i "da_flatPoly.png";

menuItem
-l "Bevel Plus Mesh"
-c "da_BevelPlusForText"
-i "polyBevel.png";

setParent -m ..;

menuItem
-l "Dynamics"
-sm 1
-i "out_nucleus.png";

menuItem
-l "Emit nParticle From CV..." 
-c "NEmitFromObjectOptions" 
-i "emitter.png";

menuItem
-l "Particle Style" 
-i "out_particle.png" 
-sm 1;

menuItem
-l "Points" 
-c "optionVar -stringValue NParticleStyle \"Points\";" 
-i "nPartPoints.png"
-rp "N";

menuItem
-l "Balls" 
-c "optionVar -stringValue NParticleStyle \"Balls\";" 
-i "nPartBalls.png";

menuItem
-l "Cloud" 
-c "optionVar -stringValue NParticleStyle \"Cloud\";" 
-i "nPartCloud.png";

menuItem
-l "ThickCloud" 
-c "optionVar -stringValue NParticleStyle \"ThickCloud\";" 
-i "nPartThickCloud.png";

menuItem
-l "Water" 
-c "optionVar -stringValue NParticleStyle \"Water\";" 
-i "nPartWater.png";

setParent -m ..;

setParent -m ..;

menuItem
-l "Select" 
-sm 1
-i "selectCVs.png";

menuItem
-l "All CVs"
-c "SelectCurveCVsAll" 
-i "selectCVs.png";

menuItem
-l "First CV"
-c "SelectCurveCVsFirst" 
-i "selectFirstCV.png";

menuItem
-l "Last CV"
-c "SelectCurveCVsLast" 
-i "selectLastCV.png";

setParent -m ..;

} 
// Define Curves marking menu
global proc Curves_MM_May9(){
string $myIKHandleCheck[] = `ls -sl -typ "ikHandle"`;
string $myCurTransform[] = `ls -sl -typ "transform"`;

menuItem
-l "Add CV"
-c "AddPointsTool;"
-rp "S"
-i "curveAddPt.png";

if (size($myCurTransform) >= 2){
menuItem
-l "Controller"
-sm 1
-rp "E"
-i "teLockUnchecked.png";

menuItem
-l "Orient" 
-c "da_CtrlOrientConstraint" 
-rp "NW" 
-i "orientConstraint.png";

menuItem
-l "Point" 
-c "da_CtrlPointConstraint" 
-rp "NE" 
-i "posConstraint.png";

menuItem
-l "Aim" 
-c "da_CtrlAimConstraint" 
-rp "E" 
-i "aimConstraint.png";

menuItem
-l "Parent" 
-c "da_CtrlParentConstraint" 
-rp "N" 
-i "parentConstraint.png";

if (size($myIKHandleCheck) > 0){
menuItem
-l "Pole Vector" 
-c "da_CtrlPoleVectorConstraint" 
-rp "SE" 
-i "poleVectorConstraint.png";

menuItem
-l "IK" 
-c "da_CtrlIKConstraint" 
-rp "S" 
-i "out_ikHandle.png";
}
}else{
menuItem
-l "Select Hierarchy" 
-c "SelectHierarchy" 
-rp "E" 
-i "selectByHierarchy.png";
}

setParent -m ..;

menuItem
-l "Curve Length"
-c "da_CurveLength"
-rp "SE"
-i "out_curveInfo.png";

menuItem
-l "Revolve"
-c "Revolve;"
-rp "W"
-i "revolve.png";

menuItem
-c "RevolveOptions;"
-ob 1;

menuItem
-l "Reverse"
-c "ReverseCurve;"
-rp "NW"
-i "reverse.png";

menuItem
-l "Offset"
-c "OffsetCurve;"
-rp "N"
-i "offsetCurve.png";

menuItem
-c "OffsetCurveOptions;"
-ob 1;

menuItem
-l "Open/Close"
-c "OpenCloseCurve"
-rp "SW"
-i "closeGeom.png";

menuItem
-c "OpenCloseCurveOptions"
-ob 1;

menuItem
-l "Separate"
-rp "NE"
-c "da_SepareCurves"
-i "da_separateCurves.png";

menuItem
-l "Input Operations..." 
-c "da_ListInputOperations" 
-i "out_list.png";

menuItem
-l "Rebuild..."
-c "RebuildCurveOptions"
-i "rebuildCurve.png";

menuItem
-l "Bevel Plus..."
-c "BevelPlusOptions"
-i "bevelPlus.png";

menuItem
-d 1;

menuItem
-l "Rivet to CVs"
-c "da_CurveCvRivet"
-i "pickPointComp.png";

menuItem
-l "Locator on Curve"
-c "da_LocatorOnCurve"
-i "locator.png";

menuItem
-l "Pivot to Origin"
-c "da_PivotToCurvesOrigin"
-i "selectFirstCV.png";

menuItem
-d 1;

menuItem
-l "Shape" 
-sm 1
-i "da_curveToPoly.png";

menuItem
-l "Paint FX to Curve"
-c "AttachBrushToCurves"
-i "paintFXtoCurve.png";

if (`about -api` >= 20220000){
menuItem
-l "Sweep Mesh"
-c "sweepMeshFromCurve -oneNodePerCurve false"
-i "shelf_sweepMeshFromCurve.png";
}else{
menuItem
-l "Convert to Polygons"
-c "da_curveToPoly"
-i "da_curveToPoly.png";
}

menuItem
-l "Create Curve Collector"
-c "da_aiCurveCollector"
-i "CurveCollectorShelf.png";

setParent -m ..;

menuItem
-l "Surface" 
-sm 1
-i "da_flatPoly.png";

menuItem
-l "Flat Surface"
-c "da_FlattenSurface"
-i "da_flatPoly.png";

menuItem
-l "Bevel Plus Mesh"
-c "da_BevelPlusForText"
-i "polyBevel.png";

setParent -m ..;

menuItem
-l "Component Display" 
-sm 1
-i "RS_visible.png" ;

menuItem
-l "CVs" 
-c "ToggleCVs" 
-i "selectCVs.png";

menuItem
-l "Hull" 
-c "ToggleHulls" 
-i "pickHullComp.png";

setParent -m ..;

menuItem
-l "Deformers"
-sm 1
-i "bendNLD.png";

if (!`optionVar -q deformationUseComponentTags`){
menuItem
-l "Deformer Set Editor..."
-c "DeformerSetEditor"
-i "da_deformerSetEditor.png";

menuItem
-d 1;
}

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

menuItem 
-d 1;

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_RiggedCluster" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_RiggedClusterUI" 
-i "cluster.png";
}

menuItem
-l "Lattice..."
-c "CreateLatticeOptions"
-i "lattice.png";

setParent -m ..;

menuItem
-l "Dynamics"
-sm 1
-i "out_nucleus.png";

menuItem
-l "Make Curves Dynamic"
-c "makeCurvesDynamic 2 { \"1\", \"0\", \"1\", \"1\", \"0\"}"
-i "hairDynamicCurves.png";

menuItem
-l "Curves to nHair" 
-c "da_CurveToNHairs" 
-i "out_pfxHair.png" ;

menuItem
-l "Simulation Method"
-sm 1;

menuItem
-l "Static"
-c "da_HairStatic";

menuItem
-l "Passive"
-c "da_HairPassive";

menuItem
-l "Dynamic"
-c "da_HairDynamic";

setParent -m ..;

menuItem
-l "Point Lock"
-sm 1;

menuItem
-l "No Attach"
-c "da_HairNoLock";

menuItem
-l "Base"
-c "da_HairLockBase";

menuItem
-l "Tip"
-c "da_nHairLockTip";

menuItem
-l "Both Ends"
-c "da_HairLockBothEnds";

setParent -m ..;

menuItem
-l "Follicle Braid"
-sm 1;

menuItem
-l "Enable"
-c "da_FollicleBraid"
-rp "N";

menuItem
-l "Disable"
-c "da_FollicleNoBraid";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Emit nParticle From CV..."
-c "NEmitFromObjectOptions"
-i "emitter.png";

menuItem
-l "Particle Style"
-sm 1
-i "out_particle.png";

menuItem
-l "Points"
-c "optionVar -stringValue NParticleStyle \"Points\";"
-i "nPartPoints.png";

menuItem
-l "Balls"
-c "optionVar -stringValue NParticleStyle \"Balls\";"
-i "nPartBalls.png";

menuItem
-l "Cloud"
-c "optionVar -stringValue NParticleStyle \"Cloud\";"
-i "nPartCloud.png";

menuItem
-l "ThickCloud"
-c "optionVar -stringValue NParticleStyle \"ThickCloud\";"
-i "nPartThickCloud.png";

menuItem
-l "Water"
-c "optionVar -stringValue NParticleStyle \"Water\";"
-i "nPartWater.png";

setParent -m ..;

menuItem
-l "Create nSoft Body..."
-c "CreateNSoftBodyOptions"
-i "soft.png";

menuItem
-l "Convert to Volume Curve"
-c "da_FiledCurve"
-i "posVolumeAxis.png";

menuItem
-d 1;

menuItem
-l "Set Fluid Contents"
-c "SetFluidAttrFromCurve"
-i "menuIconFluids.png";

menuItem
-c "SetFluidAttrFromCurveOptions"
-ob 1;

setParent -m ..;

menuItem
-l "Cache"
-sm 1
-i "nClothCacheCreate.png";

menuItem
-l "Create nCache..."
-c "nClothCacheOpt"
-i "nClothCacheCreate.png";

menuItem
-l "Delete nCache"
-c "deleteNclothCache"
-i "nClothCacheDelete.png";

menuItem
-l "Append to Cache"
-c "cacheAppend"
-i "nClothCacheAppend.png";

menuItem
-l "Attach Cache..."
-c "attachCache"
-i "nClothCacheExisting.png";

setParent -m ..;

menuItem
-l "Select" 
-sm 1
-i "selectCVs.png";

menuItem
-l "All CVs"
-c "SelectCurveCVsAll" 
-i "selectCVs.png";

menuItem
-l "First CV"
-c "SelectCurveCVsFirst" 
-i "selectFirstCV.png";

menuItem
-l "Last CV"
-c "SelectCurveCVsLast" 
-i "selectLastCV.png";

setParent -m ..;

} 
// Define CurveVertex marking menu
global proc CurveVertex_MM_May9(){

menuItem
-l "Transform nConstraint" 
-c "performCreateDynamicConstraint 0 \"transform\";" 
-rp "N" 
-i "nConstraintTransform.png";

setParent -m ..;

} 
// Define Deformers marking menu
global proc Deformers_MM_May9(){

string $currentTool = `currentCtx`;

menuItem
-l "Edit Membership Tool" 
-c "da_EditMembershipTool" 
-rp "N" 
-i "setEdit.png";

if (!`optionVar -q deformationUseComponentTags`){
menuItem
-l "Deformer Set Editor..."
-c "DeformerSetEditor"
-i "da_deformerSetEditor.png";
}

menuItem
-l "Deformer Manipulators" 
-c "da_EditDeformer" 
-rp "E"
-cb ($currentTool == "ShowManips");

setParent -m ..;

} 
// Define DynamicConstraint marking menu
global proc DynamicConstraint_MM_May9(){

menuItem
-l "Edit nConstraint..." 
-c "AttributeEditor" 
-rp "S" 
-i "attributes.png" ;

menuItem
-l "Remove nConstraint" 
-c "dynamicConstraintRemove;" 
-rp "W" 
-i "nConstraintRemoveMembers.png";

menuItem
-l "Edit Membership Tool" 
-c "da_EditConstraintMembershipTool" 
-rp "N" 
-i "nConstraintMembership.png";

menuItem
-l "Slide Constraint" 
-sm 1
-i "nConstraintSlideonSurface.png";

menuItem
-l "On" 
-c "da_SlideConstraintOn" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_SlideConstraintOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Cache"
-sm 1
-i "nClothCacheCreate.png";

menuItem
-l "Create nCache..."
-c "nClothCacheOpt"
-i "nClothCacheCreate.png";

menuItem
-l "Delete nCache"
-c "deleteNclothCache"
-i "nClothCacheDelete.png";

menuItem
-l "Append to Cache"
-c "cacheAppend"
-i "nClothCacheAppend.png";

menuItem
-l "Attach Cache..."
-c "attachCache"
-i "nClothCacheExisting.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Parent Constraint..." 
-c "ParentConstraintOptions" 
-i "parentConstraint.png";

menuItem
-l "Point Constraint..." 
-c "PointConstraintOptions" 
-i "posConstraint.png";

menuItem
-l "Orient Constraint..." 
-c "OrientConstraintOptions" 
-i "orientConstraint.png";

menuItem
-l "Aim Constraint..." 
-c "AimConstraintOptions" 
-i "aimConstraint.png";

setParent -m ..;

} 
// Define EdgeVertices marking menu
global proc EdgeVertices_MM_May9(){

menuItem
-l "Crease Set Editor..." 
-c "python \"creaseSetEditor.showCreaseSetEditor()\";" 
-rp "N" 
-i "polyCrease.png";

setParent -m ..;

} 
// Define Edge marking menu
global proc Edge_MM_May9(){

Sup_Symmetry_MM_May9;

Sup_SoftSelect_MM_May9;

string $SurfaceSlide = `xformConstraint -q -type`;
string $myComponents[] = `ls -sl -fl`;

menuItem
-l "Surface Slide"
-c "da_SurfaceSlideToggle"
-rp "SE"
-cb ($SurfaceSlide == "surface");

menuItem
-l "Bevel"
-c "BevelPolygon;"
-rp "NW"
-i "polyBevel.png";

if (size($myComponents) > 1){
menuItem
-l "Bridge"
-c "BridgeEdge"
-rp "NE"
-i "polyBridge.png";
} else {
menuItem
-l "Append to Polygon"
-c "AppendToPolygonTool"
-rp "NE"
-i "polyAppendFacet.png";
}


menuItem
-l "Multi Cut"
-c "dR_multiCutTool;"
-rp "W"
-i "multiCut_NEX32.png";

menuItem
-l "Delete Edge"
-c "DeletePolyElements;"
-rp "SW"
-i "polyDelEdgeVertex.png";

menuItem
-l "Extrude"
-c "PolyExtrude"
-rp "E"
-i "polyExtrudeFacet.png";

if (`about -api` >= 20200000){
menuItem
-l "Rivet Constraint" 
-c "Rivet" 
-i "pointOnPolyConstraint.png";
}else{
if(size($myComponents) != 1){
menuItem
-l "Air Rivet..."
-c "da_AirRivet"
-i "out_airField.png";
}else{
menuItem
-l "Air Rivet"
-c "da_AirRivet"
-i "out_airField.png";
}
}

menuItem
-d 1;

menuItem
-l "Edit"
-sm 1
-i "edges_NEX.png";

menuItem
-l "Connect"
-c "dR_connectTool;"
-i "connect_NEX32.png";

menuItem
-l "Transform"
-c "performPolyMove \"\" 0"
-i "polyMoveVertex.png";

menuItem
-l "Edit Edge Flow"
-c "PolyEditEdgeFlow"
-i "polyEditEdgeFlow.png";

menuItem
-l "Detach"
-c "da_DetachEdge"
-i "polySplitVertex.png";

menuItem
-d 1;

menuItem
-l "Crease Tool"
-c "PolyCreaseTool"
-i "polyCrease.png";

menuItem
-c "python \"creaseSetEditor.showCreaseSetEditor()\";"
-ob 1;

menuItem
-l "Remove Crease"
-c "polyCrease -op 1"
-i "trash.png";

menuItem
-d 1;

menuItem
-l "Flip"
-c "dR_performSymmetryFlip;\ninViewMessage -pos topCenter -msg \"Select simmetry edge\" -fade;"
-i "polyFlip.png";

menuItem
-l "Symmetrize"
-c "dR_performSymmetrize;\ninViewMessage -pos topCenter -msg \"Select simmetry edge\" -fade;"
-i "symmetrize.png";

setParent -m ..;

menuItem
-l "Convert"
-sm 1
-i "polyEdgeToCurves.png";

menuItem
-l "Multiple Edges to Curve"
-c "jh_rainCurvesFromEdges"
-i "polyEdgeToCurves.png";

menuItem
-l "To Loops to Curves..."
-c "da_EdgesToLoopToCurve"
-i "da_EdgeToLoopToCurve.png";

setParent -m ..;

menuItem
-l "Deformers"
-sm 1
-i "bendNLD.png";

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

menuItem 
-d 1;

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_PaintableRiggedCluster" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_PaintableRiggedClusterUI" 
-i "cluster.png";
}

menuItem
-l "Lattice..."
-c "CreateLatticeOptions"
-i "lattice.png";

setParent -m ..;

menuItem
-l "UV Mapping"
-sm 1
-i "polyUnfoldUVs.png";

menuItem
-l "3D Cut and Sew"
-c "SetCutSewUVTool"
-i "CutSewUVTool.png";

menuItem
-l "Stitch" 
-c "texMultiStitch 1" 
-i "polyUVMultiStitch.png";

menuItem
-l "Cut"
-c "CutUVs"
-i "polyCutUV.png";

menuItem
-d 1;

menuItem
-l "UV Borders"
-c "da_ToggleUVBorders"
-i "UVEditorTextureBorder.png";

setParent -m ..;

menuItem
-l "Normals"
-sm 1
-i "polyNormalsPropagate.png";

menuItem
-l "Unlock UV"
-c "polyNormalPerVertex -ufn true;"
-i "polyNormalUnlock.png";

menuItem
-l "Set Soften Edge"
-c "PolygonSoftenEdge"
-i "polySoftEdge.png";

menuItem
-l "Set Harden Edge"
-c "PolygonHardenEdge"
-i "polyHardEdge.png";

setParent -m ..;

menuItem
-l "nConstraint"
-sm 1
-i "menuIconConstraints.png";

menuItem
-l "Transform Constraint"
-c "doCreateNConstraint transform 0"
-i "nConstraintTransform.png";

menuItem
-l "Self Component"
-c "performCreateComponentNConstraint 0;"
-i "nConstraintComponent.png";

menuItem
-c "performCreateComponentNConstraint 1;"
-ob 1;

menuItem
-l "Component to Component"
-c "performCreateDynamicConstraint 0 \"pointToPoint\";"
-i "nConstraintComponent.png";

menuItem
-l "Tearable Surface"
-c "performCreateDynamicConstraint 0 \"tearableSurface\";"
-i "nConstraintTearable.png";

menuItem
-l "Force Field"
-c "doCreateNConstraint force 0"
-i "nConstraintForceField.png";

menuItem
-d 1;

menuItem
-l "Add Members"
-c "ConvertSelectionToVertices;\ndynamicConstraintMembership \"add\";"
-i "nConstraintAddMembers.png";

menuItem
-l "Remove Members"
-c "ConvertSelectionToVertices;\ndynamicConstraintMembership \"remove\";"
-i "nConstraintRemoveMembers.png";

setParent -m ..;

menuItem
-l "Select"
-sm 1
-i "aselect.png";

menuItem
-l "Invert"
-c "da_InvertSelection" 
-i "out_reverse.png";

menuItem
-l "All"
-c "da_SelectAll" 
-i "aselect.png";

menuItem
-d 1;

menuItem
-l "Straight Angle"
-c "da_EdgeStraightAngle"
-i "da_sraightAngle.png";

menuItem
-l "Right Angle"
-c "da_EdgeRightAngle"
-i "da_rightAngle.png";

menuItem
-l "Acute Angle"
-c "da_EdgeAcuteAngle"
-i "da_acuteAngle.png";

menuItem
-l "Inside"
-c "da_EdgeInside"
-i "da_insideEdge.png";

menuItem
-l "On Border"
-c "da_EdgeBorder"
-i "da_borderEdge.png";

menuItem
-l "Soft"
-c "da_EdgeSoft"
-i "da_softEdge.png";

menuItem
-l "Hard"
-c "da_EdgeHard"
-i "da_hardEdge.png";

menuItem
-d 1;

menuItem
-l "Ring and Loop"
-c "da_EdgeRingAndLoop"
-i "polyDuplicateEdgeLoop.png";

if (`about -api` >= 20180000){
menuItem
-l "Contiguous..."
-c "SelectContiguousEdgesOptions"
-i "polySplitEdgeRing.png";
}

menuItem
-d 1;

menuItem
-l "Selection Constraints..."
-c "PolygonSelectionConstraints"
-i "polySelectUsingConstraints.png";

menuItem
-l "Create Quick Set..."
-c "CreateQuickSelectSet" 
-i "out_objectSet.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Selection to Vertices"
-c "ConvertSelectionToVertices"
-i "vertex_NEX.png";

menuItem
-l "Selection to UVs"
-c "ConvertSelectionToUVs"
-i "UVEditorVertex.png";

setParent -m ..;

} 
// Define Expression marking menu
global proc Expression_MM_May9(){

menuItem
-l "String to Expression"
-c "da_StringNodeToExpression"
-rp "N" 
-i "text.png";

menuItem
-l "Expression Editor..."
-c "da_ExpressionEditor"
-rp "S" 
-i "out_expression.png";

setParent -m ..;
}
// Define FaceCurve marking menu
global proc FaceCurve_MM_May9(){

menuItem
-l "Extrude" 
-c "PolyExtrude" 
-rp "N" 
-i "polyExtrudeFacet.png";

setParent -m ..;

} 
// Define FaceEdge marking menu
global proc FaceEdge_MM_May9(){

menuItem
-l "Wedge" 
-c "WedgePolygon" 
-rp "N" 
-i "polyWedgeFace.png";

menuItem
-c "WedgePolygonOptions" 
-ob 1;

menuItem
-l "Bevel" 
-c "BevelPolygon" 
-rp "NW" 
-i "polyBevel.png";

setParent -m ..;

} 
// Define Face marking menu
global proc Face_MM_May9(){

Sup_Symmetry_MM_May9;

Sup_SoftSelect_MM_May9;

string $SurfaceSlide = `xformConstraint -q -type`;
string $myComponents[] = `ls -sl -fl`;

menuItem
-l "Surface Slide"
-c "da_SurfaceSlideToggle"
-rp "SE"
-cb ($SurfaceSlide == "surface");

if (`about -api` >= 20180000){
menuItem
-l "Circularize"
-c "performPolyCircularize 0"
-rp "SW"
-i "polyCircularize.png";
}

menuItem
-l "Bridge"
-c "BridgeEdge;"
-rp "NE"
-i "polyBridge.png";

menuItem
-l "Multi Cut"
-c "dR_multiCutTool;"
-rp "W"
-i "multiCut_NEX32.png";

menuItem
-l "Bevel"
-c "BevelPolygon;"
-rp "NW"
-i "polyBevel.png";

menuItem
-l "Extrude"
-c "PolyExtrude"
-rp "E"
-i "polyExtrudeFacet.png";

if (`about -api` >= 20200000){
menuItem
-l "Rivet Constraint" 
-c "Rivet" 
-i "pointOnPolyConstraint.png";
}else{
if(size($myComponents) != 1){
menuItem
-l "Air Rivet..."
-c "da_AirRivet"
-i "out_airField.png";
}else{
menuItem
-l "Air Rivet"
-c "da_AirRivet"
-i "out_airField.png";
}
}

menuItem
-l "CTRL Mesh" 
-c "da_CtrlMesh" 
-i "polySplitVertex.png";

menuItem
-d 1;

menuItem
-l "Edit"
-sm 1
-i "faces_NEX.png";

menuItem
-l "Connect"
-c "dR_connectTool;"
-i "connect_NEX32.png";

menuItem
-l "Transform"
-c "performPolyMove \"\" 0"
-i "polyMoveVertex.png";

menuItem
-l "Extract"
-c "ExtractFace"
-i "polyChipOff.png";

menuItem
-l "Duplicate"
-c "performPolyChipOff 0 1"
-i "polyDuplicateFacet.png";

menuItem
-l "Poke"
-c "PokePolygon"
-i "polyPoke.png";

menuItem
-d 1;

menuItem
-l "Flip"
-c "dR_performSymmetryFlip;\ninViewMessage -pos topCenter -msg \"Select simmetry edge\" -fade;"
-i "polyFlip.png";

menuItem
-l "Symmetrize"
-c "dR_performSymmetrize;\ninViewMessage -pos topCenter -msg \"Select simmetry edge\" -fade;"
-i "symmetrize.png";

if (`about -api` >= 20200000){
menuItem
-d 1;

menuItem
-l "Remesh"
-c "polyRemesh"
-i "polyRemesh.png";
}

setParent -m ..;

menuItem
-l "Deformers"
-sm 1
-i "bendNLD.png";

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

menuItem 
-d 1;

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_PaintableRiggedCluster" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_PaintableRiggedClusterUI" 
-i "cluster.png";
}

menuItem
-l "Lattice..."
-c "CreateLatticeOptions"
-i "lattice.png";

if (`about -api` >= 20220000){
menuItem
-l "Solidify"
-c "Solidify"
-i "polyPlatonicSolid.png";
}

setParent -m ..;

menuItem
-l "UV Mapping"
-sm 1
-i "polyUnfoldUVs.png";

menuItem
-l "Flip U" 
-c "polyFlipUV -flipType 0 -local on" 
-i "flipU.png";

menuItem
-l "Select Shell" 
-c "da_SelectShellFromFaces" 
-i "UVTkUVShell.png";

menuItem
-l "Match Shells Scale" 
-c "uvTkDoGetTexelDensity;uvTkDoSetTexelDensity" 
-i "polyScaleUV.png";

menuItem
-d 1;

menuItem
-l "Automatic..."
-c "performPolyAutoProj 1"
-i "polyAutoProj.png";

menuItem
-l "Spherical"
-c "performPolyProjectionArgList \"1\" {\"0\", \"Spherical\", \"ls -selection\", \"0\"} \"\";"
-i "polySphereProj.png";

menuItem
-l "Per Face..."
-c "da_MapFacesFacesUV"
-i "polyNormalProj.png";

menuItem
-d 1;

menuItem
-l "Planar"
-c "polyProjection -ch 1 -type Planar -ibd on -md b; ShowManipulators;"
-i "polyPlanProjLarge.png";

menuItem
-l "Planar Keep Ratio"
-c "polyProjection -ch 1 -type Planar -ibd on -kir -md b; ShowManipulators;"
-i "polyPlanProjLarge.png";

setParent -m ..;

menuItem
-l "Normals"
-sm 1
-i "polyNormalsPropagate.png";

menuItem
-l "Unlock Normals"
-c "polyNormalPerVertex -ufn true;"
-i "polyNormalUnlock.png";

menuItem
-l "Reverse Normals"
-c "ReversePolygonNormals;"
-i "polyNormal.png";

menuItem
-l "Set Soften Edge"
-c "PolygonSoftenEdge"
-i "polySoftEdge.png";

menuItem
-l "Set Harden Edge"
-c "PolygonHardenEdge"
-i "polyHardEdge.png";

setParent -m ..;

menuItem
-l "Shading"
-sm 1
-i "render_adskMaterial.png";

menuItem
-l "Edit Material..."
-c "da_SelectAssignedShader"
-i "materialEditor.png";

$item = "";

$menuAssign = `menuItem -l (uiRes("m_buildShaderMenus.kAssignExistingMaterial")) -sm true -i "out_shaderList.png"`;
menuItem 
-edit 
-postMenuCommand ("buildAssignShaderMenu " + $menuAssign + " \""+$item+"\"") $menuAssign;
setParent -menu ..;

menuItem
-l "Assign New Material..."
-c "createAssignNewMaterialTreeLister \"\""
-i "render_adskMaterial.png";

menuItem
-d 1;

menuItem
-l "Shaded Brightness Two Tone"
-c "assignToonShader \"shadedBrightness\""
-i "toonBrightness2.png";

menuItem
-l "Shaded Brightness Three Tone"
-c "assignToonShader \"threeToneBrightness\""
-i "toonBrightness3.png";

menuItem
-l "Circle Highlight"
-c "assignToonShader \"circleHighlight\""
-i "toonCircleHigh.png";

menuItem
-d 1;

menuItem
-l "Select By Shader"
-c "da_SelectComponentShader"
-i "out_layeredShader.png";

setParent -m ..;

menuItem
-l "Dynamics"
-sm 1
-i "out_nucleus.png";

menuItem
-l "Create Follicle"
-c "da_FacesFollicles"
-i "out_follicle.png";

menuItem
-l "Create Hair..."
-c "CreateHairOptions"
-i "hairCreate.png";

setParent -m ..;

menuItem
-l "nConstraint"
-sm 1
-i "menuIconConstraints.png";

menuItem
-l "Transform Constraint"
-c "doCreateNConstraint transform 0"
-i "nConstraintTransform.png";

menuItem
-l "Component to Component"
-c "performCreateDynamicConstraint 0 \"pointToPoint\";"
-i "nConstraintComponent.png";

menuItem
-l "Self Component"
-c "performCreateComponentNConstraint 0;"
-i "nConstraintComponent.png";

menuItem
-c "performCreateComponentNConstraint 1;"
-ob 1;

menuItem
-l "Tearable Surface"
-c "performCreateDynamicConstraint 0 \"tearableSurface\";"
-i "nConstraintTearable.png";

menuItem
-l "Force Field"
-c "doCreateNConstraint force 0"
-i "nConstraintForceField.png";

menuItem
-d 1;

menuItem
-l "Add Members"
-c "ConvertSelectionToVertices;\ndynamicConstraintMembership \"add\";"
-i "nConstraintAddMembers.png";

menuItem
-l "Remove Members"
-c "ConvertSelectionToVertices;\ndynamicConstraintMembership \"remove\";"
-i "nConstraintRemoveMembers.png";

setParent -m ..;

menuItem
-l "XGen"
-sm 1
-i "xgDEditor.png";

menuItem
-l "Create Interactive Groom..."
-c "XgmCreateInteractiveGroomSplinesOption"
-i "xgIG_creation.png";

menuItem
-d 1;

menuItem
-l "Create Description..."
-c "XgCreateDescription"
-i "xgCreateDescription.png";

menuItem
-l "Guides Tool"
-c "XgGuideTool"
-i "xgGuideContext.png";

setParent -m ..;

menuItem
-l "Select"
-sm 1
-i "aselect.png";

menuItem
-l "Invert"
-c "da_InvertSelection" 
-i "out_reverse.png";

menuItem
-l "All"
-c "da_SelectAll" 
-i "aselect.png";

menuItem
-d 1;

menuItem
-l "Triangle"
-c "da_SelectTriangle"
-i "polyTriangulate.png";

menuItem
-l "Nsided"
-c "da_SelectNsided"
-i "polyCreateFacet.png";

menuItem
-d 1;

menuItem
-l "Selection Constraints..."
-c "PolygonSelectionConstraints"
-i "polySelectUsingConstraints.png";

menuItem
-l "Create Quick Set..."
-c "CreateQuickSelectSet" 
-i "out_objectSet.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Selection to Vertices"
-c "ConvertSelectionToVertices"
-i "vertex_NEX.png";

menuItem
-l "Selection to Edges"
-c "ConvertSelectionToEdgePerimeter"
-i "UVTkEdge.png";

setParent -m ..;

} 
// Define Field marking menu
global proc Field_MM_May9(){
string $myCurTransform[] = `ls -sl -typ "transform"`;

menuItem
-l "Assign Field to Selected" 
-c "AffectSelectedObject" 
-rp "W" 
-i "connectField.png" 
-en (size($myCurTransform) >= 2);

menuItem
-l "Dynamic Relationship..."
-c "DynamicRelationshipEditor"
-i "passSetRelationEditor.png"
-rp "S";	
}
// Define FileTexture marking menu
global proc FileTexture_MM_May9(){
string $myNode[] = `ls -sl`;

menuItem
-l "Alpha is Luminance On" 
-c "da_FileAlphaLuminance" 
-rp "E";

menuItem
-l "Alpha is Luminance Off" 
-c "da_FileNoAlphaLuminance" 
-rp "W";

menuItem
-l "Color Space sRGB" 
-c "da_FileColorSpaceSrgb" 
-rp "SE";

menuItem
-l "Color Space Raw" 
-c "da_FileColorSpaceRaw" 
-rp "SW";

menuItem
-l "Filter Type Off" 
-c "da_FileFilterOff" 
-rp "NW";

menuItem
-l "Filter Type Quadratic" 
-c "da_FileFilterQuadratic" 
-rp "NE";

menuItem
-l "Connect Place2d Node" 
-c "da_ConnectPlace2dToFile" 
-i "out_place2dTexture.png" 
-en (size($myNode) >= 2) 
-rp "N";

setParent -m ..;

} 
// Define Fluid marking menu
global proc Fluid_MM_May9(){
string $mySel[] = `ls -sl`;
string $myCurve[] = `filterExpand -sm 9`;
string $myQueryArrayNodeType[] = `da_QueryArrayNodeType`;

select $mySel;

if (stringArrayContains("volumeAxisField", $myQueryArrayNodeType) || stringArrayContains("airField", $myQueryArrayNodeType) || stringArrayContains("dragField", $myQueryArrayNodeType) || stringArrayContains("gravityField", $myQueryArrayNodeType) || stringArrayContains("newtonField", $myQueryArrayNodeType) || stringArrayContains("radialField", $myQueryArrayNodeType) || stringArrayContains("turbulenceField", $myQueryArrayNodeType) || stringArrayContains("uniformField", $myQueryArrayNodeType) || stringArrayContains("vortexField", $myQueryArrayNodeType)){
menuItem
-l "Assign Field to Selected" 
-c "AffectSelectedObject" 
-rp "W" 
-i "connectField.png";
}

menuItem
-l "Paint Fluids" 
-c "PaintFluidsTool" 
-rp "N" 
-i "fluidPaint.png";

menuItem
-l "Add Emitter" 
-c "FluidEmitter" 
-rp "NW" 
-i "fluidEmitterAdd.png" ;

menuItem
-c "FluidEmitterOptions" 
-ob 1;

menuItem
-l "Emit from Object..." 
-c "EmitFluidFromObjectOptions" 
-rp "S" 
-i "fluidObjectEmit.png" ;

menuItem
-l "Initial Library" 
-c "InitialFluidStates" 
-rp "E" 
-i "fluidGetInitialStatePresets.png";

menuItem
-l "Gradients" 
-c "doFluidGradients 1 { \"1\", \"3\", \"0\", \"1\", \"0\", \"1\", \"0\", \"1\"  };" 
-rp "NE" 
-i "menuIconFluids.png" ;

menuItem
-c "FluidGradientsOptions" 
-ob 1;

menuItem
-l "Make Collide" 
-c "doMakeCollideFluid 1 { \"200\" } " 
-rp "SE" 
-i "fluidCollide.png";

menuItem
-c "MakeFluidCollideOptions" 
-ob 1;

menuItem
-l "Convert to Polygons" 
-c "da_FluidToMesh" 
-rp "SW" 
-i "fluidtoPoly.png";

menuItem
-l "Auto Resize" 
-sm 1;

menuItem
-l "On" 
-c "da_FluidAutoResizeOn" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_FluidAutoResizeOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Self Shadow" 
-sm 1;

menuItem
-l "On" 
-c "da_FluidSelfShadowingOn" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_FluidSelfShadowingOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Set Initial State" 
-c "SetInitialState" 
-i "fluidInitialStateSet.png";

menuItem
-c "SetInitialStateOptions" 
-ob 1;

menuItem
-l "Fields" 
-sm 1
-i "posRadial.png";

menuItem
-l "Air" 
-c "dynExecuteFieldCommands 1 \"air -pos 0 0 0 -m 4 -att 1 -dx 0 -dy 1 -dz 0 -s 5 -iv 1 -iro 1 -vco 0 -es 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posAir.png";

menuItem
-l "Drag" 
-c "dynExecuteFieldCommands 1 \"drag -pos 0 0 0 -m 0.05 -att 1 -dx 0 -dy 0 -dz 0 -ud 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posDrag.png";

menuItem
-l "Gravity" 
-c "dynExecuteFieldCommands 1 \"gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5\"" 
-i "posGravity.png";

menuItem
-l "Newton" 
-c "dynExecuteFieldCommands 1 \"newton -pos 0 0 0 -m 5 -att 1 -mnd 0.2  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posNewton.png";

menuItem
-l "Radial" 
-c "dynExecuteFieldCommands 1 \"radial -pos 0 0 0 -m 5 -att 1 -typ 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posRadial.png";

menuItem
-l "Turbulence" 
-c "dynExecuteFieldCommands 1 \"turbulence -pos 0 0 0 -m 5 -att 1 -f 1 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posTurbulence.png" ;

menuItem
-l "Uniform" 
-c "dynExecuteFieldCommands 1 \"uniform -pos 0 0 0 -m 5 -att 1 -dx 1 -dy 0 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posUniform.png" ;

menuItem
-l "Vortex" 
-c "dynExecuteFieldCommands 1 \"vortex -pos 0 0 0 -m 5 -att 1 -ax 0 -ay 1 -az 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVortex.png" ;

menuItem
-l "Volume Axis" 
-c "dynExecuteFieldCommands 1 \"volumeAxis -pos 0 0 0 -m 5 -att 0 -ia 0 -afc 1 -afx 1 -arx 0 -alx 0 -drs 0 -dx 1 -dy 0 -dz 0 -trb 0 -trs 0.2 -tfx 1 -tfy 1 -tfz 1 -tox 0 -toy 0 -toz 0 -dtr 0  -mxd -1  -vsh cube -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVolumeAxis.png" ;

menuItem
-d 1;

menuItem
-l "Kill Volume" 
-c "da_FluidKillFields" 
-i "removeTweaks.png" ;

setParent -m ..;

menuItem
-l "Cache"
-sm 1
-i "nClothCacheCreate.png";

menuItem
-l "Create Cache..."
-c "CreateFluidCacheOptions"
-i "fluidCacheCreate.png";

menuItem
-l "Delete Cache..."
-c "fluidDeleteCacheOpt"
-i "fluidCacheDelete.png";

menuItem
-l "Append to Cache"
-c "cacheAppend"
-i "nClothCacheAppend.png";

menuItem
-l "Attach Cache..."
-c "attachCache"
-i "nClothCacheExisting.png";

setParent -m ..;

setParent -m ..;

} 
// Define FluidEmitter marking menu
global proc FluidEmitter_MM_May9(){
menuItem
-l "Emitter Omni"
-rp "NW" 
-i "out_pointEmitter.png"
-c "da_EmitterOmni";

menuItem
-l "Emitter Volume" 
-rp "NE"
-i "volumeCube.png"
-c "da_EmitterVolume";

menuItem
-l "Volume As Direc" 
-rp "NE"
-c "da_EmitterVolume";

setParent -m ..;
}
// Define Follicle marking menu
global proc Follicle_MM_May9(){

menuItem
-l "Simulation Method" 
-sm 1
-rp "E" 
-i "out_nucleus.png";

menuItem
-l "Static" 
-c "da_HairStatic" 
-rp "NE";

menuItem
-l "Passive" 
-c "da_HairPassive" 
-rp "E";

menuItem
-l "Dynamic" 
-c "da_HairDynamic" 
-rp "SE";

setParent -m ..;

menuItem
-l "Point Lock" 
-sm 1
-rp "W" 
-i "pinned.png";

menuItem
-l "No Attach" 
-c "da_HairNoLock" 
-rp "W";

menuItem
-l "Base" 
-c "da_HairLockBase" 
-rp "NW";

menuItem
-l "Both Ends" 
-c "da_HairLockBothEnds" 
-rp "SW";

menuItem
-l "Tip" 
-c "da_nHairLockTip" 
-rp "N";

setParent -m ..;

menuItem
-l "Self Collide" 
-sm 1;

menuItem
-l "On" 
-c "da_nHairSelfCollideOn" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_nHairSelfCollideOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Collide" 
-sm 1;

menuItem
-l "On" 
-c "da_nHairCollideOn" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_nHairColllideOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Braid" 
-sm 1;

menuItem
-l "On" 
-c "da_FollicleBraid" 
-rp "N" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_FollicleNoBraid" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Fields" 
-sm 1
-i "posRadial.png";

menuItem
-l "Air" 
-c "dynExecuteFieldCommands 1 \"air -pos 0 0 0 -m 4 -att 1 -dx 0 -dy 1 -dz 0 -s 5 -iv 1 -iro 1 -vco 0 -es 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posAir.png";

menuItem
-l "Drag" 
-c "dynExecuteFieldCommands 1 \"drag -pos 0 0 0 -m 0.05 -att 1 -dx 0 -dy 0 -dz 0 -ud 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posDrag.png";

menuItem
-l "Gravity" 
-c "dynExecuteFieldCommands 1 \"gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5\"" 
-i "posGravity.png";

menuItem
-l "Newton" 
-c "dynExecuteFieldCommands 1 \"newton -pos 0 0 0 -m 5 -att 1 -mnd 0.2  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posNewton.png";

menuItem
-l "Radial" 
-c "dynExecuteFieldCommands 1 \"radial -pos 0 0 0 -m 5 -att 1 -typ 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posRadial.png";

menuItem
-l "Turbulence" 
-c "dynExecuteFieldCommands 1 \"turbulence -pos 0 0 0 -m 5 -att 1 -f 1 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posTurbulence.png" ;

menuItem
-l "Uniform" 
-c "dynExecuteFieldCommands 1 \"uniform -pos 0 0 0 -m 5 -att 1 -dx 1 -dy 0 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posUniform.png" ;

menuItem
-l "Vortex" 
-c "dynExecuteFieldCommands 1 \"vortex -pos 0 0 0 -m 5 -att 1 -ax 0 -ay 1 -az 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVortex.png" ;

menuItem
-l "Volume Axis" 
-c "dynExecuteFieldCommands 1 \"volumeAxis -pos 0 0 0 -m 5 -att 0 -ia 0 -afc 1 -afx 1 -arx 0 -alx 0 -drs 0 -dx 1 -dy 0 -dz 0 -trb 0 -trs 0.2 -tfx 1 -tfy 1 -tfz 1 -tox 0 -toy 0 -toz 0 -dtr 0  -mxd -1  -vsh cube -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVolumeAxis.png" ;

setParent -m ..;

menuItem
-l "Cache"
-sm 1
-i "nClothCacheCreate.png";

menuItem
-l "Create nCache..."
-c "nClothCacheOpt"
-i "nClothCacheCreate.png";

menuItem
-l "Delete nCache"
-c "deleteNclothCache"
-i "nClothCacheDelete.png";

menuItem
-l "Append to Cache"
-c "cacheAppend"
-i "nClothCacheAppend.png";

menuItem
-l "Attach Cache..."
-c "attachCache"
-i "nClothCacheExisting.png";

setParent -m ..;

setParent -m ..;

} 
// Define GPUCache marking menu
global proc GPUCache_MM_May9(){

menuItem
-l "Make Live" 
-c "string $mySel[] = `ls -sl`;\nMakeLive;\nselect $mySel;" 
-rp "N" 
-i "makeLive.png";

menuItem
-l "Quad Draw" 
-c "dR_quadDrawTool;" 
-rp "S" 
-i "quadDraw_NEX32.png";

menuItem
-l "Unmake Live" 
-c "makeLive -n" 
-rp "NE" 
-i "setEdRemoveCmd.png";

menuItem
-l "Refresh GPU Cache" 
-c "GpuCacheRefreshAll" 
-i "QR_refresh.png";

setParent -m ..;

} 
// Define GraphEditor marking menu
global proc GraphEditor_MM_May9(){

global string $da_currentGraphPanel;
$da_currentGraphPanel = `getPanel -underPointer` + "GraphEd";

string $myAnimCurve[] = `keyframe -q -sl -name`;
string $myKeyTangent[] = `keyTangent -q -global -ott`;

int $weightedTangentsCheck[] = `keyTangent -q -weightedTangents`;
int $weightedTangentsSum = 0;
for ($each in $weightedTangentsCheck)
$weightedTangentsSum += $each;

int $breakTangentsCheck[] = `keyTangent -q -lock`;
int $breakTangentsSum = 0;
for ($each in $breakTangentsCheck)
$breakTangentsSum += $each;

menuItem
-l "Weighted Tangents" 
-c "da_weightedTangents" 
-rp "E"
-cb ($weightedTangentsSum) 
-en (`size($myAnimCurve)`);

menuItem
-l "Break Tangents" 
-c "da_breakTangents" 
-rp "W"
-cb (! $breakTangentsSum) 
-en (`size($myAnimCurve)`);

menuItem
-l "Insert Keyframe" 
-c "da_InseritKeyframe" 
-rp "N" 
-i "keyIntoclip.png"
-en (`size($myAnimCurve)`);

menuItem
-l "Swap Buffer Curve" 
-c "doBuffer swap $da_currentGraphPanel" 
-rp "NE" 
-i "bufferSwap.png"
-en (`size($myAnimCurve)`);

if (`animCurveEditor -q -sb $da_currentGraphPanel` == "on" && `size($myAnimCurve)`){
menuItem
-l "Update Buffer Curves" 
-c "doBuffer snapshot $da_currentGraphPanel" 
-rp "NW"
-i "bufferSnap.png";
} else if (`animCurveEditor -q -sb $da_currentGraphPanel` == "off" && `size($myAnimCurve)`) {
menuItem
-l "Buffer Curves" 
-c "animCurveEditor -e -sb 1 $da_currentGraphPanel" 
-rp "NW" 
-cb (`animCurveEditor -q -sb $da_currentGraphPanel` == "on");
} else {
menuItem
-l "Buffer Curves" 
-c "animCurveEditor -e -sb 0 $da_currentGraphPanel" 
-rp "NW" 
-cb (`animCurveEditor -q -sb $da_currentGraphPanel` == "on")
-en (`animCurveEditor -q -sb $da_currentGraphPanel` == "on");
}

menuItem
-l "Buffer Curves" 
-c "animCurveEditor -edit -sb tgl $da_currentGraphPanel; doBuffer snapshot $da_currentGraphPanel" 
-rp "NW" 
-cb (`animCurveEditor -q -sb $da_currentGraphPanel` == "on");

menuItem
-l "Delete Static Channels" 
-c "delete -staticChannels -unitlessAnimationCurves false -hierarchy none -controlPoints 0 -shape 1" 
-rp "S" 
-i "deleteGeneric.png";

menuItem
-l "Object from Curve" 
-c "da_SelectFromAnimCurve" 
-rp "SW" 
-i "aselect.png" 
-en (`size($myAnimCurve)`);

menuItem
-l "Round Keyframes"
-c "da_roundKeyframe"
-rp "SE"
-i "teSetKeyframe.png";

menuItem 
-l "Display Infinity"
-c "da_ToggleGraphInfinity"
-cb (`animCurveEditor -q -di $da_currentGraphPanel`);

menuItem 
-l "Disable Infinity"
-c "da_RemoveInfinity"
-i "rvViewingPipelineOff.png"
-en (`size($myAnimCurve)`);

if (`size($myAnimCurve)`){
menuItem 
-l "Pre Infinity"
-sm 1
-i "preInfinityCycle.png";

menuItem
-l "Cycle" 
-c "setInfinity -pri cycle; animCurveEditor -e -di 1 $da_currentGraphPanel" 
-i "preInfinityCycle.png";

menuItem
-l "Cycle with Offset" 
-c "setInfinity -pri cycleRelative; animCurveEditor -e -di 1 $da_currentGraphPanel" 
-i "preInfinityCycleOffset.png";

menuItem
-l "Oscillate" 
-c "setInfinity -pri oscillate; animCurveEditor -e -di 1 $da_currentGraphPanel";

menuItem
-l "Linear" 
-c "setInfinity -pri linear; animCurveEditor -e -di 1 $da_currentGraphPanel";

menuItem
-l "Costant" 
-c "setInfinity -pri constant; animCurveEditor -e -di 1 $da_currentGraphPanel";

setParent -m ..;

menuItem 
-l "Post Infinity"
-sm 1
-i "postInfinityCycle.png";

menuItem
-l "Cycle" 
-c "setInfinity -poi cycle; animCurveEditor -e -di 1 $da_currentGraphPanel" 
-i "postInfinityCycle.png";

menuItem
-l "Cycle with Offset" 
-c "setInfinity -poi cycleRelative; animCurveEditor -e -di 1 $da_currentGraphPanel" 
-i "postInfinityCycleOffset.png";

menuItem
-l "Oscillate" 
-c "setInfinity -poi oscillate; animCurveEditor -e -di 1 $da_currentGraphPanel";

menuItem
-l "Linear" 
-c "setInfinity -poi linear; animCurveEditor -e -di 1 $da_currentGraphPanel";

menuItem
-l "Costant" 
-c "setInfinity -poi constant; animCurveEditor -e -di 1 $da_currentGraphPanel";

setParent -m ..;

menuItem
-d 1;

menuItem 
-l "Lock Channel"
-sm 1
-i "nodeGrapherLocked.png";

menuItem
-l "On" 
-c "GraphEditorLockChannel" 
-i "nodeGrapherLocked.png";

menuItem
-l "Off" 
-c "GraphEditorUnlockChannel;" 
-i "nodeGrapherUnlocked.png";

setParent -m ..;

menuItem 
-l "Mute Channel"
-sm 1
-i "muted.png";

menuItem
-l "On" 
-c "doMuteChannel graphEditor1FromOutliner -true;" 
-i "muted.png";

menuItem
-l "Off" 
-c "doMuteChannel graphEditor1FromOutliner -false;" 
-i "teMuteOff.png";

setParent -m ..;
}

menuItem
-d 1;

if (`about -api` >= 20190000){
menuItem
-l "Smooth Filter..." 
-c "performButterworth 4 $da_currentGraphPanel" 
-i "da_smoothCurve.png";

menuItem
-l "Key Reducer Filter..." 
-c "performKeyReducer 4 $da_currentGraphPanel" 
-i "da_simplifyCurve.png";
}else{
menuItem
-l "Simplify Curves..." 
-c "performSimplify 4 $da_currentGraphPanel" 
-i "da_simplifyCurve.png";
}

menuItem
-d 1;

menuItem
-l "Play Max Real-time"
-c "da_maxPlaybackSpeedToggle"
-cb (`playbackOptions -q -maxPlaybackSpeed`);

menuItem
-l "Stepped Tangent"
-c "da_ToggleKeyTangent"
-cb ($myKeyTangent[0] == "step");

menuItem
-d 1;

menuItem
-l "Select Curve" 
-c "selectType -animCurve (!`selectType -q -animCurve`)" 
-cb (`selectType -q -animCurve`);

menuItem
-l "Pre-Select Highlight" 
-c "animCurveEditor -e -psh (!`animCurveEditor -q -psh $da_currentGraphPanel`) $da_currentGraphPanel" 
-cb (`animCurveEditor -q -psh $da_currentGraphPanel`);

menuItem
-d 1;

menuItem
-l "Auto Frame" 
-c "animCurveEditor -e -af (!`animCurveEditor -q -af $da_currentGraphPanel`) $da_currentGraphPanel; optionVar -intValue graphEditorAutoFit (!`animCurveEditor -q -af $da_currentGraphPanel`)" 
-cb (`animCurveEditor -q -af $da_currentGraphPanel`);

if (`about -api` >= 20180300){
menuItem
-l "Auto Frame Time" 
-c "animCurveEditor -e -aft (!`animCurveEditor -q -aft $da_currentGraphPanel`) $da_currentGraphPanel; optionVar -intValue graphEditorAutoFitTime (!`animCurveEditor -q -aft $da_currentGraphPanel`)" 
-cb (`animCurveEditor -q -aft $da_currentGraphPanel`)
-en (`animCurveEditor -q -af $da_currentGraphPanel`);
}

if (`about -api` >= 20200400){
menuItem
-d 1;

menuItem
-l "Snap Time to Selection" 
-c "optionVar -intValue snapTimeToSelection (!`optionVar -query snapTimeToSelection`)" 
-cb (`optionVar -query snapTimeToSelection`);
}

setParent -m ..;

} 
// Define Hair marking menu
global proc Hair_MM_May9(){

menuItem
-l "Scale Hair" 
-c "scaleHairCtx;" 
-rp "NW" 
-i "hairScaleTool.png";

menuItem
-l "Paint Hair Follicle..." 
-c "paintHairTool 1;" 
-rp "W" 
-i "hairPaint.png" ;

menuItem
-l "Set Start Position" 
-c "setSelectedHairCurves \"current\" \"start\";" 
-rp "N" 
-i "hairStartFromCurrent.png";

menuItem
-l "Set Rest Position" 
-c "setSelectedHairCurves \"current\" \"rest\";" 
-rp "S" 
-i "hairRestFromCurrent.png";

menuItem
-l "PaintFX To Curve" 
-c "PaintEffectsToCurve;" 
-rp "E" 
-i "paintFXtoCurve.png";

menuItem
-l "Add aiStandardHair" 
-c "da_AiStandardHairToPfxHair" 
-rp "NE" 
-i "hairConvertHairSystem.png";

menuItem
-l "Simulation Method" 
-sm 1;

menuItem
-l "Static" 
-c "da_HairStatic" 
-rp "N";

menuItem
-l "Passive" 
-c "da_HairPassive";

menuItem
-l "Dynamic" 
-c "da_HairDynamic";

setParent -m ..;

menuItem
-l "Point Lock" 
-sm 1;

menuItem
-l "No Attach" 
-c "da_HairNoLock";

menuItem
-l "Base" 
-c "da_HairLockBase";

menuItem
-l "Tip" 
-c "da_nHairLockTip";

menuItem
-l "Both Ends" 
-c "da_HairLockBothEnds";

setParent -m ..;

menuItem
-l "Self Collide" 
-sm 1;

menuItem
-l "On" 
-c "da_nHairSelfCollideOn" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_nHairSelfCollideOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Collide" 
-sm 1;

menuItem
-l "On" 
-c "da_nHairCollideOn" 
-rp "N" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_nHairColllideOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Braid" 
-sm 1;

menuItem
-l "On" 
-c "da_FollicleBraid" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_FollicleNoBraid" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Mesh" 
-sm 1;

menuItem
-l "On" 
-c "da_HairMeshOn" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_HairMeshOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

setParent -m ..;

menuItem
-d 1
-dl "separator";

menuItem
-l "Cache"
-sm 1
-i "nClothCacheCreate.png";

menuItem
-l "Create nCache..."
-c "nClothCacheOpt"
-i "nClothCacheCreate.png";

menuItem
-l "Delete nCache"
-c "deleteNclothCache"
-i "nClothCacheDelete.png";

menuItem
-l "Append to Cache"
-c "cacheAppend"
-i "nClothCacheAppend.png";

menuItem
-l "Attach Cache..."
-c "attachCache"
-i "nClothCacheExisting.png";

setParent -m ..;

} 
// Define Handle marking menu
global proc Handle_MM_May9(){
string $mySel[] = `ls -sl`;
string $myQueryArrayNodeType[] = `da_QueryArrayNodeType`;

select $mySel;

if (stringArrayContains("dragField", $myQueryArrayNodeType) || stringArrayContains("gravityField", $myQueryArrayNodeType) || stringArrayContains("newtonField", $myQueryArrayNodeType) || stringArrayContains("radialField", $myQueryArrayNodeType) || stringArrayContains("turbulenceField", $myQueryArrayNodeType) || stringArrayContains("uniformField", $myQueryArrayNodeType) || stringArrayContains("vortexField", $myQueryArrayNodeType)){
Field_MM_May9;
}else{
switch ($myQueryArrayNodeType[0]){
case "joint": Joint_MM_May9; break;
case "locator": Locator_MM_May9; break;
case "nurbsCurve": Curves_MM_May9; break;
case "fluidEmitter": FluidEmitter_MM_May9; break;
default: Constraints_MM_May9; break;
}
}

} 
// Define HyperGraph marking menu
global proc HyperGraph_MM_May9(){
global string $da_underPointerPanel;
$da_underPointerPanel = `getPanel -underPointer`;

string $mySel[] = `ls -sl`;
string $myNodeType[] = `da_QueryArrayNodeType`;
select $mySel;

if($myNodeType[0] == "character"){

menuItem
-l "Edit Character..."
-rp "N" 
-c "characterEditor( true )"
-i "HIKcreateControlRig.png";
}else{
menuItem
-l "Select Time Node" 
-c "select time1" 
-rp "N" 
-i "time.svg";

menuItem
-l "Create Node..." 
-c "createNodeWindow" 
-rp "SE" 
-i "createNode.png";

menuItem
-l "Delete Unused Nodes" 
-c "hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"deleteUnusedNodes\");" 
-rp "S" 
-i "deleteActive.png";

menuItem
-l "Select All Nodes" 
-c "select `listHistory -ac`" 
-rp "W" 
-i "createBinFromSelectedNodes.png";

menuItem
-l "Duplicate Network" 
-c "hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"duplicateShadingNetwork\");" 
-rp "NE" 
-i "duplicateReference.png";

menuItem
-l "Import Network..." 
-c "hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"import\");" 
-rp "NW" 
-i "greasePencilImport.png";

menuItem
-l "Export Network..." 
-c "hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"exportSelectedNetwork\");" 
-rp "SW" 
-i "greasePencilExport.png";

menuItem
-l "Display as" 
-sm 1
-rp "E" 
-i "hypergraph.png";

menuItem
-l "Hierarchy" 
-c "da_HgHierachy" 
-rp "E" 
-i "showDag.png";

menuItem
-l "Connections" 
-c "da_HgConnections" 
-rp "SE" 
-i "showDepend.png";

setParent -m ..;

menuItem
-l "Connection Manager..."
-c "da_ConnectAttributesUI"
-i "da_OneToMany.png";

menuItem
-l "Connection Editor..."
-c "ConnectionEditor"
-i "out_list.png";

menuItem
-l "Expression Editor..." 
-c "ExpressionEditor" 
-i "out_expression.png";

menuItem
-d 1;

if (`pluginInfo -q -l bifrostGraph` == 1){
menuItem 
-l "Bifrost Graph"
-sm 1
-i "out_bifrostBoard.png";

menuItem 
-l "Create Graph"
-c "createNode bifrostBoard; rename bifrostGraph1; showDGLevel ($da_underPointerPanel + \"HyperGraphEd\")"
-i "out_bifrostBoard.png";

menuItem 
-l "Create bifShape"
-c "createNode bifShape; showDGLevel ($da_underPointerPanel + \"HyperGraphEd\")"
-i "out_mesh.png";

setParent -m ..;
}

menuItem
-l "Create Common Nodes" 
-sm 1
-i "nodeGrapherAddNodes.png";

menuItem
-l "vectorProduct" 
-c "createNode vectorProduct;" 
-i "render_vectorProduct.png";

if (`about -api` >= 20200000){
menuItem
-l "blendMatrix" 
-c "createNode blendMatrix;" 
-i "nodeGridDisplay.png";

menuItem
-l "pickMatrix" 
-c "createNode pickMatrix;" 
-i "pickPointComp.png";
}

menuItem
-l "decomposeMatrix" 
-c "createNode decomposeMatrix;" 
-i "out_decomposeMatrix.png";

menuItem
-l "multiplyDivide" 
-c "createNode multiplyDivide;" 
-i "render_multiplyDivide.png";

menuItem
-l "plusMinusAverage" 
-c "createNode plusMinusAverage" 
-i "out_plusMinusAverage.png";

menuItem
-l "reverse" 
-c "createNode reverse" 
-i "out_reverse.png";

menuItem
-l "chooser" 
-c "createNode chooser" 
-i "render_chooser.png";

menuItem
-l "blendColors" 
-c "createNode blendColors" 
-i "out_blendColors.png";

menuItem
-l "blendTwoAttr" 
-c "createNode blendTwoAttr" 
-i "render_blendTwoAttr.png";

menuItem
-l "condition" 
-c "createNode condition" 
-i "out_condition.png" ;

menuItem
-l "choice" 
-c "createNode choice" 
-i "render_choice.png";

menuItem
-l "combinationShape" 
-c "createNode combinationShape" 
-i "swapBlendShape.png";

menuItem
-d 1;

menuItem
-l "instancer" 
-c "createNode instancer" 
-i "out_instancer.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Duplicate Window"
-c "tearOffCopyItemCmd scriptedPanel $da_underPointerPanel"
-i "UVTkDuplicateSet.png";

setParent -m ..;

}
} 
// Define Hypergraph Container marking menu
global proc Hypergraph_Container_MM_May9(){

menuItem
-l "Toggle Status" 
-c "da_ToggleContainer" 
-rp "N" 
-i "showBatchRender.png";

menuItem
-l "Asset Editor..." 
-c "AssetEditor" 
-rp "E" 
-i "out_container.png";

menuItem
-l "Remove" 
-c "unpackAndRemoveContainer(`ls -sl -containers`)" 
-rp "S" 
-i "removeContainer.png";

setParent -m ..;

}
// Define HyperShade marking menu
global proc HyperShade_MM_May9(){

menuItem
-l "Delete Unused Nodes" 
-c "hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"deleteUnusedNodes\");" 
-rp "S" 
-i "deleteActive.png";

menuItem
-l "Select Object With Material" 
-c "da_SelectObjectMaterial" 
-rp "N" 
-i "aselect.png";

menuItem
-l "Hypergraph" 
-sm 1
-rp "E" 
-i "hypergraph.png";

menuItem
-l "Hierarchy..." 
-c "HypergraphHierarchyWindow" 
-rp "E" 
-i "showDag.png";

menuItem
-l "Connections..." 
-c "HypergraphDGWindow" 
-rp "SE" 
-i "showDepend.png";

setParent -m ..;

menuItem
-l "Create Node..." 
-c "createNodeWindow" 
-rp "SE" 
-i "createNode.png";

menuItem
-l "Duplicate Network" 
-c "hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"duplicateShadingNetwork\");" 
-rp "NE" 
-i "duplicateReference.png";

menuItem
-l "Import Network..." 
-c "hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"import\");" 
-rp "NW" 
-i "greasePencilImport.png";

menuItem
-l "Select All Nodes" 
-c "select `listHistory -ac`" 
-rp "W" 
-i "createBinFromSelectedNodes.png";

menuItem
-l "Export Network..." 
-c "hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"exportSelectedNetwork\");" 
-rp "SW" 
-i "greasePencilExport.png";

menuItem
-l "Texture Link..." 
-c "TextureCentricUVLinkingEditor" 
-i "textureEditor.png";

menuItem
-l "TX Manager..." 
-c "da_TxManager" 
-i "TXManagerShelf.png";

menuItem
-l "Connection Manager..."
-c "da_ConnectAttributesUI"
-i "da_OneToMany.png";

menuItem
-l "Connection Editor..."
-c "ConnectionEditor"
-i "out_list.png";

menuItem
-l "Expression Editor..." 
-c "ExpressionEditor" 
-i "out_expression.png";

menuItem
-d 1;

menuItem
-l "Create 2D Texture Node" 
-c "createRenderNodeCB -as2DTexture \"\" file \"\"" 
-i "file.svg";

menuItem
-l "Create Ramp Node" 
-c "createRenderNodeCB -as2DTexture \"\" ramp \"\"" 
-i "out_ramp.png";

if (`pluginInfo -q -l mtoa` == 1){
menuItem
-l "Create User Data Color" 
-c "createNode aiUserDataColor" 
-i "MtoA_Logo.png";
}

if (`pluginInfo -q -l substancemaya` == 1){
menuItem
-l "Create Substance Node" 
-c "createRenderNodeCB -as2DTexture \"\" substanceNode \"\"" 
-i "Substance_Source.png";
}

menuItem
-d 1;

menuItem
-l "Connect Place2d Node" 
-c "da_ConnectPlace2dToFile" 
-i "out_place2dTexture.png";

menuItem
-l "Show All Nodes" 
-c "filterUIClearFilter hyperShadePrimaryNodeEditor" 
-i "selectUnsortedNodes.png";

setParent -m ..;

} 
// Define IK marking menu
global proc IK_MM_May9(){

menuItem
-l "Create Locator" 
-c "CreateLocator;" 
-rp "N" 
-i "locator.png";

menuItem
-l "Create Circle" 
-c "CreateNURBSCircle;" 
-rp "S" 
-i "circle.png";

menuItem
-c "CreateNURBSCircleOptions;" 
-ob 1;

menuItem
-l "Set Preferred Angle" 
-c "da_SetIKPerfAngle" 
-rp "W";

menuItem
-l "Assume Preferred Angle" 
-c "da_AssumeIKPrefAngle" 
-rp "E";

menuItem
-l "IK Handle Size..." 
-i "resizeWindow.png" 
-c "ikHdsWin";

setParent -m ..;

} 
// Define Instancer marking menu
global proc Instancer_MM_May9(){

menuItem
-l "Bake to objects" 
-c "MASHBakeGUI;" 
-rp "N" 
-i "instanceToObject.png";

setParent -m ..;

} 
// Define JointPoly marking menu
global proc JointPoly_MM_May9(){
string $mySel[] = `ls -sl`;
string $myQueryArrayNodeType[] = `da_QueryArrayNodeType`;

select $mySel;

if (stringArrayContains("dragField", $myQueryArrayNodeType) || stringArrayContains("gravityField", $myQueryArrayNodeType) || stringArrayContains("newtonField", $myQueryArrayNodeType) || stringArrayContains("radialField", $myQueryArrayNodeType) || stringArrayContains("turbulenceField", $myQueryArrayNodeType) || stringArrayContains("uniformField", $myQueryArrayNodeType) || stringArrayContains("vortexField", $myQueryArrayNodeType)){
Field_MM_May9;
}else{

switch ($myQueryArrayNodeType[0]){
case "mesh": Poly_MM_May9; break;
default: PolyJoint_MM_May9; break;
}
}

} 
// Define Joint marking menu
global proc Joint_MM_May9(){
string $myCurCurve[] = `filterExpand -sm 9`;

menuItem
-l "Go To Bind Pose" 
-c "GoToBindPose;" 
-rp "NE" 
-i "goToBindPose.png";

menuItem
-l "Mirror Joint" 
-c "mirrorJoint" 
-rp "S" 
-i "kinMirrorJoint_S.png";

menuItem
-c "MirrorJointOptions" 
-ob 1;

menuItem
-l "IK Spline on Hierarchy" 
-c "da_ikSplineAutoHierarchy" 
-rp "W" 
-i "out_ikSplineSolver.png";

menuItem
-l "IK on Hierarchy" 
-c "da_ikHierarchy" 
-rp "NW" 
-i "out_ikHandleGadget.png";

if (size($myCurCurve) == 1){
menuItem
-l "IK Spline on Curve" 
-c "da_ikSplineHierarchy" 
-rp "SW" 
-i "fitBSpline.png";
}else{
menuItem
-l "IK Handle" 
-c "IKHandleTool" 
-rp "SW" 
-i "kinHandle.png";
}


menuItem
-l "Remove Joints" 
-c "RemoveJoint" 
-rp "SE" 
-i "kinRemove.png";

menuItem
-l "Select Hierarchy" 
-c "SelectHierarchy" 
-rp "N" 
-i "selectByHierarchy.png";

menuItem
-l "Insert Joints" 
-c "InsertJointTool" 
-rp "E" 
-i "kinInsert.png";

menuItem
-l "Show Local Axes" 
-sm 1;

menuItem
-l "On" 
-c "da_ShowLocalAxis" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_HideLocalAxis" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Display As" 
-sm 1;

menuItem
-l "Bone" 
-c "da_JointsAsBone" 
-i "out_joint.png";

menuItem
-l "None" 
-c "da_JointsAsNone" 
-i "RS_disable.png";

setParent -m ..;
if (`about -api` >= 20190000){
Sup_JointLabel_MM_May9;
}

menuItem
-d 1;

menuItem
-l "Select Reversed Hierarchy" 
-c "da_HierarchyReversed" 
-i "frameHierarchy.png";

menuItem
-l "Add FK Controls" 
-c "da_AutoFkCTRL" 
-i "circle.png";

menuItem
-d 1;

menuItem
-l "Joint Orientation..." 
-c "OrientJointOptions" 
-i "orientJoint.png";

menuItem
-l "IK Spline Handle..." 
-c "IKSplineHandleToolOptions" 
-i "kinSplineHandle.png";

menuItem
-l "IK on Selected Joints..." 
-c "da_IkOnJoint" 
-i "out_ikRPsolver.png";

menuItem
-d 1;

menuItem
-l "Select Weighted Vertices" 
-c "da_SelectVertexJoint" 
-i "uvIsolateSelectReset.png";

menuItem
-l "Move Skinned Joints" 
-c "MoveSkinJointsTool" 
-i "moveSkinnedJoint.png";

menuItem
-l "Expose Joint Orient" 
-c "da_ExposeJointOrient" 
-i "showLineNumbers.png";

menuItem
-d 1;

menuItem
-l "Convert to Bone..." 
-c "cMuscle_makeMuscle(0)" 
-i "cMuscle_muscle_convertToMuscle.png";

menuItem
-l "Muscle Builder..." 
-c "cMuscleBuilder" 
-i "cMuscle_muscle_muscleBuilder.png";

menuItem
-l "Connect Selected Muscle" 
-c "cMuscle_connectToSystem()" 
-i "cMuscle_skin_connMus.png";

menuItem
-l "Muscle Smart Collide" 
-c "cMuscleSmartCollide_setup()" 
-i "cMuscle_smart_create.png";

menuItem
-d 1;

menuItem
-l "Joint Size..." 
-c "jdsWin" 
-i "resizeWindow.png";

setParent -m ..;

} 
// Define LatticePoint marking menu
global proc LatticePoint_MM_May9(){

Sup_Symmetry_MM_May9;

Sup_SoftSelect_MM_May9;

menuItem
-l "Lattice..." 
-c "CreateLatticeOptions" 
-rp "NE" 
-i "lattice.png";

if (!`optionVar -q deformationUseComponentTags`){
menuItem
-l "Deformer Set Editor..."
-c "DeformerSetEditor"
-rp "NW" 
-i "da_deformerSetEditor.png";
}

menuItem
-l "Edit Membership Tool" 
-c "da_EditMembershipTool" 
-rp "W" 
-i "setEdit.png";

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_RiggedCluster" 
-rp "E" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_RiggedClusterUI" 
-rp "E" 
-i "cluster.png";
}

menuItem
-l "Bend" 
-c "Bend" 
-i "bendNLD.png";

menuItem
-l "Flare" 
-c "Flare" 
-i "flareNLD.png";

menuItem
-l "Sine" 
-c "Sine" 
-i "sineNLD.png";

menuItem
-l "Squash" 
-c "Squash" 
-i "squashNLD.png";

menuItem
-l "Twist" 
-c "Twist" 
-i "twistNLD.png";

menuItem
-l "Wave" 
-c "Wave" 
-i "waveNLD.png";

setParent -m ..;

} 
// Define Lattice marking menu
global proc Lattice_MM_May9(){

menuItem
-l "Lattice..." 
-c "CreateLatticeOptions" 
-rp "NE" 
-i "lattice.png";

menuItem
-l "Reset" 
-c "ResetLattice" 
-rp "SE" 
-i "resetLattice.png";

menuItem
-l "Edit Membership Tool" 
-c "da_EditMembershipTool" 
-rp "W" 
-i "setEdit.png";

if (!`optionVar -q deformationUseComponentTags`){
menuItem
-l "Deformer Set Editor..."
-c "DeformerSetEditor"
-rp "NW" 
-i "da_deformerSetEditor.png";
}

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_RiggedCluster" 
-rp "E" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_RiggedClusterUI" 
-rp "E" 
-i "cluster.png";
}

menuItem
-l "Bend" 
-c "Bend" 
-i "bendNLD.png";

menuItem
-l "Flare" 
-c "Flare" 
-i "flareNLD.png";

menuItem
-l "Sine" 
-c "Sine" 
-i "sineNLD.png";

menuItem
-l "Squash" 
-c "Squash" 
-i "squashNLD.png";

menuItem
-l "Twist" 
-c "Twist" 
-i "twistNLD.png";

menuItem
-l "Wave" 
-c "Wave" 
-i "waveNLD.png";

menuItem
-l "Create nSoft Body" 
-c "CreateNSoftBodyOptions" 
-rp "N" 
-i "soft.png";

setParent -m ..;

} 
// Define Legacy_ParticlePoints marking menu
global proc Legacy_ParticlePoints_MM_May9(){

int $particleCountCheck = `optionVar -q particleCountVisibility`;

menuItem
-l "Lattice..." 
-c "CreateLatticeOptions" 
-rp "NE" 
-i "lattice.png";

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_RiggedCluster" 
-rp "E" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_RiggedClusterUI" 
-rp "E" 
-i "cluster.png";
}

menuItem
-l "Deformers"
-sm 1
-i "bendNLD.png";

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "HUD Info" 
-c "ToggleParticleCount" 
-cb (1 == $particleCountCheck);

setParent -m ..;

} 
// Define Legacy_Particle marking menu
global proc Legacy_Particle_MM_May9(){

int $particleCountCheck = `optionVar -q particleCountVisibility`;

menuItem
-l "Use as Fluid Emitter..." 
-c "EmitFluidFromObjectOptions" 
-rp "NW" 
-i "fluidObjectEmit.png";

menuItem
-l "Lattice..." 
-c "CreateLatticeOptions" 
-rp "NE" 
-i "lattice.png";

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_RiggedCluster" 
-rp "E" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_RiggedClusterUI" 
-rp "E" 
-i "cluster.png";
}

menuItem
-l "Set Initial State" 
-c "setDynStartState" 
-rp "N" 
-i "fluidInitialStateSet.png";

menuItem
-l "Make Collide" 
-c "dynExecuteCollisionCommand \"collision -r 1 -f 0 -o 0.01 \"" 
-rp "W" 
-i "collision.png";

menuItem
-c "MakeCollideOptions" 
-ob 1;

menuItem
-l "Create Springs" 
-c "spring -noDuplicate false -minMax true -mnd 0 -mxd 0 -useRestLengthPS true -s 1 -d 0.2 -sfw 1 -efw 1 " 
-rp "SE" 
-i "out_spring.png";

menuItem
-c "CreateSpringOptions" 
-ob 1;

if (`about -api` >= 20190000){
menuItem
-l "Sprite Wizard..." 
-c "PartSpriteWizard" 
-i "menuIconParticles.png";
}else{
menuItem
-l "Sprite Wizard..." 
-c "spriteWizardMenu" 
-i "menuIconParticles.png";
}

menuItem
-l "Collision Event..." 
-c "ParticleCollisionEvents" 
-i "collisionEvents.png";

menuItem
-l "Instancer..." 
-c "ParticleInstancerOptions" 
-i "instancer.png";

menuItem
-d 1;

menuItem
-l "Die on Volume Exit" 
-sm 1;

menuItem
-l "On" 
-c "da_nParticleNoLiveOutsideEmitter" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_nParticleLiveOutsideEmitter" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Deformers"
-sm 1
-i "bendNLD.png";

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

setParent -m ..;

menuItem
-l "Fields" 
-sm 1
-i "posRadial.png";

menuItem
-l "Air" 
-c "dynExecuteFieldCommands 1 \"air -pos 0 0 0 -m 4 -att 1 -dx 0 -dy 1 -dz 0 -s 5 -iv 1 -iro 1 -vco 0 -es 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posAir.png";

menuItem
-l "Drag" 
-c "dynExecuteFieldCommands 1 \"drag -pos 0 0 0 -m 0.05 -att 1 -dx 0 -dy 0 -dz 0 -ud 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posDrag.png";

menuItem
-l "Gravity" 
-c "dynExecuteFieldCommands 1 \"gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5\"" 
-i "posGravity.png";

menuItem
-l "Newton" 
-c "dynExecuteFieldCommands 1 \"newton -pos 0 0 0 -m 5 -att 1 -mnd 0.2  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posNewton.png";

menuItem
-l "Radial" 
-c "dynExecuteFieldCommands 1 \"radial -pos 0 0 0 -m 5 -att 1 -typ 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posRadial.png";

menuItem
-l "Turbulence" 
-c "dynExecuteFieldCommands 1 \"turbulence -pos 0 0 0 -m 5 -att 1 -f 1 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posTurbulence.png";

menuItem
-l "Uniform" 
-c "dynExecuteFieldCommands 1 \"uniform -pos 0 0 0 -m 5 -att 1 -dx 1 -dy 0 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posUniform.png";

menuItem
-l "Vortex" 
-c "dynExecuteFieldCommands 1 \"vortex -pos 0 0 0 -m 5 -att 1 -ax 0 -ay 1 -az 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVortex.png";

menuItem
-l "Volume Axis" 
-c "dynExecuteFieldCommands 1 \"volumeAxis -pos 0 0 0 -m 5 -att 0 -ia 0 -afc 1 -afx 1 -arx 0 -alx 0 -drs 0 -dx 1 -dy 0 -dz 0 -trb 0 -trs 0.2 -tfx 1 -tfy 1 -tfz 1 -tox 0 -toy 0 -toz 0 -dtr 0  -mxd -1  -vsh cube -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVolumeAxis.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "HUD Info" 
-c "ToggleParticleCount" 
-cb (1 == $particleCountCheck);

setParent -m ..;

} 
// Define Legacy_SubdivComponents marking menu
global proc Legacy_SubdivComponents_MM_May9(){

menuItem
-l "Refine selected" 
-c "subdivCreateRegion" 
-rp "S" 
-i "subdivMatchToplogy.png";

menuItem
-l "Uncrease Crease" 
-c "UncreaseSubdivSurface" 
-rp "NW" 
-i "subdivUncrease.png";

menuItem
-l "Partial Crease" 
-c "PartialCreaseSubdivSurface" 
-rp "N" 
-i "subdivPartialCrease.png";

menuItem
-l "Full Crease" 
-c "FullCreaseSubdivSurface" 
-rp "NE" 
-i "subdivCrease.png";

menuItem
-l "Display Finer" 
-c "string $mySel[] = `ls -sl -o`;\nsetSubdivDisplayLevelAndFilter $mySel \"+1\" 0;" 
-rp "E" 
-i "subdivRefineRegion.png";

menuItem
-l "Display Coarser" 
-c "string $mySel[] = `ls -sl -o`;\nsetSubdivDisplayLevelAndFilter $mySel \"-1\" 0;" 
-rp "W" 
-i "subdivSelectCoarser.png";

$item = "";

$menuAssign = `menuItem -l (uiRes("m_buildShaderMenus.kAssignExistingMaterial")) -sm true -i "out_shaderList.png"`;
menuItem 
-edit 
-postMenuCommand ("buildAssignShaderMenu " + $menuAssign + " \""+$item+"\"") $menuAssign;
setParent -menu ..;

menuItem
-l "Assign New Material..." 
-c "createAssignNewMaterialTreeLister \"\";" 
-i "render_adskMaterial.png";

setParent -m ..;

} 
// Define Legacy_Subdiv marking menu
global proc Legacy_Subdiv_MM_May9(){

menuItem
-l "Sculpt..." 
-c "SculptGeometryToolOptions" 
-rp "N" 
-i "Sculpt.png";

menuItem
-l "Paint..." 
-c "Art3dPaintToolOptions" 
-rp "NE" 
-i "art3dPaint.png";

menuItem
-l "Paint Select..." 
-c "ArtPaintSelectToolOptions" 
-rp "NW" 
-i "artPaintSelect.png";

menuItem
-l "Clean Topology" 
-c "subdCleanTopology" 
-rp "S" 
-i "subdivCleanToplogy.png";

menuItem
-l "Bevel" 
-c "da_LegacySubdivPolyMode;\nBevelPolygon;" 
-rp "E" 
-i "polyBevel.png";

menuItem
-l "Multi Cut" 
-c "da_LegacySubdivPolyMode;\ndR_multiCutTool" 
-rp "W" 
-i "multiCut_NEX32.png";

menuItem
-l "Mirror Geometry" 
-c "da_LegacySubdivPolyMode;\nMirrorPolygonGeometry;" 
-i "polyMirrorGeometry.png";

menuItem
-d 1;

$item = "";

$menuAssign = `menuItem -l (uiRes("m_buildShaderMenus.kAssignExistingMaterial")) -sm true -i "out_shaderList.png"`;
menuItem 
-edit 
-postMenuCommand ("buildAssignShaderMenu " + $menuAssign + " \""+$item+"\"") $menuAssign;
setParent -menu ..;

menuItem
-l "Assign New Material..." 
-c "createAssignNewMaterialTreeLister \"\";" 
-i "render_adskMaterial.png";

menuItem
-d 1;

menuItem
-l "Convert to NURBS" 
-c "doSubdivToNurbs( {\"1\",\"1\",\"0\"} );\nhyperShade -assign initialShadingGroup;" 
-i "subdivToNurbs.png";

menuItem
-c "SubdivToNURBSOptions;" 
-ob 1;

menuItem
-l "Convert to Poly" 
-c "TesselateSubdivSurface" 
-i "subdivTessellate.png";

menuItem
-c "TesselateSubdivSurfaceOptions" 
-ob 1;

setParent -m ..;

} 
// Define Light marking menu
global proc Light_MM_May9(){

int $lightCheck = `renderManip -q -st`;

menuItem
-l "Light Linking..." 
-c "LightCentricLightLinkingEditor;" 
-rp "W" 
-i "out_defaultLightList.png";

menuItem
-l "Light Manipulators" 
-c "da_ToggleLightManipulators" 
-rp "E" 
-cb (1 == $lightCheck);

menuItem
-l "Look Through" 
-c "da_LookThruSelected" 
-rp "N" 
-i "snapshot.svg";

menuItem
-l "Persp View" 
-c "dR_DoCmd(\"viewPersp\");" 
-rp "S" 
-i "singlePerspLayout.png";

menuItem
-l "Light Editor..." 
-c "da_LightList" 
-rp "NW" 
-i "light_manager.png";

menuItem
-l "Edit Light..." 
-c "AttributeEditor" 
-rp "SW" 
-i "attributes.png";

setParent -m ..;

} 
// Define LineModifier marking menu
global proc LineModifier_MM_May9(){

menuItem
-l "Occupy Volume On" 
-c "da_ModifierOccupyVolume" 
-rp "E";

menuItem
-l "Occupy Volume Off" 
-c "da_ModifierNoOccupyVolume" 
-rp "W";

setParent -m ..;

} 
// Define LocatorVertex marking menu
global proc LocatorVertex_MM_May9(){

menuItem
-l "Transform nConstraint" 
-c "performCreateDynamicConstraint 0 \"transform\";" 
-rp "N" 
-i "nConstraintTransform.png";

setParent -m ..;

} 
// Define Locator marking menu
global proc Locator_MM_May9(){
string $myCurTransform[] = `ls -sl -typ "transform"`;

if (size($myCurTransform) >= 2){
menuItem
-l "Controller Orient" 
-c "da_CtrlOrientConstraint" 
-rp "NW" 
-i "orientConstraint.png";

menuItem
-l "Controller Point" 
-c "da_CtrlPointConstraint" 
-rp "NE" 
-i "posConstraint.png";

menuItem
-l "Controller Aim" 
-c "da_CtrlAimConstraint" 
-rp "SW" 
-i "aimConstraint.png";

menuItem
-l "Controller Parent" 
-c "da_CtrlParentConstraint" 
-rp "N" 
-i "parentConstraint.png";

menuItem
-l "Controller Pole Vector" 
-c "da_CtrlPoleVectorConstraint" 
-rp "SE" 
-i "poleVectorConstraint.png";
}

menuItem
-l "Add Distance" 
-c "da_LocatorDistance" 
-rp "S" 
-i "out_distanceBetween.png";

menuItem
-l "Increase Size" 
-c "da_IncreaseLocatorSize" 
-rp "E" 
-i "moveUVUp.png";

menuItem
-l "Decrease Size" 
-c "da_DecreaseLocatorSize" 
-rp "W" 
-i "moveUVDown.png";

menuItem
-l "Shape Visibility" 
-sm 1;

menuItem
-l "On" 
-c "da_LocatorVisibility" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_LocatorNoVisibility" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

setParent -m ..;

} 
// Define MASH_Bullet marking menu
global proc MASH_Bullet_MM_May9(){

menuItem
-l "MASH Editor..." 
-c "MASHOutliner;" 
-rp "N" 
-i "MASH_Editor.png";

menuItem
-ob 1;

menuItem
-l "Gravity" 
-sm 1;

menuItem
-l "On" 
-c "da_MashBulletGravity" 
-rp "N" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_MashBulletNoGravity" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Use Ground" 
-sm 1;

menuItem
-l "On" 
-c "da_MashBulletGround" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_MashBulletNoGround" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

setParent -m ..;

} 
// Define MASH marking menu
global proc MASH_MM_May9(){

menuItem
-l "MASH Editor..." 
-c "MASHOutliner" 
-rp "N" 
-i "MASH_Editor.png";

menuItem
-l "Cache MASH" 
-c "MASHcacheRedirection" 
-rp "S" 
-i "MASH_CacheNetwork.png";

menuItem
-l "Switch MASH Geometry Type" 
-c "SwitchMashGeometryType" 
-rp "E" 
-i "MASH_SwitchGeometryType.png";

setParent -m ..;

} 
// Define MASH_Particle marking menu
global proc MASH_Particle_MM_May9(){

menuItem
-l "Connect nParticles" 
-c "da_MashParticle" 
-rp "N" 
-i "out_particleShape.png";

setParent -m ..;

} 
// Define MayaWindow marking menu
global proc MayaWindow_MM_May9(){

string $panel = `getPanel -wf`;

menuItem
-l "Visibility" 
-subMenu 1
-rp "NE" 
-i "RS_visible.png";

menuItem
-l "Curves" 
-c "da_ToggleNurbsCurvesVis" 
-cb (`modelEditor -q -nurbsCurves $panel`)
-rp "NE";

menuItem
-l "Polygons" 
-c "da_TogglePolyVis" 
-cb (`modelEditor -q -polymeshes $panel`)
-rp "N";

menuItem
-l "Light" 
-c "da_ToggleLightVis" 
-cb (`modelEditor -q -lights $panel`)
-rp "NW";

menuItem
-l "Joint" 
-c "da_ToggleJointVis" 
-cb (`modelEditor -q -joints $panel`)
-rp "SE";

menuItem
-l "IK Handle" 
-c "da_ToggleIkVis" 
-cb (`modelEditor -q -ikHandles $panel`)
-rp "S";

menuItem
-l "Locator" 
-c "da_ToggleLocVis" 
-cb (`modelEditor -q -locators $panel`);

if (`about -api` >= 20180000){
menuItem
-l "Controllers" 
-c "da_ToggleControllersVis" 
-cb (`modelEditor -q -controllers $panel`);
}

menuItem
-l "Deformers" 
-c "da_ToggleDefVis" 
-cb (`modelEditor -q -deformers $panel`)
-rp "W";

menuItem
-l "Nurbs" 
-c "da_ToggleNurbsVis" 
-cb (`modelEditor -q -nurbsSurfaces $panel`)
-rp "E";

setParent -m ..;

menuItem
-l "UI Elements" 
-subMenu 1
-rp "NW" 
-i "out_displayLayer.png";

menuItem
-l "Shelf" 
-c "ToggleShelf" 
-rp "SW" 
-cb (`workspaceControl -q -vis Shelf`);

menuItem
-l "Shelf Tabs" 
-c "toggleShelfTabs" 
-rp "W" 
-cb (`optionVar -q shelfTabsVisible`);

menuItem
-l "Menu Bars" 
-c "TogglePanelMenubar" 
-rp "NE" 
-cb (`optionVar -q allowMenusInPanels`);

menuItem
-l "Icon Bars" 
-c "ToggleModelEditorBars" 
-rp "NW" 
-cb (false == `optionVar -q collapseIconBarsInPanels`);

menuItem
-l "Main Menu Bars" 
-c "ToggleMainMenubar" 
-rp "E" 
-cb (`optionVar -q mainWindowMenubarVis`);

menuItem
-l "Title Bar" 
-c "da_TitleBarToggle" 
-rp "N" 
-cb (`window -q -titleBar MayaWindow`);

menuItem
-l "Save Workspace..." 
-c "SaveCurrentWorkspace" 
-i "fileSave.png"
-rp "S";

setParent -m ..;

menuItem
-l "Shading" 
-subMenu 1
-rp "SE" 
-i "WireFrameOnShaded.png";

menuItem
-l "Wireframe on Shaded" 
-c "da_ToggleWireOnShade" 
-rp "SE"  
-cb (`modelEditor -q -wos $panel`);

menuItem
-l "Two Sided Lighting" 
-c "da_ToggleTwoSidedLighting" 
-rp "S" 
-cb (`modelEditor -q -tsl $panel`);

menuItem
-l "X-Ray Active Components" 
-c "da_ToggleActiveComponentsXray" 
-rp "E" 
-cb (`modelEditor -q -acx $panel`);

menuItem
-l "X-Ray Joints" 
-c "da_ToggleJointXray" 
-rp "NE" 
-cb (`modelEditor -q -jx $panel`);

setParent -m ..;

menuItem
-l "Viewport" 
-subMenu 1
-rp "SW" 
-i "MultisampleAA.png";

menuItem
-l "Anti-Aliasing" 
-c "da_AntiAliasToggle" 
-rp "SW" 
-cb (`getAttr "hardwareRenderingGlobals.multiSampleEnable"`);

if (`about -api` >= 20180000){
menuItem
-l "Transparent Shadow" 
-c "da_TransparentShadowsToggle" 
-rp "SE" 
-cb (`getAttr "hardwareRenderingGlobals.transparentShadow"`);
}

menuItem
-l "Fog" 
-c "da_ToggleFogging" 
-rp "N" 
-cb (`modelEditor -q -fg $panel`);

menuItem
-l "Motion Blur" 
-c "da_motionBlurEnableToggle" 
-rp "S" 
-cb (`getAttr "hardwareRenderingGlobals.motionBlurEnable"`);

menuItem
-l "Grid" 
-c "ToggleGrid" 
-rp "NW" 
-cb (`optionVar -q showGrid`);

menuItem
-c "GridOptions" 
-ob 1;

menuItem
-l "Ambient Occlusion" 
-c "da_ToggleAO" 
-rp "W" 
-cb (`getAttr "hardwareRenderingGlobals.ssaoEnable"`);

setParent -m ..;

menuItem
-l "Front View" 
-c "dR_DoCmd(\"viewFront\");" 
-rp "S" 
-i "da_z.png";

menuItem
-l "Side View" 
-c "dR_DoCmd(\"viewRight\");" 
-rp "E" 
-i "da_x.png";

menuItem
-l "Perspective View" 
-c "dR_DoCmd(\"viewPersp\");" 
-rp "N" 
-i "singlePerspLayout.png";

menuItem
-l "Top View" 
-c "dR_DoCmd(\"viewTop\");" 
-rp "W" 
-i "da_y.png";

menuItem
-l "Select" 
-sm 1
-i "aselect.png";

menuItem
-l "Polygons" 
-c "string $myTransforms[] = `ls -tr`; select -r `filterExpand -sm 12 $myTransforms`;"
-i "polyCube.png";

menuItem
-l "Curves" 
-c "string $myTransforms[] = `ls -tr`; select -r `filterExpand -sm 9 $myTransforms`;"
-i "circle.png";

menuItem
-l "Nurbs" 
-c "string $myTransforms[] = `ls -tr`; select -r `filterExpand -sm 10 $myTransforms`;"
-i "cube.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Add Image Plane..." 
-c "da_ImagesPlane" 
-i "out_imagePlane.png";

menuItem
-l "Add Movie Plane..." 
-c "da_VideoImagesPlane" 
-i "da_video_plane.png";

setParent -m ..;

} 
// Define MembraneNode marking menu
global proc MembraneNode_MM_May9(){

menuItem
-l "Connect Collider" 
-c "da_MembraneCollider" 
-rp "N" 
-i "da_connection_in.png";

setParent -m ..;

} 
// Define MeshLight marking menu
global proc MeshLight_MM_May9(){

menuItem
-l "Light Editor..." 
-c "da_LightList" 
-rp "NW" 
-i "light_manager.png";

menuItem
-l "Light Linking..." 
-c "LightCentricLightLinkingEditor;" 
-rp "W" 
-i "out_defaultLightList.png";

menuItem
-l "Edit Light..." 
-c "AttributeEditor" 
-rp "SW" 
-i "attributes.png";

menuItem
-l "Temperature" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "Cold" 
-c "da_AiColdLight";

menuItem
-l "Neutral" 
-c "da_AiNeutralLight";

menuItem
-l "Warm" 
-c "da_AiWarmLight";

setParent -m ..;

menuItem
-l "Normalize" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On" 
-c "da_AiLightNormalize" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_AiNoLightNormalize" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem 
-d 1;

menuItem
-l "Samples" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "Low" 
-c "da_AiLowSample";

menuItem
-l "High" 
-c "da_AiHighSample";

setParent -m ..;

menuItem
-l "Visible" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On" 
-c "da_MeshLightVisible" 
-rp "N" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_MeshLightNoVisible" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

setParent -m ..;

} 
// Define MeshMesh marking menu
global proc MeshMesh_MM_May9(){

menuItem
-l "Connect Shapes" 
-c "da_ConnectShapes" 
-rp "N" 
-i "da_OneToMany.png";

menuItem
-l "Component to Component" 
-c "doCreateNConstraint pointToPoint 0" 
-rp "S" 
-i "nConstraintComponent.png";

menuItem
-l "Extrude" 
-c "PolyExtrude" 
-rp "E" 
-i "polyExtrudeFacet.png";

menuItem
-l "Bevel" 
-c "BevelPolygon;" 
-rp "NW" 
-i "polyBevel.png";

menuItem
-l "Multi Cut" 
-c "dR_multiCutTool;" 
-rp "W" 
-i "multiCut_NEX32.png";

menuItem
-l "Delete Edge" 
-c "DeletePolyElements;" 
-rp "SW" 
-i "polyDelEdgeVertex.png";

menuItem
-l "Edit"
-sm 1
-i "polyMesh.png";

menuItem
-l "Transform" 
-c "performPolyMove \"\" 0" 
-i "polyMoveVertex.png";

menuItem
-d 1;

menuItem
-l "Crease Tool" 
-c "PolyCreaseTool" 
-i "polyCrease.png";

menuItem
-c "python \"creaseSetEditor.showCreaseSetEditor()\";" 
-ob 1;

menuItem
-l "Remove Crease"
-c "polyCrease -op 1"
-i "trash.png";

setParent -m ..;

menuItem
-l "Select"
-sm 1
-i "aselect.png";

menuItem
-l "Invert"
-c "InvertSelection" 
-i "out_reverse.png";

menuItem
-l "All"
-c "SelectAll" 
-i "aselect.png";

menuItem
-d 1;

menuItem
-l "Straight Angle"
-c "da_EdgeStraightAngle"
-i "da_sraightAngle.png";

menuItem
-l "Right Angle"
-c "da_EdgeRightAngle"
-i "da_rightAngle.png";

menuItem
-l "Acute Angle"
-c "da_EdgeAcuteAngle"
-i "da_acuteAngle.png";

menuItem
-l "Inside"
-c "da_EdgeInside"
-i "da_insideEdge.png";

menuItem
-l "On Border"
-c "da_EdgeBorder"
-i "da_borderEdge.png";

menuItem
-l "Soft"
-c "da_EdgeSoft"
-i "da_softEdge.png";

menuItem
-l "Hard"
-c "da_EdgeHard"
-i "da_hardEdge.png";

setParent -m ..;

setParent -m ..;

} 
// Define MeshParticle marking menu
global proc MeshParticle_MM_May9(){

menuItem
-l "Instancer" 
-c "ParticleInstancer" 
-rp "NE" 
-i "instancer.png";

menuItem
-c "ParticleInstancerOptions" 
-ob 1;

menuItem
-l "Set Initial State" 
-c "setNClothStartState;" 
-rp "N" 
-i "fluidInitialStateSet.png";

menuItem
-l "Make Collide" 
-c "dynExecuteCollisionCommand \"collision -r 1 -f 0 -o 0.01 \"" 
-rp "W" 
-i "collision.png";

menuItem
-c "MakeCollideOptions" 
-ob 1;

menuItem
-l "Collision Event..." 
-c "ParticleCollisionEvents"
-rp "S"  
-i "collisionEvents.png";

setParent -m ..;

} 
// Define MotionTrial marking menu
global proc MotionTrial_MM_May9(){

menuItem
-l "Pinned"
-c "setAttr \"motionTrail1HandleShape.pinned\" (!`getAttr \"motionTrail1HandleShape.pinned\"`);"
-cb (`getAttr "motionTrail1HandleShape.pinned"`)
-rp "N";

menuItem
-l "Timing Beads Out"
-c "setAttr \"motionTrail1HandleShape.showOutBead\" (!`getAttr \"motionTrail1HandleShape.showOutBead\"`);"
-cb (`getAttr "motionTrail1HandleShape.showOutBead"`)
-rp "NE";

menuItem
-l "Timing Beads In"
-c "setAttr \"motionTrail1HandleShape.showInBead\" (!`getAttr \"motionTrail1HandleShape.showInBead\"`);"
-cb (`getAttr "motionTrail1HandleShape.showInBead"`)
-rp "NW";

menuItem
-l "Modify Keys"
-c "setAttr \"motionTrail1HandleShape.modifyKeys\" (!`getAttr \"motionTrail1HandleShape.modifyKeys\"`);"
-cb (`getAttr "motionTrail1HandleShape.modifyKeys"`)
-rp "W";

menuItem
-l "Show Frame #s"
-c "setAttr \"motionTrail1HandleShape.showFrames\" (!`getAttr \"motionTrail1HandleShape.showFrames\"`);"
-cb (`getAttr "motionTrail1HandleShape.showFrames"`)
-rp "E";

menuItem
-l "Show Out Tangent"
-c "setAttr \"motionTrail1HandleShape.showOutTangent\" (!`getAttr \"motionTrail1HandleShape.showOutTangent\"`);"
-cb (`getAttr "motionTrail1HandleShape.showOutTangent"`)
-rp "SE";

menuItem
-l "Show In Tangent"
-c "setAttr \"motionTrail1HandleShape.showInTangent\" (!`getAttr \"motionTrail1HandleShape.showInTangent\"`);"
-cb (`getAttr "motionTrail1HandleShape.showInTangent"`)
-rp "SW";

menuItem
-l "Motion Trail to Curve"
-c "da_MotionTrailToCurve"
-i "out_nurbsCurve.png"
-rp "S";

setParent -m ..;

} 
// Define Name_shellBase marking menu
global proc Name_shellBase_MM_May9(){

string $polyCheck[] = `filterExpand -ex true -selectionMask 12`;
string $edgeCheck[] = `filterExpand -ex true -selectionMask 32`;

menuItem
-l "Extrude" 
-c "PolyExtrude" 
-rp "E" 
-i "polyExtrudeFacet.png";

menuItem
-l "Multi Cut" 
-c "dR_multiCutTool;" 
-rp "W" 
-i "multiCut_NEX32.png";
if (`size($edgeCheck)` > 1){
menuItem
-l "Fill Hole" 
-c "FillHole" 
-rp "N" 
-i "polyCloseBorder.png";
}
if (`size($polyCheck)` != 0){
menuItem
-l "Sculpt Geometry..." 
-c "ShowMeshSculptToolOptions" 
-rp "N" 
-i "Sculpt.png";
}

menuItem
-l "Smooth" 
-c "SmoothPolygon" 
-rp "S" 
-i "polySmooth.png";

menuItem
-c "SmoothPolygonOptions;" 
-ob 1;

menuItem
-l "Bevel" 
-c "BevelPolygon;" 
-rp "NW" 
-i "polyBevel.png";

menuItem
-l "Select"
-sm 1
-i "aselect.png";

menuItem
-l "Straight Angle"
-c "da_EdgeStraightAngle"
-i "da_sraightAngle.png";

menuItem
-l "Right Angle"
-c "da_EdgeRightAngle"
-i "da_rightAngle.png";

menuItem
-l "Acute Angle"
-c "da_EdgeAcuteAngle"
-i "da_acuteAngle.png";

menuItem
-l "Inside"
-c "da_EdgeInside"
-i "da_insideEdge.png";

menuItem
-l "On Border"
-c "da_EdgeBorder"
-i "da_borderEdge.png";

menuItem
-l "Soft"
-c "da_EdgeSoft"
-i "da_softEdge.png";

menuItem
-l "Hard"
-c "da_EdgeHard"
-i "da_hardEdge.png";

setParent -m ..;

menuItem
-d 1;

if (`size($polyCheck)` != 0){
menuItem
-l "Sudivide Shell" 
-sm 1
-i "out_subdiv.png";

menuItem
-l "On" 
-c "da_shellSubdiv" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_shellNoSubdiv" 
-i "rvViewingPipelineOff.png";

setParent -m ..;
}

menuItem
-l "Detach Shell" 
-c "da_shellDetach" 
-i "error.png";

if (`size($edgeCheck)` != 0){
menuItem
-l "Bridge" 
-c "BridgeEdge;" 
-rp "NE" 
-i "polyBridge.png";

menuItem
-l "Delete Edge" 
-c "DeletePolyElements;" 
-rp "SW" 
-i "polyDelEdgeVertex.png";
}

menuItem
-l "Shading" 
-sm 1
-rp "SW" 
-i "bevel.png";

menuItem
-l "On" 
-c "da_PolyShade" 
-rp "S" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_PolyNoShade" 
-rp "SW" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

} 
// Define nCloth marking menu
global proc nCloth_MM_May9(){

menuItem
-l "Add Compass to Local Force" 
-c "da_nClothForceCompass" 
-rp "N" 
-i "volumeSphere.png";

menuItem
-l "Add Compass to Local Wind" 
-c "da_nClothWindCompass" 
-rp "S" 
-i "volumeSphere.png";

setParent -m ..;

} 
// Define Name_shellBase marking menu
global proc Name_CTRL_MM_May9(){
string $myIKHandleCheck[] = `ls -sl -typ "ikHandle"`;
string $myCurTransform[] = `ls -sl -typ "transform"`;

menuItem
-l "Select Hierarchy" 
-c "SelectHierarchy" 
-rp "N" 
-i "selectByHierarchy.png";

menuItem
-l "Reset Transforms"
-c "da_ResetTransform"
-rp "NE"
-i "out_buttonManip.png";

if (size($myCurTransform) >= 2){
menuItem
-l "Controller"
-sm 1
-rp "E"
-i "teLockUnchecked.png";

menuItem
-l "Orient" 
-c "da_CtrlOrientConstraint" 
-rp "NW" 
-i "orientConstraint.png";

menuItem
-l "Point" 
-c "da_CtrlPointConstraint" 
-rp "NE" 
-i "posConstraint.png";

menuItem
-l "Aim" 
-c "da_CtrlAimConstraint" 
-rp "E" 
-i "aimConstraint.png";

menuItem
-l "Parent" 
-c "da_CtrlParentConstraint" 
-rp "N" 
-i "parentConstraint.png";

if (size($myIKHandleCheck) > 0){
menuItem
-l "Pole Vector" 
-c "da_CtrlPoleVectorConstraint" 
-rp "SE" 
-i "poleVectorConstraint.png";

menuItem
-l "IK" 
-c "da_CtrlIKConstraint" 
-rp "S" 
-i "out_ikHandle.png";
}

setParent -m ..;
}

if (`about -api` >= 20180000){

menuItem
-l "Prossimity"
-sm 1 
-rp "SE" 
-i "circle.png";

menuItem -bld 1 
-l "On"
-c "da_ControllerProssimity"
-rp "SE" 
-i "rvViewingPipelineOn.png";

menuItem -bld 1 
-l "Off"
-c "da_ControllerNoProssimity"
-rp "E" 
-i "rvViewingPipelineOff.png";

setParent -m ..;
}

menuItem
-l "Wire Color" 
-sm 1
-rp "S" 
-i "da_blue.png";

menuItem
-l "Red" 
-c "da_RedOverrides" 
-rp "SW" 
-i "da_red.png";

menuItem
-l "Yellow" 
-c "da_YellowOverrides" 
-rp "S" 
-i "da_yellow.png";

menuItem
-l "Blue" 
-c "da_BlueOverrides" 
-rp "SE" 
-i "da_lightBlue.png";

menuItem
-l "Green" 
-c "da_GreenOverrides"
-rp "E" 
-i "da_green.png";

menuItem
-l "Default" 
-c "da_NoColorOverrides" 
-rp "W" 
-i "da_blue.png";

setParent -m ..;

if (size(`filterExpand -sm 12`)){
menuItem
-l "Renderable" 
-sm 1
-rp "W" 
-i "polyBevel.png";

menuItem
-l "On" 
-c "da_PolyRender" 
-rp "SW" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_PolyNoRender" 
-rp "W" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Shading" 
-sm 1
-rp "SW" 
-i "bevel.png";

menuItem
-l "On" 
-c "da_PolyShade" 
-rp "S" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_PolyNoShade" 
-rp "SW" 
-i "rvViewingPipelineOff.png";

setParent -m ..;
}

menuItem
-l "Freeze Transformations"
-c "FreezeTransformations" 
-i "FreezeTransform.png";

menuItem
-l "Delete Non-Deform History"
-c "BakeNonDefHistory" 
-i "DeleteHistory.png";

menuItem
-d 1;

menuItem 
-l "Match Pivots"
-c "MatchPivots"
-i "pickPivotComp.png"
-en (size($myCurTransform) >= 2);

menuItem 
-l "Match Transform"
-c "MatchTransform"
-i "move_M.png"
-en (size($myCurTransform) >= 2);

menuItem
-d 1;

menuItem
-l "Tag As Controller"
-c "TagAsController"
-i "circle.png";

menuItem
-l "Tag As Parent Controller"
-c "TagAsControllerParent"
-i "parent.png"
-en (size($myCurTransform) >= 2);

menuItem
-d 1;

menuItem
-l "Remove Prefix CTRL"
-c "da_RemovePrefixCTRL"
-i "HIKCharacterToolSelection.png";

menuItem
-l "Create Buffer"
-c "da_CreateBufferGRP" 
-i "out_transform.png";

setParent -m ..;
}
// Define NodeEditor marking menu
global proc NodeEditor_MM_May9(){
global string $da_underPointerPanel;
$da_underPointerPanel = `getPanel -underPointer`;

string $mySel[] = `ls -sl`;
string $myNodeType[] = `da_QueryArrayNodeType`;
string $myNodeEditor = `getCurrentNodeEditor`;
select $mySel;

string $myCurTransform[] = `ls -sl -typ "transform"`;

if($myNodeType[0] == "character"){

menuItem
-l "Edit Character..."
-rp "N" 
-c "characterEditor( true )"
-i "HIKcreateControlRig.png";
}else{
menuItem
-l "Select Time Node" 
-c "select time1" 
-rp "N" 
-i "time.svg";

menuItem
-l "Create Node..." 
-c "createNodeWindow" 
-rp "SE" 
-i "createNode.png";

menuItem
-l "Delete Unused Nodes" 
-c "hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"deleteUnusedNodes\");" 
-rp "S" 
-i "deleteActive.png";

menuItem
-l "Select All Nodes" 
-c "select `listHistory -ac`" 
-rp "W" 
-i "createBinFromSelectedNodes.png";

menuItem
-l "Duplicate Network" 
-c "hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"duplicateShadingNetwork\");" 
-rp "NE" 
-i "duplicateReference.png";

menuItem
-l "Import Network..." 
-c "hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"import\");" 
-rp "NW" 
-i "greasePencilImport.png";

menuItem
-l "Export Network..." 
-c "hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"exportSelectedNetwork\");" 
-rp "SW" 
-i "greasePencilExport.png";

menuItem
-l "Hypergraph" 
-sm 1
-rp "E" 
-i "hypergraph.png";

menuItem
-l "Hierarchy..." 
-c "HypergraphHierarchyWindow" 
-rp "E" 
-i "showDag.png";

menuItem
-l "Connections..." 
-c "HypergraphDGWindow" 
-rp "SE" 
-i "showDepend.png";

setParent -m ..;

menuItem
-l "Connection Manager..."
-c "da_ConnectAttributesUI"
-i "da_OneToMany.png";

menuItem
-l "Connection Editor..."
-c "ConnectionEditor"
-i "out_list.png";

menuItem
-l "Expression Editor..." 
-c "ExpressionEditor" 
-i "out_expression.png";

if (`about -api` >= 20200000 && size($myCurTransform) >= 2){
menuItem
-l "Offset Parent Matrix..." 
-c "da_OffsetParentMatrix" 
-i "parent.png";
}

menuItem
-d 1;

if (`pluginInfo -q -l bifrostGraph` == 1){
menuItem 
-l "Bifrost Graph"
-sm 1
-i "out_bifrostBoard.png";

menuItem 
-l "Create Graph"
-c "createNode bifrostBoard; rename bifrostGraph1"
-i "out_bifrostBoard.png";

menuItem 
-l "Create bifShape"
-c "createNode bifShape"
-i "out_mesh.png";

setParent -m ..;
}

menuItem
-l "Create Common Nodes" 
-sm 1
-i "nodeGrapherAddNodes.png";

menuItem
-l "vectorProduct" 
-c "createNode vectorProduct;" 
-i "render_vectorProduct.png";

if (`about -api` >= 20200000){
menuItem
-l "blendMatrix" 
-c "createNode blendMatrix;" 
-i "nodeGridDisplay.png";

menuItem
-l "pickMatrix" 
-c "createNode pickMatrix;" 
-i "pickPointComp.png";
}

menuItem
-l "decomposeMatrix" 
-c "createNode decomposeMatrix;" 
-i "out_decomposeMatrix.png";

menuItem
-l "multiplyDivide" 
-c "createNode multiplyDivide;" 
-i "render_multiplyDivide.png";

menuItem
-l "plusMinusAverage" 
-c "createNode plusMinusAverage" 
-i "out_plusMinusAverage.png";

menuItem
-l "reverse" 
-c "createNode reverse" 
-i "out_reverse.png";

menuItem
-l "chooser" 
-c "createNode chooser" 
-i "render_chooser.png";

menuItem
-l "blendColors" 
-c "createNode blendColors" 
-i "out_blendColors.png";

menuItem
-l "blendTwoAttr" 
-c "createNode blendTwoAttr" 
-i "render_blendTwoAttr.png";

menuItem
-l "condition" 
-c "createNode condition" 
-i "out_condition.png" ;

menuItem
-l "choice" 
-c "createNode choice" 
-i "render_choice.png";

menuItem
-l "combinationShape" 
-c "createNode combinationShape" 
-i "swapBlendShape.png";

menuItem
-d 1;

menuItem
-l "instancer" 
-c "createNode instancer" 
-i "out_instancer.png";

setParent -m ..;

if (`about -api` >= 20180000){
string $myConnectionStyle = `nodeEditor -q -connectionStyle $myNodeEditor`;

menuItem
-l "Connection Style" 
-sm 1
-i "mergeConnections.png";

radioMenuItemCollection;

menuItem
-l "Bezier" 
-c "nodeEditor -e -connectionStyle \"bezier\" `getCurrentNodeEditor`" 
-rb ($myConnectionStyle == "bezier");

menuItem
-l "Straight" 
-c "nodeEditor -e -connectionStyle \"straight\" `getCurrentNodeEditor`" 
-rb ($myConnectionStyle == "straight");

menuItem
-l "Corner" 
-c "nodeEditor -e -connectionStyle \"corner\" `getCurrentNodeEditor`" 
-rb ($myConnectionStyle == "corner");

menuItem
-l "S-Shape" 
-c "nodeEditor -e -connectionStyle \"sshape\" `getCurrentNodeEditor`" 
-rb ($myConnectionStyle == "sshape");

setParent -m ..;
}

menuItem
-d 1;

menuItem
-l "Duplicate Window"
-c "tearOffCopyItemCmd scriptedPanel $da_underPointerPanel"
-i "UVTkDuplicateSet.png";

setParent -m ..;

}
} 
// Define nRigid marking menu
global proc nRigid_MM_May9(){

menuItem
-l "Air Push On" 
-c "da_nRigidsAirPush" 
-rp "NE";

menuItem
-l "Wind Shadow On" 
-c "da_nRigidsWindShadow" 
-rp "E";

menuItem
-l "Air Push Off" 
-c "da_nRigidsNoAirPush" 
-rp "NW";

menuItem
-l "Wind Shadow Off" 
-c "da_nRigidsNoWindShadow" 
-rp "W";

setParent -m ..;

} 
// Define Nucleus marking menu
global proc Nucleus_MM_May9(){

menuItem
-l "Not Physically Based" 
-c "da_NucleusPhysicallyBasedOff" 
-rp "W" 
-i "out_radiusDimension.png";

menuItem
-l "Physically Based" 
-c "da_NucleusPhysicallyBasedOn" 
-rp "E" 
-i "out_radiusDimension.png";

menuItem
-l "Gravity" 
-sm 1;

menuItem
-l "On" 
-c "da_NucleusGravityOn" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_NucleusGravityOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Use Plane" 
-sm 1;

menuItem
-l "On" 
-c "da_NucleusPlaneOn" 
-rp "N" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_NucleusPlaneOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Solver Precision" 
-sm 1;

menuItem
-l "High" 
-c "da_NucleusHqOn";

menuItem
-l "Medium" 
-c "da_NucleusMedium";

menuItem
-l "Low" 
-c "da_NucleusHqOff";

setParent -m ..;

menuItem
-l "Parallel Override" 
-sm 1;

menuItem
-l "On" 
-c "da_NucleusParallelOn" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_NucleusParallelOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Add Compass to Wind" 
-c "da_NucleusWindController" 
-rp "N" 
-i "out_implicitSphere.png";

setParent -m ..;

} 
// Define NurbsCreate marking menu
global proc NurbsCreate_MM_May9(){

menuItem
-l "Connect to Shape(s)" 
-c "da_NurbsConnectCreation" 
-rp "N" 
-i "da_OneToMany.png";

setParent -m ..;

} 
// Define NurbsCurve marking menu
global proc NurbsCurve_MM_May9(){

menuItem
-l "Project Curve on Surface" 
-c "ProjectCurveOnSurface" 
-rp "N" 
-i "projectCurve.png";

menuItem
-c "ProjectCurveOnSurfaceOptions" 
-ob 1;

menuItem
-l "Snap Curve to NURBS" 
-c "da_SnapCurveToNurbs" 
-rp "S" 
-i "snapPlane.png";

setParent -m ..;

} 
// Define NurbsFace marking menu
global proc NurbsFace_MM_May9(){

menuItem
-l "Duplicate" 
-c "duplicateSurfacePresetArgList( \"2\", {\"1\",\"0\"} )" 
-rp "N" 
-i "duplicateSurface.png";

menuItem
-l "Surface Editing" 
-c "SurfaceEditingTool" 
-rp "S" 
-i "surfaceEditor.png";

menuItem
-c "SurfaceEditingToolOptions" 
-ob 1;

$item = "";

$menuAssign = `menuItem -l (uiRes("m_buildShaderMenus.kAssignExistingMaterial")) -sm true -i "out_shaderList.png"`;
menuItem 
-edit 
-postMenuCommand ("buildAssignShaderMenu " + $menuAssign + " \""+$item+"\"") $menuAssign;
setParent -menu ..;

menuItem
-l "Assign New Material..." 
-c "createAssignNewMaterialTreeLister \"\";" 
-i "render_adskMaterial.png";

setParent -m ..;

} 
// Define NurbsIsoparms marking menu
global proc NurbsIsoparms_MM_May9(){

menuItem
-l "Detach Surfaces" 
-c "DetachSurfaces" 
-rp "S" 
-i "detach.png";

menuItem
-c "DetachSurfacesOptions" 
-ob 1;

menuItem
-l "Insert Isoparms" 
-c "insertKnotPreset 1 1 1 1 0 0" 
-rp "N" 
-i "insert.png";

menuItem
-c "InsertIsoparmsOptions" 
-ob 1;

menuItem
-l "Stitch Edges Tool" 
-c "StitchEdgesTool" 
-rp "NE" 
-i "stitchSrf.png";

menuItem
-c "StitchEdgesToolOptions" 
-ob 1;

menuItem
-l "Duplicate Surface Curves" 
-c "duplicateCurvePresetArgList( \"2\", {\"1\",\"0\",\"0\",\"2\"} )" 
-rp "NW" 
-i "duplicateCurve.png";

menuItem
-c "DuplicateCurveOptions" 
-ob 1;

menuItem
-l "Freeform Fillet" 
-c "freeFormFilletPreset(1,0,0.5,0,0.01,0.1)" 
-rp "W" 
-i "filletFreeform_S.png";

menuItem
-c "FreeformFilletOptions" 
-ob 1;

menuItem
-l "Fillet Blend Tool" 
-c "doFilletBlendArgList 2 {\"1\", \"1\", \"1\", \"0\", \"0\", \"0\", \"0.1\", \"0.1\", \"0\", \"1\", \"0\", \"0\", \"1\", \"0\", \"0\", \"0\", \"1\", \"0\" }" 
-rp "E" 
-i "blendSurface.png";

menuItem
-c "FilletBlendToolOptions" 
-ob 1;

setParent -m ..;

} 
// Define NurbsNurbs marking menu
global proc NurbsNurbs_MM_May9(){

string $myCurTransform[] = `ls -sl -typ "transform"`;

menuItem
-l "Intersect Surfaces" 
-c "IntersectSurfaces" 
-rp "SE" 
-i "srfIntersect.png";

menuItem
-c "IntersectSurfacesOptions" 
-ob 1;

menuItem
-l "Booleans" 
-sm 1
-rp "W" 
-i "nurbsShellIntersect.png";

menuItem
-l "Union Tool" 
-c "nurbsBooleanPreset 1 {\"1\", \"2\", \"0\", \"1\" }" 
-rp "NW" 
-i "nurbsShellUnion.png";

menuItem
-c "SurfaceBooleanUnionToolOptions" 
-ob 1;

menuItem
-l "Difference Tool" 
-c "nurbsBooleanPreset 1 {\"1\", \"2\", \"1\", \"1\" }" 
-rp "W" 
-i "nurbsShellSubtract.png";

menuItem
-c "SurfaceBooleanSubtractToolOptions" 
-ob 1;

menuItem
-l "Intersection Tool" 
-c "nurbsBooleanPreset 1 {\"1\", \"2\", \"2\", \"1\" }" 
-rp "SW" 
-i "nurbsShellIntersect.png";

menuItem
-c "SurfaceBooleanIntersectToolOptions" 
-ob 1;

setParent -m ..;

menuItem
-l "Circular Fillet" 
-c "circularFilletPreset(1,0,1,0,0,0.01,0.1,0)" 
-rp "E" 
-i "surfaceFillet.png";

menuItem
-c "CircularFilletOptions" 
-ob 1;

menuItem
-l "Open/Close" 
-c "doCloseSurfaceArgList 2 { \"1\", \"1\", \"1\", \"1\", \"0.5\", \"0\", \"0.1\" }" 
-rp "SW" 
-i "openCloseSurface.png";

menuItem
-c "OpenCloseSurfacesOptions" 
-ob 1;

menuItem
-l "Sculpt Geometry..." 
-c "SculptGeometryToolOptions;\nartPuttyCtx -e -showactive true `currentCtx`;" 
-rp "N" 
-i "putty.png";

menuItem
-l "Attach" 
-c "doAttachSurfaceArgList 2 { \"1\", \"0\", \"1\", \"1\", \"0.5\", \"0\", \"0.1\" }" 
-rp "NW" 
-i "align.png";

menuItem
-c "AttachSurfacesOptions" 
-ob 1;

menuItem
-l "Round Tool" 
-c "RoundTool" 
-rp "NE" 
-i "roundSrf.png";

menuItem
-c "RoundToolOptions" 
-ob 1;

menuItem
-l "Surface Editing" 
-c "SurfaceEditingTool" 
-rp "S" 
-i "surfaceEditor.png";

menuItem
-c "SurfaceEditingToolOptions" 
-ob 1;

menuItem
-l "Align Surfaces..." 
-c "AlignSurfacesOptions" 
-i "alignSurface.png";

menuItem
-l "Connect Shapes..." 
-c "da_ConnectNurbsShapesUI" 
-i "da_OneToMany.png";

menuItem
-d 1;

menuItem
-l "NURBS to Polygons" 
-c "da_NurbsToMesh" 
-i "nurbsToPolygons.png";

menuItem
-l "Stitch Edges" 
-c "StitchEdgesTool" 
-i "stitchSrf.png";

menuItem
-c "StitchEdgesToolOptions" 
-ob 1;

menuItem
-d 1;

menuItem
-l "Component Display" 
-sm 1
-i "RS_visible.png";

menuItem
-d 1;

menuItem
-l "CVs" 
-c "ToggleCVs" 
-i "selectCVboundary.png";

menuItem
-l "Normals" 
-c "ToggleNormals" 
-i "polyNormalsPropagate.png";

menuItem
-l "Surface Origins" 
-c "ToggleSurfaceOrigin" 
-i "channelBoxUseManips.png";

setParent -m ..;

menuItem
-l "Deformers" 
-sm 1
-i "bendNLD.png";

if (!`optionVar -q deformationUseComponentTags`){
menuItem
-l "Deformer Set Editor..."
-c "DeformerSetEditor"
-i "da_deformerSetEditor.png";

menuItem
-l "Paint Set Membership..."
-c "PaintSetMembershipToolOptions"
-i "paintSetMembership.png";

menuItem
-d 1;
}

menuItem
-l "Create Blend Shape"
-c "CreateBlendShape"
-i "blendShape.png";

menuItem
-l "Add Shape"
-c "AddBlendShape;"
-i "ts-add.png";

menuItem 
-d 1;

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

menuItem 
-d 1;

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_PaintableRiggedCluster" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_PaintableRiggedClusterUI" 
-i "cluster.png";
}

menuItem
-l "Rigged Sculpt"
-c "da_SculptDeformer"
-i "sculpt.png"
-en (size($myCurTransform) == 2);

menuItem
-l "Lattice..." 
-c "CreateLatticeOptions" 
-i "lattice.png";

setParent -m ..;

menuItem
-l "Shading" 
-sm 1
-i "render_adskMaterial.png";

$item = "";

$menuAssign = `menuItem -l (uiRes("m_buildShaderMenus.kAssignExistingMaterial")) -sm true -i "out_shaderList.png"`;
menuItem 
-edit 
-postMenuCommand ("buildAssignShaderMenu " + $menuAssign + " \""+$item+"\"") $menuAssign;
setParent -menu ..;

menuItem
-l "Assign New Material..." 
-c "createAssignNewMaterialTreeLister \"\";" 
-i "render_adskMaterial.png";

menuItem
-d 1;

menuItem
-l "Shaded Brightness Two Tone" 
-c "assignToonShader \"shadedBrightness\"" 
-i "toonBrightness2.png";

menuItem
-l "Shaded Brightness Three Tone" 
-c "assignToonShader \"threeToneBrightness\"" 
-i "toonBrightness3.png";

menuItem
-l "Circle Highlight" 
-c "assignToonShader \"circleHighlight\"" 
-i "toonCircleHigh.png";

menuItem
-d 1;

menuItem
-l "Add Toon Outline" 
-c "assignNewPfxToon" 
-i "toonAddOutline.png";

menuItem
-l "Remove Toon Outlines" 
-c "removePfxToonOutlines" 
-i "toonRemoveOutline.png";

setParent -m ..;

menuItem
-l "Dynamics" 
-sm 1
-i "out_nucleus.png";

menuItem
-l "Emit Particle From CV..." 
-c "NEmitFromObjectOptions" 
-i "emitter.png";

menuItem
-l "Particle Style" 
-sm 1
-i "out_particle.png";

menuItem
-l "Points" 
-c "optionVar -stringValue NParticleStyle \"Points\";" 
-i "nPartPoints.png";

menuItem
-l "Balls" 
-c "optionVar -stringValue NParticleStyle \"Balls\";" 
-i "nPartBalls.png";

menuItem
-l "Cloud" 
-c "optionVar -stringValue NParticleStyle \"Cloud\";" 
-i "nPartCloud.png";

menuItem
-l "ThickCloud" 
-c "optionVar -stringValue NParticleStyle \"ThickCloud\";" 
-i "nPartThickCloud.png";

menuItem
-l "Water" 
-c "optionVar -stringValue NParticleStyle \"Water\";" 
-i "nPartWater.png";

setParent -m ..;

menuItem
-l "Create nSoft Body..." 
-c "CreateNSoftBodyOptions" 
-i "soft.png";

menuItem
-l "Create nHair..." 
-c "CreateHairOptions" 
-i "hairCreate.png";

menuItem
-d 1;

menuItem
-l "Create Active Rigid Body" 
-c "rigidBody -active -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none " 
-i "rigid.png";

menuItem
-l "Create Passive Rigid Body" 
-c "rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none " 
-i "rigidPassive.png";

menuItem
-l "Constrain" 
-sm 1
-i "constraint.png";

menuItem
-l "Pin" 
-c "constrain -pin -i 0 " 
-i "constraint.png";

menuItem
-l "Hinge" 
-c "constrain -hinge -o 0 0 0 " 
-i "constraint.png";

menuItem
-l "Spring" 
-c "constrain -spring -st 5 -d 0.1 " 
-i "constraint.png";

setParent -m ..;

menuItem
-l "Set Initial State" 
-c "setDynStartState;" 
-i "fluidInitialStateSet.png";

menuItem
-d 1;

menuItem
-l "Fields" 
-sm 1
-i "posRadial.png";

menuItem
-l "Air" 
-c "dynExecuteFieldCommands 1 \"air -pos 0 0 0 -m 4 -att 1 -dx 0 -dy 1 -dz 0 -s 5 -iv 1 -iro 1 -vco 0 -es 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posAir.png";

menuItem
-l "Drag" 
-c "dynExecuteFieldCommands 1 \"drag -pos 0 0 0 -m 0.05 -att 1 -dx 0 -dy 0 -dz 0 -ud 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posDrag.png";

menuItem
-l "Gravity" 
-c "dynExecuteFieldCommands 1 \"gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5\"" 
-i "posGravity.png";

menuItem
-l "Newton" 
-c "dynExecuteFieldCommands 1 \"newton -pos 0 0 0 -m 5 -att 1 -mnd 0.2  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posNewton.png";

menuItem
-l "Radial" 
-c "dynExecuteFieldCommands 1 \"radial -pos 0 0 0 -m 5 -att 1 -typ 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posRadial.png";

menuItem
-l "Turbulence" 
-c "dynExecuteFieldCommands 1 \"turbulence -pos 0 0 0 -m 5 -att 1 -f 1 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posTurbulence.png";

menuItem
-l "Uniform" 
-c "dynExecuteFieldCommands 1 \"uniform -pos 0 0 0 -m 5 -att 1 -dx 1 -dy 0 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posUniform.png";

menuItem
-l "Vortex" 
-c "dynExecuteFieldCommands 1 \"vortex -pos 0 0 0 -m 5 -att 1 -ax 0 -ay 1 -az 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVortex.png";

menuItem
-l "Volume Axis" 
-c "dynExecuteFieldCommands 1 \"volumeAxis -pos 0 0 0 -m 5 -att 0 -ia 0 -afc 1 -afx 1 -arx 0 -alx 0 -drs 0 -dx 1 -dy 0 -dz 0 -trb 0 -trs 0.2 -tfx 1 -tfy 1 -tfz 1 -tox 0 -toy 0 -toz 0 -dtr 0  -mxd -1  -vsh cube -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVolumeAxis.png";

setParent -m ..;

setParent -m ..;

menuItem
-l "Cache"
-sm 1
-i "nClothCacheCreate.png";

menuItem
-l "Create Muscle Cache..."
-c "cMuscle_makeCacheUI"
-i "cMuscle_skin_cacheCreate.png";

menuItem
-l "Delete Muscle Node Cache..."
-c "cMuscle_deleteNodeCacheUI"
-i "cMuscle_skin_cacheDelete.png";

setParent -m ..;

setParent -m ..;

} 
// Define NurbsShapeNurbsShape marking menu
global proc NurbsShapeNurbsShape_MM_May9(){

menuItem
-l "Connect Shapes" 
-c "da_ConnectNurbsShapes" 
-rp "N" 
-i "da_OneToMany.png";

menuItem
-l "Component to Component" 
-c "doCreateNConstraint pointToPoint 0" 
-rp "W" 
-i "nConstraintComponent.png";

menuItem
-l "Force Field" 
-c "doCreateNConstraint force 0" 
-rp "SW" 
-i "nConstraintForceField.png";

menuItem
-l "Transform Constraint" 
-c "doCreateNConstraint transform 0" 
-rp "S" 
-i "nConstraintTransform.png";

menuItem
-l "Point to Surface" 
-c "doCreateNConstraint pointToSurface 0" 
-rp "SE" 
-i "nConstraintPointoSurface.png";

menuItem
-l "Slide on Surface" 
-c "doCreateNConstraint slideOnSurface 0" 
-rp "E" 
-i "nConstraintSlideonSurface.png";

menuItem
-l "Lock Length" 
-rp "NE" 
-c "LockCurveLength" 
-i "lockLength.png";

menuItem
-l "Unlock Length" 
-rp "NW" 
-c "UnlockCurveLength"  
-i "unlockLength.png";

menuItem
-l "Rivet to CVs"
-c "da_CurveCvRivet"
-i "pickPointComp.png";

menuItem
-l "Point On Curve" 
-c "da_PointOnCurve" 
-i "ptPosCrvConstraint.png";

setParent -m ..;
} 
// Define Null marking menu
global proc Null_MM_May9(){
da_MMtoKey_release;
}
// Define Nurbs marking menu
global proc Nurbs_MM_May9(){
string $myCurTransform[] = `ls -sl -typ "transform"`;

menuItem
-l "Sculpt Geometry..." 
-c "SculptGeometryToolOptions;\nartPuttyCtx -e -showactive true `currentCtx`;" 
-rp "N" 
-i "putty.png";

menuItem
-l "Trim Tool" 
-c "TrimTool" 
-rp "W" 
-i "trim.png";

menuItem
-c "TrimToolOptions" 
-ob 1;

menuItem
-l "Untrim Surfaces" 
-c "UntrimSurfaces" 
-rp "E" 
-i "untrim.png";

menuItem
-c "UntrimSurfacesOptions" 
-ob 1;

menuItem
-l "Open/Close" 
-c "doCloseSurfaceArgList 2 { \"1\", \"1\", \"1\", \"1\", \"0.5\", \"0\", \"0.1\" }" 
-rp "SW" 
-i "openCloseSurface.png";

menuItem
-c "OpenCloseSurfacesOptions" 
-ob 1;

menuItem
-l "Surface Editing" 
-c "SurfaceEditingTool" 
-rp "S" 
-i "surfaceEditor.png";

menuItem
-c "SurfaceEditingToolOptions" 
-ob 1;

menuItem
-l "Reverse Direction" 
-c "ReverseSurfaceDirection" 
-rp "NE" 
-i "reverseSurface.png";

menuItem
-c "ReverseSurfaceDirectionOptions" 
-ob 1;

menuItem
-l "Rebuild" 
-c "RebuildSurfaces" 
-rp "NW" 
-i "rebuildSurface.png";

menuItem
-c "RebuildSurfacesOptions" 
-ob 1;

menuItem
-l "Input Operations..." 
-c "da_ListInputOperations" 
-i "out_list.png";

menuItem
-d 1;

menuItem
-l "NURBS to Polygons" 
-c "da_NurbsToMesh" 
-i "nurbsToPolygons.png";

menuItem
-l "Locator on Surface"
-c "da_LocatorOnSurface"
-i "locator.png";

menuItem
-d 1;

menuItem
-l "Component Display" 
-sm 1
-i "RS_visible.png";

menuItem
-d 1;

menuItem
-l "CVs" 
-c "ToggleCVs" 
-i "selectCVboundary.png";

menuItem
-l "Normals" 
-c "ToggleNormals" 
-i "polyNormalsPropagate.png";

menuItem
-l "Surface Origins" 
-c "ToggleSurfaceOrigin" 
-i "channelBoxUseManips.png";

setParent -m ..;

menuItem
-l "Deformers" 
-sm 1
-i "bendNLD.png";

if (!`optionVar -q deformationUseComponentTags`){
menuItem
-l "Deformer Set Editor..."
-c "DeformerSetEditor"
-i "da_deformerSetEditor.png";

menuItem
-l "Paint Set Membership..."
-c "PaintSetMembershipToolOptions"
-i "paintSetMembership.png";

menuItem
-d 1;
}

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

menuItem 
-d 1;

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_PaintableRiggedCluster" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_PaintableRiggedClusterUI" 
-i "cluster.png";
}

menuItem
-l "Rigged Sculpt"
-c "da_SculptDeformer"
-i "sculpt.png";

menuItem 
-l "Flow Path Object..."
-c "FlowPathObjectOptions"
-i "flowPathObj.png"
-en (size(`listConnections -s 1 -d 0 ($myCurTransform[0] + ".tx")`));

menuItem
-l "Lattice..." 
-c "CreateLatticeOptions" 
-i "lattice.png";

setParent -m ..;

menuItem
-l "Shading" 
-sm 1
-i "render_adskMaterial.png";

menuItem
-l "Edit Material..."
-c "da_SelectAssignedShader"
-i "materialEditor.png";

$item = "";

$menuAssign = `menuItem -l (uiRes("m_buildShaderMenus.kAssignExistingMaterial")) -sm true -i "out_shaderList.png"`;
menuItem 
-edit 
-postMenuCommand ("buildAssignShaderMenu " + $menuAssign + " \""+$item+"\"") $menuAssign;
setParent -menu ..;

menuItem
-l "Assign New Material..." 
-c "createAssignNewMaterialTreeLister \"\";" 
-i "render_adskMaterial.png";

menuItem
-d 1;

menuItem
-l "Shaded Brightness Two Tone" 
-c "assignToonShader \"shadedBrightness\"" 
-i "toonBrightness2.png";

menuItem
-l "Shaded Brightness Three Tone" 
-c "assignToonShader \"threeToneBrightness\"" 
-i "toonBrightness3.png";

menuItem
-l "Circle Highlight" 
-c "assignToonShader \"circleHighlight\"" 
-i "toonCircleHigh.png";

menuItem
-d 1;

menuItem
-l "Add Toon Outline" 
-c "assignNewPfxToon" 
-i "toonAddOutline.png";

menuItem
-l "Remove Toon Outlines" 
-c "removePfxToonOutlines" 
-i "toonRemoveOutline.png";

setParent -m ..;

menuItem
-l "Dynamics" 
-sm 1
-i "out_nucleus.png";

menuItem
-l "Emit nParticle From CV..." 
-c "NEmitFromObjectOptions" 
-i "emitter.png";

menuItem
-l "Particle Style" 
-sm 1
-i "out_particle.png";

menuItem
-l "Points" 
-c "optionVar -stringValue NParticleStyle \"Points\";" 
-i "nPartPoints.png";

menuItem
-l "Balls" 
-c "optionVar -stringValue NParticleStyle \"Balls\";" 
-i "nPartBalls.png";

menuItem
-l "Cloud" 
-c "optionVar -stringValue NParticleStyle \"Cloud\";" 
-i "nPartCloud.png";

menuItem
-l "ThickCloud" 
-c "optionVar -stringValue NParticleStyle \"ThickCloud\";" 
-i "nPartThickCloud.png";

menuItem
-l "Water" 
-c "optionVar -stringValue NParticleStyle \"Water\";" 
-i "nPartWater.png";

setParent -m ..;

menuItem
-l "Create nSoft Body..." 
-c "CreateNSoftBodyOptions" 
-i "soft.png";

menuItem
-l "Create nHair..." 
-c "CreateHairOptions" 
-i "hairCreate.png"; 

menuItem
-d 1;

menuItem
-l "Create Active Rigid Body" 
-c "rigidBody -active -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none " 
-i "rigid.png";

menuItem
-l "Create Passive Rigid Body" 
-c "rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none " 
-i "rigidPassive.png";

menuItem
-l "Constrain" 
-sm 1
-i "constraint.png";

menuItem
-l "Nail" 
-c "constrain -nail " 
-i "constraint.png";

menuItem
-l "Hinge" 
-c "constrain -hinge -o 0 0 0 " 
-i "constraint.png";

menuItem
-l "Spring" 
-c "constrain -spring -st 5 -d 0.1 " 
-i "constraint.png";

menuItem
-l "Barrier" 
-c "constrain -barrier -o 0 0 0 " 
-i "constraint.png";

setParent -m ..;

menuItem
-l "Set Initial State" 
-c "setDynStartState;" 
-i "fluidInitialStateSet.png";

menuItem
-d 1;

menuItem
-l "Fields" 
-sm 1
-i "posRadial.png";

menuItem
-l "Air" 
-c "dynExecuteFieldCommands 1 \"air -pos 0 0 0 -m 4 -att 1 -dx 0 -dy 1 -dz 0 -s 5 -iv 1 -iro 1 -vco 0 -es 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posAir.png";

menuItem
-l "Drag" 
-c "dynExecuteFieldCommands 1 \"drag -pos 0 0 0 -m 0.05 -att 1 -dx 0 -dy 0 -dz 0 -ud 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posDrag.png";

menuItem
-l "Gravity" 
-c "dynExecuteFieldCommands 1 \"gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5\"" 
-i "posGravity.png";

menuItem
-l "Newton" 
-c "dynExecuteFieldCommands 1 \"newton -pos 0 0 0 -m 5 -att 1 -mnd 0.2  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posNewton.png";

menuItem
-l "Radial" 
-c "dynExecuteFieldCommands 1 \"radial -pos 0 0 0 -m 5 -att 1 -typ 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posRadial.png";

menuItem
-l "Turbulence" 
-c "dynExecuteFieldCommands 1 \"turbulence -pos 0 0 0 -m 5 -att 1 -f 1 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posTurbulence.png";

menuItem
-l "Uniform" 
-c "dynExecuteFieldCommands 1 \"uniform -pos 0 0 0 -m 5 -att 1 -dx 1 -dy 0 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posUniform.png";

menuItem
-l "Vortex" 
-c "dynExecuteFieldCommands 1 \"vortex -pos 0 0 0 -m 5 -att 1 -ax 0 -ay 1 -az 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVortex.png";

menuItem
-l "Volume Axis" 
-c "dynExecuteFieldCommands 1 \"volumeAxis -pos 0 0 0 -m 5 -att 0 -ia 0 -afc 1 -afx 1 -arx 0 -alx 0 -drs 0 -dx 1 -dy 0 -dz 0 -trb 0 -trs 0.2 -tfx 1 -tfy 1 -tfz 1 -tox 0 -toy 0 -toz 0 -dtr 0  -mxd -1  -vsh cube -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVolumeAxis.png";

setParent -m ..;

setParent -m ..;

menuItem
-l "Cache"
-sm 1
-i "nClothCacheCreate.png";

menuItem
-l "Create Muscle Cache..."
-c "cMuscle_makeCacheUI"
-i "cMuscle_skin_cacheCreate.png";

menuItem
-l "Delete Muscle Node Cache..."
-c "cMuscle_deleteNodeCacheUI"
-i "cMuscle_skin_cacheDelete.png";

setParent -m ..;

setParent -m ..;

} 

// Define Outliner marking menu
global proc Outliner_MM_May9(){
string $mySel[] = `ls -sl`;
string $myQueryArrayNodeType[] = `da_QueryArrayNodeType`;

select $mySel;

if (stringArrayContains("mayaUsdProxyShape", $myQueryArrayNodeType)){
USD_MM_May9;
}else{
OutlinerGlobal_MM_May9;
}
}

// Define OutlinerGlobal marking menu
global proc OutlinerGlobal_MM_May9(){
global string $da_underPointerPanel;
$da_underPointerPanel = `getPanel -underPointer`;

string $mySel[] = `ls -sl`;
string $myCurTransform[] = `ls -sl -typ "transform"`;
string $myContainer[] = `ls -sl -containers`;

if ( `size($myContainer)` == 0 ){
int $DAGCheck = `outlinerEditor -q -dag $da_underPointerPanel`;
int $ShapesCheck = `outlinerEditor -q -shp $da_underPointerPanel`;
int $MaterialCheck = `outlinerEditor -q -sam $da_underPointerPanel`;

menuItem
-l "Select Hierarchy" 
-c "SelectHierarchy" 
-rp "N" 
-i "selectByHierarchy.png";

menuItem
-l "DAG Only" 
-c "if (`outlinerEditor -q -dag $da_underPointerPanel`) outlinerEditor -e -dag 0 $da_underPointerPanel; else outlinerEditor -e -dag 1 $da_underPointerPanel" 
-rp "NE" 
-cb ($DAGCheck);

menuItem
-l "Shapes" 
-c "if (`outlinerEditor -q -shp $da_underPointerPanel`) outlinerEditor -e -shp 0 $da_underPointerPanel; else outlinerEditor -e -shp 1 $da_underPointerPanel" 
-rp "E" 
-cb ($ShapesCheck);

menuItem
-l "Materials" 
-c "if (`outlinerEditor -q -sam $da_underPointerPanel`) outlinerEditor -e -sam 0 $da_underPointerPanel; else outlinerEditor -e -sam 1 $da_underPointerPanel" 
-rp "SE" 
-cb ($MaterialCheck);

if ( size($myCurTransform) > 1 ){
menuItem
-l "Recursive Parent" 
-c "da_recursiveParent" 
-rp "S" 
-i "currentNamespaceParent.png";
}else{
if ($MaterialCheck && size($mySel) > 0 || $DAGCheck == 0 && size($mySel) > 0){
menuItem
-l "Select by Shader" 
-c "da_SelectObjectMaterial" 
-rp "S" 
-i "out_layeredShader.png";
} 
}

menuItem
-l "Create Quick Set..." 
-c "CreateQuickSelectSet"
-i "out_objectSet.png";

menuItem
-l "Namespace Editor..."
-c "NamespaceEditor"
-i "QR_rename.png";

menuItem
-l "Search and Replace..."
-c "SearchAndReplaceNames"
-i "text.png";

menuItem
-d 1;

menuItem
-l "Wire Color" 
-sm 1
-i "da_blue.png";

menuItem
-l "Default" 
-c "da_NoColorOverrides" 
-i "da_blue.png";

menuItem
-d 1;

menuItem
-l "Red" 
-c "da_RedOverrides" 
-i "da_red.png";

menuItem
-l "Green" 
-c "da_GreenOverrides" 
-i "da_green.png";

menuItem
-l "Yellow" 
-c "da_YellowOverrides" 
-i "da_yellow.png";

menuItem
-l "Blue" 
-c "da_BlueOverrides" 
-i "da_lightBlue.png";

setParent -m ..;

menuItem
-l "Display" 
-sm 1
-i "RS_visible.png";

menuItem
-l "Toggle Visibility" 
-c "ToggleVisibilityAndKeepSelection" 
-i "out_blendColors.png";

menuItem
-d 1;

menuItem
-l "Show Transform" 
-c "ShowSelectedObjects" 
-i "RS_visible.png";

menuItem
-l "Hide Transform" 
-c "HideSelectedObjects" 
-i "RS_disable.png";

menuItem
-d 1;

menuItem
-l "Show Shape" 
-c "da_NoVisibilityOverride" 
-i "settings-show.png";

menuItem
-l "Hide Shape" 
-c "da_VisibilityOverride" 
-i "settings-hide.png";

setParent -m ..;

menuItem
-l "Reference" 
-sm 1
-i "selectByObject.png";

menuItem
-l "On" 
-c "da_EnableReference" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_DisableReference" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Bounding Box" 
-sm 1
-i "volumeCube.png";

menuItem
-l "On" 
-c "da_EnableBoundingBox" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_DisableBoundingBox" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Shading" 
-sm 1
-i "bevel.png";

menuItem
-l "On" 
-c "da_PolyShade" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_PolyNoShade" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Renderable" 
-sm 1
-i "polyBevel.png";

menuItem
-l "On" 
-c "da_PolyRender" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_PolyNoRender" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "X-Ray" 
-sm 1
-i "da_Xray.png";

menuItem
-l "On" 
-c "displaySurface -x 1" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "displaySurface -x 0" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Add Prefix CTRL"
-c "da_AddPrefixCTRL"
-i "HIKCharacterToolFullBody.png"
-en (size($myCurTransform) >= 1);

menuItem
-l "Duplicate Window"
-c "tearOffCopyItemCmd outlinerPanel $da_underPointerPanel"
-i "UVTkDuplicateSet.png";

setParent -m ..;

}else{
string $myNodeType[] = `da_QueryArrayNodeType`;
select $mySel;
if($myNodeType[0] == "character"){

menuItem
-l "Edit Character..."
-rp "N" 
-c "characterEditor( true )"
-i "HIKcreateControlRig.png";
}else{

menuItem
-l "Edit in Hypergraph..." 
-c "da_EditContainer" 
-rp "N" 
-i "expandContainer.png";

menuItem
-l "Asset Editor..." 
-c "AssetEditor" 
-rp "E" 
-i "out_container.png";

menuItem
-l "Remove" 
-c "unpackAndRemoveContainer(`ls -sl -containers`)" 
-rp "S" 
-i "removeContainer.png";

setParent -m ..;
}
}
} 
// Define PaintFX marking menu
global proc PaintFX_MM_May9(){

menuItem
-l "PaintFX to Polygon" 
-c "PaintEffectsToPoly;" 
-rp "E" 
-i "paintFXtoPoly.png";

menuItem
-c "PaintEffectsToPolyOptions;" 
-ob 1;

menuItem
-l "PaintFX To Curve" 
-c "PaintEffectsToCurve;" 
-rp "NE" 
-i "paintFXtoCurve.png";

menuItem
-l "PaintFX To NURBS" 
-c "PaintEffectsToNurbs;" 
-rp "SE" 
-i "paintFXtoNurbs.png";

menuItem 
-l "Paint Effects Tool..." 
-c "PaintEffectsToolOptions" 
-rp "NW"
-i "paintEffectsTool.png";

menuItem
-l "Simplify Stroke Curves" 
-c "SimplifyStrokePathCurves;" 
-rp "W" 
-i "out_stroke.png";

menuItem
-l "Create Modifier" 
-c "createLineModifier;" 
-rp "S" 
-i "toonLineModifier.png";

menuItem
-l "Get Brush..." 
-c "ContentBrowserWindow;contentBrowserSetContext(\"WindowsMenu\", \"examples\", \"Examples/Paint Effects/Airbrush\");" 
-rp "N" 
-i "paintEffectsBrushesLarge.png";

menuItem
-l "Make Pressure Curve..." 
-c "MakePressureCurveOptions" 
-rp "SW" 
-i "out_nurbsCurve.png";

menuItem
-l "Surface Snap" 
-sm 1;

menuItem
-l "On" 
-c "da_BrushSurfaceSnap" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_BrushNoSurfaceSnap" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Surface Collide" 
-sm 1;

menuItem
-l "Outside" 
-c "da_BrushSurfaceCollideOutside";

menuItem
-l "Inside" 
-c "da_BrushSurfaceCollideInside";

menuItem
-l "Both" 
-c "da_BrushSurfaceCollideBoth";

menuItem
-d 1;

menuItem
-l "Off" 
-c "da_BrushNoSurfaceCollide" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Occupy Attraction" 
-sm 1;

menuItem
-l "On" 
-c "da_BrushOccupyAttraction" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_BrushNoOccupyAttraction" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Brush Animation" 
-sm 1;

menuItem
-l "Loop Brush Animation..." 
-c "LoopBrushAnimationOptions" 
-i "playbackLoopingContinuous.png";

menuItem
-l "Make Brush Spring" 
-c "MakeBrushSpring" 
-i "out_spring.png";

menuItem
-l "Bake Spring Animation..." 
-c "BakeSpringAnimationOptions" 
-i "bakeAnimation.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Get Settings from Selected" 
-c "setTemplateToCurrentBrush" 
-i "RS_isolate.png";

menuItem
-l "Apply Settings to Selected" 
-c "copyTemplateBrushToSelected" 
-i "RS_import_layer.png";

menuItem
-d 1;

menuItem
-l "Reset Template Brush" 
-c "ResetTemplateBrush" 
-i "resetTemplateBrush.png";

setParent -m ..;

} 
// Define ParticleEmitter marking menu
global proc ParticleEmitter_MM_May9(){

int $particleCountCheck = `optionVar -q particleCountVisibility`;

menuItem
-l "Add Compass to Directional" 
-c "da_EmitterCompass"
-i "volumeSphere.png" 
-rp "S";

menuItem
-l "Emitter Directional" 
-rp "N"
-i "out_fluidEmitter.png" 
-c "da_EmitterDirectional";

menuItem
-l "Emitter Omni"
-rp "NW" 
-i "out_pointEmitter.png"
-c "da_EmitterOmni";

menuItem
-l "Emitter Volume" 
-rp "NE"
-i "volumeCube.png"
-c "da_EmitterVolume";

menuItem
-l "Select nParticles" 
-rp "W"
-i "out_nParticle.png"
-c "select `listConnections -s 0 -d 1 -t \"nParticle\"`"
-en (size(`listConnections -s 0 -d 1 -t "nParticle"`) > 0);

menuItem
-l "Emitter Manipulators"
-rp "E"
-c "da_ToggleEmitterManipulators"
-cb (`currentCtx` == "ShowManips");

setParent -m ..;

menuItem
-l "HUD Info" 
-c "ToggleParticleCount" 
-cb (1 == $particleCountCheck);

} 
// Define ParticlePoints marking menu
global proc ParticlePoints_MM_May9(){

int $particleCountCheck = `optionVar -q particleCountVisibility`;

menuItem
-l "Lattice..." 
-c "CreateLatticeOptions" 
-rp "NE" 
-i "lattice.png";

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_RiggedCluster" 
-rp "E" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_RiggedClusterUI" 
-rp "E" 
-i "cluster.png";
}

menuItem
-l "Deformers"
-sm 1
-i "bendNLD.png";

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

setParent -m ..;

menuItem
-l "Fields" 
-sm 1
-i "posRadial.png";

menuItem
-l "Air" 
-c "dynExecuteFieldCommands 1 \"air -pos 0 0 0 -m 4 -att 1 -dx 0 -dy 1 -dz 0 -s 5 -iv 1 -iro 1 -vco 0 -es 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posAir.png";

menuItem
-l "Drag" 
-c "dynExecuteFieldCommands 1 \"drag -pos 0 0 0 -m 0.05 -att 1 -dx 0 -dy 0 -dz 0 -ud 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posDrag.png";

menuItem
-l "Gravity" 
-c "dynExecuteFieldCommands 1 \"gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5\"" 
-i "posGravity.png";

menuItem
-l "Newton" 
-c "dynExecuteFieldCommands 1 \"newton -pos 0 0 0 -m 5 -att 1 -mnd 0.2  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posNewton.png";

menuItem
-l "Radial" 
-c "dynExecuteFieldCommands 1 \"radial -pos 0 0 0 -m 5 -att 1 -typ 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posRadial.png";

menuItem
-l "Turbulence" 
-c "dynExecuteFieldCommands 1 \"turbulence -pos 0 0 0 -m 5 -att 1 -f 1 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posTurbulence.png";

menuItem
-l "Uniform" 
-c "dynExecuteFieldCommands 1 \"uniform -pos 0 0 0 -m 5 -att 1 -dx 1 -dy 0 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posUniform.png";

menuItem
-l "Vortex" 
-c "dynExecuteFieldCommands 1 \"vortex -pos 0 0 0 -m 5 -att 1 -ax 0 -ay 1 -az 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVortex.png";

menuItem
-l "Volume Axis" 
-c "dynExecuteFieldCommands 1 \"volumeAxis -pos 0 0 0 -m 5 -att 0 -ia 0 -afc 1 -afx 1 -arx 0 -alx 0 -drs 0 -dx 1 -dy 0 -dz 0 -trb 0 -trs 0.2 -tfx 1 -tfy 1 -tfz 1 -tox 0 -toy 0 -toz 0 -dtr 0  -mxd -1  -vsh cube -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVolumeAxis.png";

setParent -m ..;

menuItem
-l "nConstraint" 
-sm 1
-i "menuIconConstraints.png";

menuItem
-l "Component to Component" 
-c "doCreateNConstraint pointToPoint 0" 
-i "nConstraintComponent.png";

menuItem
-l "Force Field" 
-c "doCreateNConstraint force 0" 
-i "nConstraintForceField.png";

menuItem
-l "Transform Constraint" 
-c "doCreateNConstraint transform 0" 
-i "nConstraintTransform.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "HUD Info" 
-c "ToggleParticleCount" 
-cb (1 == $particleCountCheck);

setParent -m ..;

} 
// Define Particle marking menu
global proc Particle_MM_May9(){

int $particleCountCheck = `optionVar -q particleCountVisibility`;
string $myEmitterShape[] = `listRelatives -s`;
string $myEmitter[] = `listConnections -s 1 -d 0 -t "pointEmitter" $myEmitterShape[0]`;

menuItem
-l "Set Initial State" 
-c "setNClothStartState;" 
-rp "N" 
-i "fluidInitialStateSet.png";

menuItem
-l "Convert to Polygons" 
-c "da_ParticleToMesh" 
-rp "NE" 
-i "nParticleToPolygons.png" ;

menuItem
-l "Convert to Metaballs" 
-c "da_MetaBalls" 
-rp "E" 
-i "da_metaBalls.png";

menuItem
-l "Select Emitter" 
-rp "W"
-i "out_pointEmitter.png"
-c "select `listRelatives -s`; select `listConnections -s 1 -d 0 -t \"pointEmitter\"`"
-en (size($myEmitter) > 0);

menuItem
-l "Add Trails" 
-c "da_ParticleTrails" 
-rp "S" 
-i "MASH_AddTrailsToParticles.png";

menuItem
-l "Create Springs" 
-c "spring -noDuplicate false -minMax true -mnd 0 -mxd 0 -useRestLengthPS true -s 1 -d 0.2 -sfw 1 -efw 1 " 
-rp "SE" 
-i "out_spring.png";

menuItem
-c "CreateSpringOptions" 
-ob 1;

menuItem
-l "Use as Fluid Emitter..." 
-c "EmitFluidFromObjectOptions" 
-i "fluidObjectEmit.png";

if (`about -api` >= 20190000){
menuItem
-l "Sprite Wizard..." 
-c "PartSpriteWizard" 
-i "menuIconParticles.png";
}else{
menuItem
-l "Sprite Wizard..." 
-c "spriteWizardMenu" 
-i "menuIconParticles.png";
}

menuItem
-l "Collision Event..." 
-c "ParticleCollisionEvents" 
-i "collisionEvents.png";

menuItem
-l "Instancer..." 
-c "ParticleInstancerOptions" 
-i "instancer.png";

menuItem
-d 1;

menuItem
-l "Gravity" 
-sm 1;

menuItem
-l "On" 
-c "da_nParticleGravity" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_nParticleNoGravity" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Self Collide" 
-sm 1;

menuItem
-l "On" 
-c "da_nParticleSelfCollide" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_nParticleNoSelfCollide" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Die on Volume Exit" 
-sm 1;

menuItem
-l "On" 
-c "da_nParticleNoLiveOutsideEmitter" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_nParticleLiveOutsideEmitter" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Deformers"
-sm 1
-i "bendNLD.png";

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

menuItem
-d 1;

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_RiggedCluster" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_RiggedClusterUI" 
-i "cluster.png";
}

menuItem
-l "Lattice..." 
-c "CreateLatticeOptions" 
-i "lattice.png";

setParent -m ..;

menuItem
-l "Fields" 
-sm 1
-i "posRadial.png";

menuItem
-l "Air" 
-c "dynExecuteFieldCommands 1 \"air -pos 0 0 0 -m 4 -att 1 -dx 0 -dy 1 -dz 0 -s 5 -iv 1 -iro 1 -vco 0 -es 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posAir.png";

menuItem
-l "Drag" 
-c "dynExecuteFieldCommands 1 \"drag -pos 0 0 0 -m 0.05 -att 1 -dx 0 -dy 0 -dz 0 -ud 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posDrag.png";

menuItem
-l "Gravity" 
-c "dynExecuteFieldCommands 1 \"gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5\"" 
-i "posGravity.png";

menuItem
-l "Newton" 
-c "dynExecuteFieldCommands 1 \"newton -pos 0 0 0 -m 5 -att 1 -mnd 0.2  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posNewton.png";

menuItem
-l "Radial" 
-c "dynExecuteFieldCommands 1 \"radial -pos 0 0 0 -m 5 -att 1 -typ 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posRadial.png";

menuItem
-l "Turbulence" 
-c "dynExecuteFieldCommands 1 \"turbulence -pos 0 0 0 -m 5 -att 1 -f 1 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posTurbulence.png";

menuItem
-l "Uniform" 
-c "dynExecuteFieldCommands 1 \"uniform -pos 0 0 0 -m 5 -att 1 -dx 1 -dy 0 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posUniform.png";

menuItem
-l "Vortex" 
-c "dynExecuteFieldCommands 1 \"vortex -pos 0 0 0 -m 5 -att 1 -ax 0 -ay 1 -az 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVortex.png";

menuItem
-l "Volume Axis" 
-c "dynExecuteFieldCommands 1 \"volumeAxis -pos 0 0 0 -m 5 -att 0 -ia 0 -afc 1 -afx 1 -arx 0 -alx 0 -drs 0 -dx 1 -dy 0 -dz 0 -trb 0 -trs 0.2 -tfx 1 -tfy 1 -tfz 1 -tox 0 -toy 0 -toz 0 -dtr 0  -mxd -1  -vsh cube -vof 0 0 0 -vsw 360 -tsr 0.5 \"" 
-i "posVolumeAxis.png" ;

menuItem
-d 1;

menuItem
-l "Kill Volume" 
-c "da_nParticleKill" 
-i "removeTweaks.png";

setParent -m ..;

menuItem
-l "nConstraint" 
-sm 1
-i "menuIconConstraints.png" ;

menuItem
-l "Component to Component" 
-c "doCreateNConstraint pointToPoint 0" 
-i "nConstraintComponent.png" ;

menuItem
-l "Force Field" 
-c "doCreateNConstraint force 0" 
-i "nConstraintForceField.png" ;

menuItem
-l "Transform Constraint" 
-c "doCreateNConstraint transform 0" 
-i "nConstraintTransform.png" ;

setParent -m ..;

menuItem
-l "Cache"
-sm 1
-i "nClothCacheCreate.png";

menuItem
-l "Create nCache..."
-c "nClothCacheOpt"
-i "nClothCacheCreate.png";

menuItem
-l "Delete nCache"
-c "deleteNclothCache"
-i "nClothCacheDelete.png";

menuItem
-l "Append to Cache"
-c "cacheAppend"
-i "nClothCacheAppend.png";

menuItem
-l "Attach Cache..."
-c "attachCache"
-i "nClothCacheExisting.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "HUD Info" 
-c "ToggleParticleCount" 
-cb (1 == $particleCountCheck);

setParent -m ..;

} 
// Define PhotometricLight marking menu
global proc PhotometricLight_MM_May9(){

menuItem
-l "Light Linking..." 
-c "LightCentricLightLinkingEditor;" 
-rp "W" 
-i "out_defaultLightList.png";

menuItem
-l "Look Through" 
-c "da_LookThruSelected" 
-rp "N" 
-i "snapshot.svg";

menuItem
-l "Persp View" 
-c "dR_DoCmd(\"viewPersp\");" 
-rp "S" 
-i "singlePerspLayout.png";

menuItem
-l "Light Editor..." 
-c "da_LightList" 
-rp "NW" 
-i "light_manager.png";

menuItem
-l "Edit Light..." 
-c "AttributeEditor" 
-rp "SW" 
-i "attributes.png";

menuItem
-l "Temperature" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "Cold" 
-c "da_AiColdLight";

menuItem
-l "Neutral" 
-c "da_AiNeutralLight";

menuItem
-l "Warm" 
-c "da_AiWarmLight";

setParent -m ..;

menuItem
-l "Samples" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "Low" 
-c "da_AiLowSample";

menuItem
-l "High" 
-c "da_AiHighSample";

setParent -m ..;

setParent -m ..;

} 
// Define PolyBevel marking menu
global proc PlacementNode_MM_May9(){
string $myNode[] = `ls -sl`;

menuItem
-l "Connect Place2d Node" 
-c "da_ConnectPlace2dToFile" 
-i "out_place2dTexture.png" 
-en (size($myNode) >= 2) 
-rp "N";

setParent -m ..;
}
// Define PolyBevel marking menu
global proc PointLight_MM_May9(){
int $lightCheck = `renderManip -q -st`;

menuItem
-l "Light Linking..." 
-c "LightCentricLightLinkingEditor;" 
-rp "W" 
-i "out_defaultLightList.png";

menuItem
-l "Light Manipulators" 
-c "da_ToggleLightManipulators" 
-rp "E" 
-cb (1 == $lightCheck);

menuItem
-l "Look Through" 
-c "da_LookThruSelected" 
-rp "N" 
-i "snapshot.svg";

menuItem
-l "Persp View" 
-c "dR_DoCmd(\"viewPersp\");" 
-rp "S" 
-i "singlePerspLayout.png";

menuItem
-l "Light Editor..." 
-c "da_LightList" 
-rp "NW" 
-i "light_manager.png";

menuItem
-l "Edit Light..." 
-c "AttributeEditor" 
-rp "SW" 
-i "attributes.png";

if (`pluginInfo -q -l mtoa`){
string $myArnoldVersion = substituteAllString(`pluginInfo -q -v mtoa`, ".", "");
int $myArnoldIntVersion = `substring $myArnoldVersion 1 3`;

menuItem
-l "Temperature" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "Cold" 
-c "da_AiColdLight";

menuItem
-l "Neutral" 
-c "da_AiNeutralLight";

menuItem
-l "Warm" 
-c "da_AiWarmLight";

setParent -m ..;

menuItem
-l "Normalize" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On" 
-c "da_AiLightNormalize" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_AiNoLightNormalize" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

if ($myArnoldIntVersion >= 320){
menuItem
-l "Visible" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On" 
-c "da_AiPointLightVisible" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Off" 
-c "da_AiNoPointLightVisible" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem 
-d 1;

menuItem
-l "Samples" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "Low" 
-c "da_AiLowSample";

menuItem
-l "High" 
-c "da_AiHighSample";

setParent -m ..;
}
}

setParent -m ..;

}
// Define PolyBevel marking menu
global proc PolyBevel_MM_May9(){
string $mySel[] = `ls -sl -typ "polyBevel3"`;
string $myActualComponents[] = `getAttr ($mySel[0] + ".inputComponents")`;

menuItem
-l "Show Manips" 
-c "setToolTo ShowManips" 
-rp "N" 
-i "showManip.png";

menuItem
-l "Edit Attributes..." 
-c "AttributeEditor" 
-rp "S" 
-i "attributes.png";

if (size($myActualComponents) > 0){
menuItem
-l "Empty Components" 
-c "da_ClearBevelComponents" 
-rp "E" 
-i "RS_disable.png";
}else{
menuItem
-l "Assing Components" 
-c "da_AssingBevelComponents" 
-rp "E" 
-i "enabled.png";
}

menuItem
-l "Chamfer On" 
-c "string $myBevel[] = `ls -sl-typ \"polyBevel3\" -tl 1`; setAttr ($myBevel[0] + \".chamfer\") 1;" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Chamfer Off" 
-c "string $myBevel[] = `ls -sl-typ \"polyBevel3\" -tl 1`; setAttr ($myBevel[0] + \".chamfer\") 0;" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

} 
// Define PolyBifrost marking menu
global proc PolyBifrost_MM_May9(){

int $bifrostHUDCheck = `optionVar -q bifrostHUDVisibility`;

menuItem
-l "Add to Simulation" 
-sm 1
-i "addClip.png" 
-rp "E";

menuItem
-l "Emitter" 
-c "AddBifrostEmitter" 
-rp "E";

menuItem
-l "Collider" 
-c "AddBifrostCollider" 
-rp "NE";

menuItem
-l "Accelerator" 
-c "AddBifrostAccelerator" 
-rp "N";

menuItem
-l "Guide" 
-c "AddBifrostGuide" 
-rp "SE";

menuItem
-l "Emission Region" 
-c "AddBifrostEmissionRegion" 
-rp "S";

menuItem
-l "Foam Mask" 
-c "AddBifrostFoamMask" 
-rp "SW";

menuItem
-l "Kill Field" 
-c "AddBifrostKillField" 
-rp "NW";

menuItem
-l "Motion Field" 
-c "AddBifrostMotionField";

setParent -m ..;

menuItem
-l "Remove from Simulation" 
-i "deleteClip.png" 
-sm 1
-rp "W";

menuItem
-l "Emitter" 
-c "RemoveBifrostEmitter" 
-rp "W";

menuItem
-l "Collider" 
-c "RemoveBifrostCollider" 
-rp "NW";

menuItem
-l "Accelerator" 
-c "RemoveBifrostAccelerator" 
-rp "N";

menuItem
-l "Guide" 
-c "RemoveBifrostGuide" 
-rp "SW";

menuItem
-l "Emission Region" 
-c "RemoveBifrostEmissionRegion" 
-rp "S";

menuItem
-l "Foam Mask" 
-c "RemoveBifrostFoamMask" 
-rp "SE";

setParent -m ..;

menuItem
-l "HUD Info" 
-c "ToggleBifrostHUD" 
-cb (1 == $bifrostHUDCheck);

setParent -m ..;

} 
// Define PolyCreate marking menu
global proc PolyCreate_MM_May9(){

menuItem
-l "Connect to Shape(s)" 
-c "da_ConnectCereation" 
-rp "N" 
-i "da_OneToMany.png";

menuItem
-l "Display IVE" 
-c "ShowManipulators" 
-rp "S" 
-i "materialEditor.png";

setParent -m ..;

} 
// Define PolyCurve marking menu
global proc PolyCurve_MM_May9(){
string $myCurTransform[] = `ls -sl -typ "transform"`;

if (size($myCurTransform) >= 2){
menuItem
-l "Controller Orient" 
-c "da_CtrlOrientConstraint" 
-rp "NW" 
-i "orientConstraint.png";

menuItem
-l "Controller Point" 
-c "da_CtrlPointConstraint" 
-rp "NE" 
-i "posConstraint.png";

menuItem
-l "Controller Aim" 
-c "da_CtrlAimConstraint" 
-rp "SW" 
-i "aimConstraint.png";

menuItem
-l "Controller Parent" 
-c "da_CtrlParentConstraint" 
-rp "N" 
-i "parentConstraint.png";
}

menuItem
-l "Project Curve On Mesh" 
-c "ProjectCurveOnMesh;" 
-rp "E" 
-i "projectCurve_Poly.png";

menuItem
-c "ProjectCurveOnMeshOptions;" 
-ob 1;

menuItem
-l "Split Mesh With Projected Curve" 
-c "SplitMeshWithProjectedCurve" 
-rp "S" 
-i "projectCurveSplit_Poly.png";

menuItem
-c "SplitMeshWithProjectedCurveOptions;" 
-ob 1;

menuItem
-l "Instance Along Curve" 
-c "da_CurveDistributionMash" 
-i "da_instanceAlongCurve.png";

menuItem
-l "Snap Curve to Mesh" 
-c "da_SnapCurveToMesh" 
-i "snapPlane.png";

menuItem
-l "Follicle by Curve Intersection" 
-c "da_FollicleFromCurves" 
-i "out_follicle.png";

menuItem
-l "Make Curves Dynamic" 
-c "makeCurvesDynamic 2 { \"1\", \"0\", \"1\", \"1\", \"0\"}"
-rp "W" 
-i "hairDynamicCurves.png";

menuItem
-d 1;

menuItem
-l "Wire Deformer" 
-c "WireTool" 
-i "addWire.png";

menuItem
-c "WireToolOptions;" 
-ob 1;

menuItem
-l "Curve Warp Deformer" 
-c "createCurveWarp;" 
-i "CurveWarp.png";

menuItem
-l "Curves to nHair" 
-c "da_CurveToNHairs" 
-rp "SE" 
-i "out_pfxHair.png";

setParent -m ..;

} 
// Define PolyCV marking menu
global proc PolyCV_MM_May9(){

menuItem
-l "Component to Component" 
-c "doCreateNConstraint pointToPoint 0" 
-rp "W" 
-i "nConstraintComponent.png";

menuItem
-l "Force Field" 
-c "doCreateNConstraint force 0" 
-rp "SW" 
-i "nConstraintForceField.png";

menuItem
-l "Transform Constraint" 
-c "doCreateNConstraint transform 0" 
-rp "S" 
-i "nConstraintTransform.png";

menuItem
-l "Point to Surface" 
-c "doCreateNConstraint pointToSurface 0" 
-rp "SE" 
-i "nConstraintPointoSurface.png";

menuItem
-l "Slide on Surface" 
-c "doCreateNConstraint slideOnSurface 0" 
-rp "E" 
-i "nConstraintSlideonSurface.png";

setParent -m ..;

} 
// Define PolyEdge marking menu
global proc PolyEdge_MM_May9(){

menuItem
-l "Constraint Point On Poly" 
-c "doCreatePointOnPolyConstraintArgList 2 {   \"0\" ,\"0\" ,\"0\" ,\"1\" ,\"\" ,\"1\" ,\"0\" ,\"0\" ,\"0\" ,\"0\" };" 
-rp "W" 
-i "pointOnPolyConstraint.png";

menuItem
-l "Rivet on Selected Edge" 
-c "da_RivetMashEdge" 
-rp "E" 
-i "MASH_CreateMeshFromPoints.png";

setParent -m ..;

} 
// Define PolyExtrudeEdge marking menu
global proc PolyExtrudeEdge_MM_May9(){
string $mySel[] = `ls -sl -typ "polyExtrudeEdge"`;
string $myActualComponents[] = `getAttr ($mySel[0] + ".inputComponents")`;

menuItem
-l "Show Manips" 
-c "setToolTo ShowManips" 
-rp "N" 
-i "showManip.png";

menuItem
-l "Edit Attributes..." 
-c "AttributeEditor" 
-rp "S" 
-i "attributes.png";

if (size($myActualComponents) > 0){
menuItem
-l "Empty Components" 
-c "da_ClearExtrudeEdgeComponents" 
-rp "E" 
-i "RS_disable.png";
}else{
menuItem
-l "Assing Components" 
-c "da_AssignExtrudeEdgeComponents" 
-rp "E" 
-i "enabled.png";
}

menuItem
-l "Extrude" 
-c "PolyExtrude" 
-rp "NE" 
-i "polyExtrudeFacet.png";

menuItem
-l "Keep Faces Together On" 
-c "string $myExtrudeFace[] = `ls -sl-typ \"polyExtrudeFace\" -tl 1`; setAttr ($myExtrudeFace[0] + \".keepFacesTogether\") 1;" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Keep Faces Together Off" 
-c "string $myExtrudeFace[] = `ls -sl-typ \"polyExtrudeFace\" -tl 1`; setAttr ($myExtrudeFace[0] + \".keepFacesTogether\") 0;" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

} 
// Define PolyExtrudeFace marking menu
global proc PolyExtrudeFace_MM_May9(){
string $mySel[] = `ls -sl -typ "polyExtrudeFace"`;
string $myActualComponents[] = `getAttr ($mySel[0] + ".inputComponents")`;

menuItem
-l "Edit Attributes..." 
-c "AttributeEditor" 
-rp "S" 
-i "attributes.png";

menuItem
-l "Show Manips" 
-c "setToolTo ShowManips" 
-rp "N" 
-i "showManip.png";

menuItem
-l "Extrude" 
-c "PolyExtrude" 
-rp "NE" 
-i "polyExtrudeFacet.png";

if (size($myActualComponents) > 0){
menuItem
-l "Empty Components" 
-c "da_ClearExtrudeComponents" 
-rp "E" 
-i "RS_disable.png";
}else{
menuItem
-l "Assing Components" 
-c "da_AssignExtrudeComponents" 
-rp "E" 
-i "enabled.png";
}

menuItem
-l "Bevel" 
-c "BevelPolygon" 
-rp "NW" 
-i "polyBevel.png";

menuItem
-l "Keep Faces Together On" 
-c "string $myExtrudeFace[] = `ls -sl-typ \"polyExtrudeFace\" -tl 1`; setAttr ($myExtrudeFace[0] + \".keepFacesTogether\") 1;" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Keep Faces Together Off" 
-c "string $myExtrudeFace[] = `ls -sl-typ \"polyExtrudeFace\" -tl 1`; setAttr ($myExtrudeFace[0] + \".keepFacesTogether\") 0;" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

} 
// Define PolyExtrudeVertex marking menu
global proc PolyExtrudeVertex_MM_May9(){
string $mySel[] = `ls -sl -typ "polyExtrudeVertex"`;
string $myActualComponents[] = `getAttr ($mySel[0] + ".inputComponents")`;

menuItem
-l "Show IVE" 
-c "setToolTo ShowManips" 
-rp "N" 
-i "showManip.png";

menuItem
-l "Edit Attributes..." 
-c "AttributeEditor" 
-rp "S" 
-i "attributes.png";

menuItem
-l "Extrude" 
-c "PolyExtrude" 
-rp "NE" 
-i "polyExtrudeFacet.png";

menuItem
-l "Bevel" 
-c "BevelPolygon" 
-rp "NW" 
-i "polyBevel.png";

if (size($myActualComponents) > 0){
menuItem
-l "Empty Components" 
-c "da_ClearExtrudeVertexComponents" 
-rp "E" 
-i "RS_disable.png";
}else{
menuItem
-l "Assing Components" 
-c "da_AssignExtrudeVertexComponents" 
-rp "E" 
-i "enabled.png";
}

setParent -m ..;

} 
// Define PolyExtrude marking menu
global proc PolyExtrude_MM_May9(){
string $mySel[] = `ls -sl -typ "polyExtrudeFace"`;
string $myActualComponents[] = `getAttr ($mySel[0] + ".inputComponents")`;

menuItem
-l "Show Manips" 
-c "setToolTo ShowManips" 
-rp "N" 
-i "showManip.png";

menuItem
-l "Edit Attributes..." 
-c "AttributeEditor" 
-rp "S" 
-i "attributes.png";

menuItem
-l "Extrude" 
-c "PolyExtrude" 
-rp "NE" 
-i "polyExtrudeFacet.png";

if (size($myActualComponents) > 0){
menuItem
-l "Empty Components" 
-c "da_ClearExtrudeComponents" 
-rp "E" 
-i "RS_disable.png";
}else{
menuItem
-l "Assing Components" 
-c "da_AssignExtrudeComponents" 
-rp "E" 
-i "enabled.png";
}

menuItem
-l "Keep Faces Together On" 
-c "string $myExtrudeFace[] = `ls -sl-typ \"polyExtrudeFace\" -tl 1`; setAttr ($myExtrudeFace[0] + \".keepFacesTogether\") 1;" 
-i "rvViewingPipelineOn.png";

menuItem
-l "Keep Faces Together Off" 
-c "string $myExtrudeFace[] = `ls -sl-typ \"polyExtrudeFace\" -tl 1`; setAttr ($myExtrudeFace[0] + \".keepFacesTogether\") 0;" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

} 
// Define PolyFace marking menu
global proc PolyFace_MM_May9(){

menuItem
-l "Rivet on Selected Face" 
-c "da_RivetMashFace" 
-rp "E" 
-i "MASH_CreateMeshFromPoints.png";

menuItem
-l "Constraint Point On Poly" 
-c "doCreatePointOnPolyConstraintArgList 2 {   \"0\" ,\"0\" ,\"0\" ,\"1\" ,\"\" ,\"1\" ,\"0\" ,\"0\" ,\"0\" ,\"0\" };" 
-rp "W" 
-i "pointOnPolyConstraint.png";

setParent -m ..;

} 
// Define PolyLineModifier marking menu
global proc PolyLineModifier_MM_May9(){

menuItem
-l "Set Fill Object" 
-c "setLineModifierFillObject;" 
-rp "N" 
-i "toonLineModifier.png";

setParent -m ..;

} 
// Define PolyMuscle marking menu
global proc PolyMuscle_MM_May9(){
string $myCurTransform[] = `ls -sl -typ "transform"`;

menuItem
-l "Parent Constraint..." 
-c "ParentConstraintOptions" 
-rp "N" 
-i "parentConstraint.png";

menuItem
-l "Aim Constraint..." 
-c "AimConstraintOptions" 
-rp "S" 
-i "aimConstraint.png";

menuItem
-l "Rigged Sculpt Deformer"
-c "da_SculptDeformer"
-rp "E" 
-i "sculpt.png"
-en (size($myCurTransform) == 2);

menuItem
-l "Connect Selected Muscle" 
-c "cMuscle_connectToSystem()"
-rp "W"  
-i "cMuscle_skin_connMus.png";

menuItem
-l "Point Constraint..." 
-c "PointConstraintOptions" 
-rp "NE" 
-i "posConstraint.png";

menuItem
-l "Orient Constraint..." 
-c "OrientConstraintOptions" 
-rp "NW" 
-i "orientConstraint.png";

setParent -m ..;

} 
// Define PolynCloth marking menu
global proc PolynCloth_MM_May9(){

menuItem
-l "Connect Mesh" 
-c "da_ClothInputMesh" 
-rp "N" 
-i "da_connection_out.png";

setParent -m ..;

} 
// Define PolyPaintFX marking menu
global proc PolyPaintFX_MM_May9(){

menuItem
-l "Make Collide" 
-c "makeCollidePaintEffects;" 
-rp "N" 
-i "hairCollide.png";

menuItem
-l "Create Modifier" 
-c "createLineModifier;" 
-rp "S" 
-i "toonLineModifier.png";

setParent -m ..;

} 
// Define PolyPoly marking menu
global proc PolyPoly_MM_May9(){

string $mySelShape[] = `listRelatives -f -s -typ "mesh"`;
int $myDispSetting = `getAttr ($mySelShape[0] + ".showDisplacements")`;
int $mySubdivMode = `getAttr ($mySelShape[0] + ".smoothDrawType")`;
int $myUVSmoothMode = `getAttr ($mySelShape[0] + ".osdFvarBoundary")`;

string $myCurTransform[] = `ls -sl -typ "transform"`;

menuItem
-l "Multi Cut"
-c "dR_multiCutTool;"
-rp "W"
-i "multiCut_NEX32.png";

menuItem
-l "Booleans"
-sm 1
-rp "SW"
-i "polyBooleansIntersection.png";

menuItem
-l "Live Union"
-c "da_interactiveUnion"
-rp "NW"
-i "polyBooleansUnion.png";

menuItem
-l "Live Difference"
-c "da_interactiveDifference"
-rp "SW"
-i "polyBooleansDifference.png";

menuItem
-l "Live Intersection"
-c "da_interactiveIntersection"
-rp "W"
-i "polyBooleansIntersection.png";

menuItem
-l "Original and Intersect"
-c "da_BooleanFullIntersect"
-rp "S"
-i "da_booleanFullIntersect.png";

setParent -m ..;

menuItem
-l "Cut by Plane..."
-c "da_PlaneCutter"
-rp "S"
-i "polyCut.png"
-en (size($myCurTransform) == 2);

menuItem
-l "Smart Combine"
-c "da_PolyCombine"
-rp "NE"
-i "polyUnite.png";

menuItem
-l "Smart Separate" 
-c "da_BatchSeparate" 
-rp "NW" 
-i "polySeparate.png";

menuItem
-l "Target Weld"
-c "MergeVertexTool;da_BackToObjectMode;da_SelectMulti"
-rp "SE"
-i "weld_NEX32.png";

menuItem
-l "Brushes"
-sm 1
-rp "N"
-i "out_brush.png";

if (!`optionVar -q deformationUseComponentTags`){
menuItem
-l "Paint Set Membership..."
-c "PaintSetMembershipToolOptions"
-i "paintSetMembership.png";
}

menuItem
-l "Paint Vertex Color..."
-c "PaintVertexColorToolOptions"
-i "paintVertexColour.png";

menuItem
-l "Paint Effects..."
-c "PaintOnPaintableObjects;MakePaintable;PaintEffectsToolOptions"
-rp "SW"
-i "paintEffectsTool.png";

menuItem
-l "Paint Skin Weights..."
-c "da_OpenPaintSkinTool"
-rp "NW"
-i "paintSkinWeights.png";

menuItem
-l "Legacy Sculpt..."
-c "SculptGeometryToolOptions"
-rp "W"
-i "sculptPull.png";

menuItem
-l "Sculpt Geometry..."
-c "ShowMeshSculptToolOptions" 
-rp "N"
-i "Sculpt.png";

menuItem
-l "3D Paint Tool..."
-c "Art3dPaintToolOptions;\nDisplayShadedAndTextured"
-rp "NE"
-i "art3dPaint.png";

menuItem
-l "Paint Hair Follicle..."
-c "paintHairTool 1"
-rp "E"
-i "hairPaint.png";

menuItem
-l "Paint Attributes..."
-c "ArtPaintAttrToolOptions"
-rp "SE"
-i "artAttr.png";

setParent -m ..;

menuItem
-l "Extrude"
-c "PolyExtrude"
-rp "E"
-i "polyExtrudeFacet.png";

menuItem
-l "Quick Rig..."
-c "QuickRigEditor"
-i "QR_QuickRigTool.png";

menuItem
-l "Connect Shapes..."
-c "da_ConnectShapeUI"
-i "da_OneToMany.png";

menuItem
-d 1;

menuItem
-l "MASH"
-sm 1
-i "MASH_CreateNetwork.png";

menuItem
-l "Create MASH Network..."
-c "MASHcreateOptions"
-i "MASH_CreateNetwork.png";

menuItem
-l "Voxelize in a Volume..."
-c "da_MashVoxelizer"
-i "ae_MASH_Explode.png"
-en (size($myCurTransform) == 2);

menuItem
-l "Scatter on a Surface..."
-c "da_SurfaceScatterMash"
-i "out_MASH_Points.png"
-en (size($myCurTransform) == 2);

setParent -m ..;

menuItem
-l "Edit"
-sm 1
-i "polyMesh.png";

menuItem
-l "Fill Hole"
-c "FillHole"
-i "polyCloseBorder.png";

menuItem
-l "Transfer Attributes..."
-c "performTransferAttributes 1"
-i "polyTransferAttributes.png";

menuItem
-d 1;

menuItem
-l "Clean Non Mainfold"
-c "da_CleanNonmainfold"
-i "polyDisc.png";

setParent -m ..;

menuItem
-l "Component Display"
-sm 1
-i "RS_visible.png";

menuItem
-l "Vertex Normals"
-c "ToggleVertexNormalDisplay"
-i "da_edgeNormals.png";

menuItem
-l "Vertex IDs"
-c "ToggleVertIDs"
-i "reorderIDs.png";

menuItem
-l "Face Normals"
-c "ToggleFaceNormalDisplay"
-i "polyNormalsConform.png";

menuItem
-l "Border Edges"
-c "ToggleBorderEdges;"
-i "da_borderEdge.png";

menuItem
-l "Soft Edge"
-c "int $g_cond[1]=`polyOptions -q -ae`; if ($g_cond[0]) polyOptions -se; else polyOptions -ae;"
-i "polyDuplicateEdgeLoop.png";

menuItem
-d 1;

menuItem
-l "Normals Size..."
-c "ChangeNormalSize"
-i "resizeWindow.png";

menuItem
-l "Color Set Editor..."
-c "OpenColorSetEditor"
-i "polyColorSetEditor.png";

setParent -m ..;

menuItem
-l "Convert"
-sm 1
-i "da_PolygonsToNurbs.png";

menuItem
-l "Poly to NURBS"
-c "da_PolyToNurbs"
-i "da_PolygonsToNurbs.png";

menuItem
-l "Instance to Object"
-c "ConvertInstanceToObject"
-i "instanceToObject.png";

setParent -m ..;

menuItem
-l "Deformers"
-sm 1
-i "bendNLD.png";

if (!`optionVar -q deformationUseComponentTags`){
menuItem
-l "Deformer Set Editor..."
-c "DeformerSetEditor"
-i "da_deformerSetEditor.png";

menuItem
-d 1;
}

menuItem
-l "Blend Shape"
-sm 1
-i "blendShape.png";

menuItem
-l "Create"
-c "CreateBlendShape"
-i "blendShape.png";

menuItem
-l "Add Shape"
-c "AddBlendShape;"
-i "ts-add.png";

setParent -m ..;

menuItem
-l "Nonlinear"
-sm 1
-i "bendNLD.png";

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

setParent -m ..;

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_PaintableRiggedCluster" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_PaintableRiggedClusterUI" 
-i "cluster.png";
}

menuItem
-l "Rigged Sculpt"
-c "da_SculptDeformer"
-i "sculpt.png"
-en (size($myCurTransform) == 2);

menuItem
-l "Lattice..."
-c "CreateLatticeOptions"
-i "lattice.png";

menuItem
-l "Delta Mush"
-c "DeltaMush"
-i "da_deltaMush.png";

menuItem
-l "Tension"
-c "Tension"
-i "da_tensionDef.png";

if (`about -api` >= 20220000){
menuItem
-l "Solidify"
-c "Solidify"
-i "polyPlatonicSolid.png";
}

menuItem
-l "Jiggle"
-c "MASHaddJiggleDeformer"
-i "MASH_CreateJiggleDeformer.png";

menuItem
-l "Blend"
-c "da_MashBlendDeformer"
-i "MASH_CreateBlendDeformer.png";

menuItem
-l "Add Membrane Collider"
-c "da_Auto_MembraneCollider"
-i "da_membrane.png"
-en (size($myCurTransform) == 2);

menuItem
-l "Delta Wrap..."
-c "da_DeltaWrap"
-i "wrap.png"
-en (size($myCurTransform) == 2);

menuItem
-l "ShrinkWrap..."
-c "CreateShrinkWrapOptions;"
-i "shrinkwrap.png";

menuItem
-l "UV Based"
-c "da_DeformerUV"
-i "polyUnfoldUVs.png";

menuItem
-l "Texture Deformer"
-c "CreateTextureDeformer"
-i "textureDeformer.png";

setParent -m ..;

menuItem
-l "Skin/Muscle"
-sm 1
-i "smoothSkin.png";

menuItem
-l "Muscle Multi Collide"
-c "cMuscleMultiCollide_setup(); "
-i "cMuscle_multi_apply.png";

menuItem
-d 1;

menuItem
-l "Add Influence to Skin..."
-c "AddInfluenceOptions"
-i "addWrapInfluence.png";

menuItem
-l "Remove Influence to Skin"
-c "RemoveInfluence;"
-i "removeWrapInfluence.png";

menuItem
-l "Batch Copy Skin Weights..."
-c "da_BatchSkinTransfertUI"
-i "copySkinWeight.png";

menuItem
-l "Substitute Geometry..."
-c "SubstituteGeometryOptions"
-i "substGeometry.png"
-en (size($myCurTransform) == 2);

menuItem
-l "Bake Deformers to Skin..."
-c "BakeDeformerTool"
-i "out_baked.png";

menuItem
-l "Unbind Skin..."
-c "DetachSkinOptions"
-i "detachSkin.png";

setParent -m ..;

menuItem
-l "UV Mapping"
-sm 1
-i "polyUnfoldUVs.png";

menuItem
-l "Select All"
-c "da_SelectUV"
-i "polyGridUV.png";

menuItem
-d 1;

menuItem
-l "Match UV"
-c "da_MatchUV"
-i "polyMatchUV.png";

menuItem
-l "Match Shells Scale" 
-c "uvTkDoGetTexelDensity;uvTkDoSetTexelDensity" 
-i "polyScaleUV.png";

menuItem
-l "3D Grab UV..."
-c "SetMeshGrabUVTool; da_OpenToolSettings"
-i "UV_3D_Grab_Brush.png";

menuItem
-d 1;

menuItem
-l "Automatic..."
-c "performPolyAutoProj 1"
-i "polyAutoProj.png";

menuItem
-l "Spherical"
-c "performPolyProjectionArgList \"1\" {\"0\", \"Spherical\", \"ls -selection\", \"0\"} \"\";"
-i "polySphereProj.png";

menuItem
-l "Per Face..."
-c "da_MapFacesUV"
-i "polyNormalProj.png";

menuItem
-l "Mono Shell"
-c "da_SingleShellMapping"
-i "UVEditorShell.png";

menuItem
-d 1;

menuItem
-l "Auto Unfold..." 
-c "da_AutoUnfold" 
-i "UV_Unfold_Brush.png";

setParent -m ..;

menuItem
-l "Normals"
-sm 1
-i "polyNormalsPropagate.png";

menuItem
-l "Match"
-c "da_MatchNormals"
-i "polyNormalSetToFace.png";

menuItem
-l "Conform"
-c "ConformPolygonNormals;"
-i "polyNormalsConform.png";

menuItem
-l "Reverse"
-c "ReversePolygonNormals"
-i "polyNormal.png";

menuItem
-l "Unlock and Fix"
-c "da_UnlockAndFixNormals"
-i "polyNormalUnlock.png";

menuItem
-l "Set Soften Edge Angle..."
-c "PolygonSoftenHardenOptions"
-i "polySoftEdge.png";

menuItem
-d 1;

menuItem
-l "Double Side On"
-c "da_DoubleSideOn"
-i "polyToggleProxy.png";

menuItem
-l "Double Side Off"
-c "da_DoubleSideOff"
-i "da_polyToggleProxy.png";

setParent -m ..;

menuItem
-l "Shading"
-sm 1
-i "render_adskMaterial.png";

$item = "";

$menuAssign = `menuItem -l (uiRes("m_buildShaderMenus.kAssignExistingMaterial")) -sm true -i "out_shaderList.png"`;
menuItem 
-edit 
-postMenuCommand ("buildAssignShaderMenu " + $menuAssign + " \""+$item+"\"") $menuAssign;
setParent -menu ..;

menuItem
-l "Assign New Material..."
-c "createAssignNewMaterialTreeLister \"\""
-i "render_adskMaterial.png";

menuItem
-d 1;

menuItem
-l "Assign Toon Shader"
-c "assignToonShader \"threeToneBrightness\""
-i "toonBrightness3.png";

menuItem
-l "Add Toon Outline"
-c "assignNewPfxToon"
-i "toonAddOutline.png";

menuItem
-l "Remove Toon Outlines"
-c "removePfxToonOutlines"
-i "toonRemoveOutline.png";

if (`pluginInfo -q -l mtoa`){
string $myArnoldVersion = substituteAllString(`pluginInfo -q -v mtoa`, ".", "");
int $myArnoldIntVersion = `substring $myArnoldVersion 1 3`;

menuItem
-d 1;

menuItem
-l "Arnold Light to Texture"
-c "da_AiRenderToTexture"
-i "RenderToTextureShelf.png";

menuItem
-l "Mesh Light"
-c "da_AiMeshesLight"
-i "MeshLightShelf.png";

menuItem
-l "Export Vertex Colors"
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On"
-c "da_AiExportVertexColors"
-i "rvViewingPipelineOn.png";

menuItem
-l "Off"
-c "da_AiNoExportVertexColors"
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Arnold Subdivision"
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On/Update"
-c "da_ArnoldSubdiv"
-i "rvViewingPipelineOn.png";

menuItem
-l "Off"
-c "da_NoArnoldSubdiv"
-i "rvViewingPipelineOff.png";

setParent -m ..;

if ($myArnoldIntVersion < 320){
menuItem
-l "Opaque Mesh"
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On"
-c "da_AiOpaque"
-i "rvViewingPipelineOn.png";

menuItem
-l "Off"
-c "da_AiNoOpaque"
-i "rvViewingPipelineOff.png";

setParent -m ..;
}
}

setParent -m ..;

menuItem
-l "Dynamics"
-sm 1
-i "out_nucleus.png";

menuItem
-l "Create nCloth"
-c "nClothCreate"
-i "nClothCreate.png";

menuItem
-l "Create nHair..."
-c "CreateHairOptions"
-i "hairCreate.png";

menuItem
-l "Create Passive Collider"
-c "nClothMakeCollide"
-i "nClothCreatePassive.png";

menuItem
-l "Emit nParticle..."
-c "NEmitFromObjectOptions"
-i "emitter.png";

menuItem
-l "Fill Object With Particle..."
-c "ParticleFillOptions"
-i "nPartfillObject.png";

menuItem
-l "Create nSoft Body..."
-c "CreateNSoftBodyOptions"
-i "soft.png";

menuItem
-l "Set Initial State"
-c "setNClothStartState;"
-i "fluidInitialStateSet.png";

menuItem
-d 1;

menuItem
-l "MASH Bullet Dynamics" 
-c "AddShellDynamics" 
-i "MASH_ShellDynamics.png";

menuItem
-d 1;

menuItem
-l "Create Active Rigid Body"
-c "rigidBody -active -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none "
-i "rigid.png";

menuItem
-l "Create Passive Rigid Body"
-c "rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none "
-i "rigidPassive.png";

menuItem
-l "Constrain"
-sm 1
-i "constraint.png";

menuItem
-l "Pin"
-c "constrain -pin -i 0 "
-i "constraint.png";

menuItem
-l "Hinge"
-c "constrain -hinge -o 0 0 0 "
-i "constraint.png";

menuItem
-l "Spring"
-c "constrain -spring -st 5 -d 0.1 "
-i "constraint.png";

setParent -m ..;

menuItem
-l "Set Initial State"
-c "setDynStartState;"
-i "fluidInitialStateSet.png";

menuItem
-d 1;

menuItem
-l "Emit Fluid From Object..."
-c "EmitFluidFromObjectOptions"
-i "fluidObjectEmit.png";

menuItem
-l "Make Fluid Collide"
-c "MakeFluidCollide"
-i "fluidCollide.png";

menuItem 
-d 1;

menuItem
-l "Fields"
-sm 1
-i "posRadial.png";

menuItem
-l "Air"
-c "dynExecuteFieldCommands 1 \"air -pos 0 0 0 -m 4 -att 1 -dx 0 -dy 1 -dz 0 -s 5 -iv 1 -iro 1 -vco 0 -es 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posAir.png";

menuItem
-l "Drag"
-c "dynExecuteFieldCommands 1 \"drag -pos 0 0 0 -m 0.05 -att 1 -dx 0 -dy 0 -dz 0 -ud 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posDrag.png";

menuItem
-l "Gravity"
-c "dynExecuteFieldCommands 1 \"gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5\""
-i "posGravity.png";

menuItem
-l "Newton"
-c "dynExecuteFieldCommands 1 \"newton -pos 0 0 0 -m 5 -att 1 -mnd 0.2  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posNewton.png";

menuItem
-l "Radial"
-c "dynExecuteFieldCommands 1 \"radial -pos 0 0 0 -m 5 -att 1 -typ 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posRadial.png";

menuItem
-l "Turbulence"
-c "dynExecuteFieldCommands 1 \"turbulence -pos 0 0 0 -m 5 -att 1 -f 1 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posTurbulence.png";

menuItem
-l "Uniform"
-c "dynExecuteFieldCommands 1 \"uniform -pos 0 0 0 -m 5 -att 1 -dx 1 -dy 0 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posUniform.png";

menuItem
-l "Vortex"
-c "dynExecuteFieldCommands 1 \"vortex -pos 0 0 0 -m 5 -att 1 -ax 0 -ay 1 -az 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posVortex.png";

menuItem
-l "Volume Axis"
-c "dynExecuteFieldCommands 1 \"volumeAxis -pos 0 0 0 -m 5 -att 0 -ia 0 -afc 1 -afx 1 -arx 0 -alx 0 -drs 0 -dx 1 -dy 0 -dz 0 -trb 0 -trs 0.2 -tfx 1 -tfy 1 -tfz 1 -tox 0 -toy 0 -toz 0 -dtr 0  -mxd -1  -vsh cube -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posVolumeAxis.png";

setParent -m ..;

if (`pluginInfo -q -l bifrostshellnode`){
menuItem
-d 1;

menuItem
-l "Create Bifrost Aero"
-c "CreateBifrostAero"
-i "out_bifrostShape.png";

menuItem
-l "Create Bifrost Liquid"
-c "CreateBifrostLiquid"
-i "out_bifrostShape.png";
}

setParent -m ..;

menuItem
-l "Cache"
-sm 1
-i "nClothCacheCreate.png";

menuItem
-l "Create nCache..."
-c "nClothCacheOpt"
-i "nClothCacheCreate.png";

menuItem
-l "Delete nCache"
-c "deleteNclothCache"
-i "nClothCacheDelete.png";

menuItem
-l "Append to Cache"
-c "cacheAppend"
-i "nClothCacheAppend.png";

menuItem
-l "Attach Cache..."
-c "attachCache"
-i "nClothCacheExisting.png";

menuItem
-d 1;

menuItem
-l "Create Geometry Cache..."
-c "geometryCacheOpt"
-i "createCache.png";

menuItem
-l "Delete Geometry Cache..."
-c "geometryDeleteCacheOpt"
-i "deleteCache.png";

menuItem
-d 1;

menuItem
-l "Export to GPU Cache..."
-c "GpuCacheExportSelectionOptions"
-i "greasePencilExport.png";

setParent -m ..;

menuItem
-l "XGen"
-sm 1
-i "xgDEditor.png";

menuItem
-l "Create Interactive Groom..."
-c "XgmCreateInteractiveGroomSplinesOption"
-i "xgIG_creation.png";

menuItem
-l "Interactive Brush..."
-c "XgmSetCombBrushToolOption"
-i "xgIG_comb.png";

menuItem
-l "Interactive Groom Editor"
-c "XgCreateIgSplineEditor"
-i "xgIG_editor.png";

menuItem
-d 1;

menuItem
-l "Create Description..."
-c "XgCreateDescription"
-i "xgCreateDescription.png";

menuItem
-l "XGen Editor..."
-c "if (!`pluginInfo -q -loaded xgenToolkit`) loadPlugin xgenToolkit.mll;XgCreateDescriptionEditor"
-i "xgDEditor.png";

menuItem
-l "XGen Library..."
-c "XGenLibraryWindow"
-i "xgLibrary.png";

menuItem
-d 1;

menuItem
-l "HUD Info"
-c "ToggleXGenDisplayHUD"
-cb (`optionVar -q xgenHUDVisibility`);

setParent -m ..;

menuItem
-l "Select"
-sm 1
-i "aselect.png";

menuItem
-l "All Vertices"
-c "ConvertSelectionToVertices"
-i "vertex_NEX.png";

menuItem
-d 1;

menuItem
-l "Triangle"
-c "da_SelectTriangle"
-i "polyTriangulate.png";

menuItem
-l "Nsided"
-c "da_SelectNsided"
-i "polyCreateFacet.png";

menuItem
-d 1;

menuItem
-l "Hard Edges"
-c "da_EdgeHard"
-i "da_hardEdge.png";

menuItem
-l "Soft Edges"
-c "da_EdgeSoft"
-i "da_softEdge.png";

menuItem
-l "Border Edges"
-c "da_EdgeBorder"
-i "da_borderEdge.png";

setParent -m ..;

menuItem
-d 1;

menuItem 
-l "High Quality Smooth" 
-c "da_HighQualitySmoothMeshToggle"
-cb ($mySubdivMode == 3)
-en ($myDispSetting == 0);

menuItem 
-l "Displacement Preview" 
-c "da_HighQualityDispMeshToggle"
-cb ($myDispSetting);

menuItem 
-l "Smooth UV Borders" 
-c "da_SmoothUV"
-cb ($myUVSmoothMode == 2);

setParent -m ..;

} 
// Define PolySmartCollide marking menu
global proc PolySmartCollide_MM_May9(){

menuItem
-l "Connect selected Muscle Smart Collide nodes" 
-c "cMuscleSmartCollide_connectSCToSystem(1)" 
-rp "N" 
-i "cMuscle_smart_connect.png";

setParent -m ..;

} 
// Define PolyVertex marking menu
global proc PolyVertex_MM_May9(){

menuItem
-l "Transform nConstraint" 
-c "performCreateDynamicConstraint 0 \"transform\";" 
-rp "N" 
-i "nConstraintTransform.png";

menuItem
-l "Point to Surface" 
-c "doCreateNConstraint pointToSurface 0" 
-rp "S" 
-i "nConstraintPointoSurface.png";

menuItem
-l "Slide on Surface" 
-c "doCreateNConstraint slideOnSurface 0" 
-rp "SE" 
-i "nConstraintSlideonSurface.png";

menuItem
-l "Rivet On Selected Vertex" 
-c "da_RivetMashVertex" 
-rp "E" 
-i "MASH_CreateMeshFromPoints.png";

menuItem
-l "Constraint Point On Poly" 
-c "doCreatePointOnPolyConstraintArgList 2 {   \"0\" ,\"0\" ,\"0\" ,\"1\" ,\"\" ,\"1\" ,\"0\" ,\"0\" ,\"0\" ,\"0\" };" 
-rp "W" 
-i "pointOnPolyConstraint.png";

setParent -m ..;

} 
// Define Poly marking menu
global proc Poly_MM_May9(){

string $myCurTransform[] = `ls -sl -typ "transform"`;
string $mySelShape[] = `listRelatives -f -s -typ "mesh"`;

int $myDispSetting = `getAttr ($mySelShape[0] + ".showDisplacements")`;
int $mySubdivMode = `getAttr ($mySelShape[0] + ".smoothDrawType")`;
int $myUVSmoothMode = `getAttr ($mySelShape[0] + ".osdFvarBoundary")`;

menuItem
-l "Multi Cut"
-c "dR_multiCutTool;"
-rp "W"
-i "multiCut_NEX32.png";

menuItem
-l "Smart Separate" 
-c "da_PolySeparate" 
-rp "NE" 
-i "polySeparate.png";

menuItem
-l "Target Weld"
-c "MergeVertexTool;da_BackToObjectMode;da_SelectMulti"
-rp "SE"
-i "weld_NEX32.png";

menuItem
-l "Brushes"
-sm 1
-rp "N"
-i "out_brush.png";

if (!`optionVar -q deformationUseComponentTags`){
menuItem
-l "Paint Set Membership..."
-c "PaintSetMembershipToolOptions"
-i "paintSetMembership.png";
}

menuItem
-l "Paint Vertex Color..."
-c "PaintVertexColorToolOptions"
-i "paintVertexColour.png";

menuItem
-l "Paint Attributes..."
-c "ArtPaintAttrToolOptions"
-rp "SE"
-i "artAttr.png";

menuItem
-l "Paint Hair Follicle..."
-c "paintHairTool 1"
-rp "E"
-i "hairPaint.png";

menuItem
-l "Paint Skin Weights..."
-c "da_OpenPaintSkinTool"
-rp "NW"
-i "paintSkinWeights.png";

menuItem
-l "Legacy Sculpt..."
-c "SculptGeometryToolOptions"
-rp "W"
-i "sculptPull.png";

menuItem
-l "Paint Effects..."
-c "PaintOnPaintableObjects;MakePaintable;PaintEffectsToolOptions"
-rp "SW"
-i "paintEffectsTool.png";

menuItem
-l "Sculpt Geometry..."
-c "ShowMeshSculptToolOptions" 
-rp "N"
-i "Sculpt.png";

menuItem
-l "3D Paint Tool..."
-c "Art3dPaintToolOptions;\nDisplayShadedAndTextured"
-rp "NE"
-i "art3dPaint.png";

setParent -m ..;

menuItem
-l "Quad Draw"
-c "dR_quadDrawTool;"
-rp "SW"
-i "quadDraw_NEX32.png";

menuItem
-l "Extrude"
-c "PolyExtrude"
-rp "E"
-i "polyExtrudeFacet.png";

menuItem
-l "Auto Bevel"
-c "da_AutoBevel"
-rp "NW"
-i "polyBevel.png";

menuItem
-l "Smooth"
-c "da_Subdivision"
-rp "S"
-i "polySmooth.png";

menuItem
-l "Quick Rig..."
-c "QuickRigEditor"
-i "QR_QuickRigTool.png";

menuItem
-l "Input Operations..." 
-c "da_ListInputOperations" 
-i "out_list.png";

menuItem
-l "Create MASH Network..."
-c "MASHcreateOptions"
-i "MASH_CreateNetwork.png";

menuItem 
-d 1;

menuItem
-l "Edit"
-sm 1
-i "polyMesh.png";

menuItem
-l "Advance Smooth Proxy"
-c "da_SmoothProxy"
-i "polySmoothProxy.png";

menuItem
-l "Append to Polygon"
-c "AppendToPolygonTool"
-i "polyAppendFacet.png";

menuItem
-l "Fill Hole"
-c "FillHole"
-i "polyCloseBorder.png";

menuItem
-l "Bridge"
-c "performBridgeOrFill"
-i "polyBridge.png";

menuItem
-l "Shell Proxy"
-c "da_shell"
-i "da_ShellProxy.png";

menuItem
-l "Remove Crease"
-c "polyCrease -op 2"
-i "trash.png";

menuItem
-d 1;

menuItem
-l "Clean Topology"
-c "da_PolyDivision"
-i "polyCleanup.png";

menuItem
-l "Clean Non Mainfold"
-c "da_CleanNonmainfold"
-i "polyDisc.png";

if (`about -api` >= 20200000){
menuItem
-l "Remesh"
-c "polyRemesh"
-i "polyRemesh.png";

menuItem
-l "Retopo"
-c "polyRetopo"
-i "polyRetopo.png";
}

menuItem
-d 1;

menuItem
-l "Mirror"
-c "MirrorPolygonGeometry"
-i "polyMirrorGeometry.png";

menuItem
-l "Mirror Cut..."
-c "da_MirrorCutSelector"
-i "polyMirrorCut.png";

setParent -m ..;

menuItem
-l "Component Display"
-sm 1
-i "RS_visible.png";

menuItem
-d 1;

menuItem
-l "Vertex Normals"
-c "ToggleVertexNormalDisplay"
-i "da_edgeNormals.png";

menuItem
-l "Vertex IDs"
-c "ToggleVertIDs"
-i "reorderIDs.png";

menuItem
-l "Face Normals"
-c "ToggleFaceNormalDisplay"
-i "polyNormalsConform.png";

menuItem
-l "Border Edges"
-c "ToggleBorderEdges;"
-i "da_borderEdge.png";

menuItem
-l "Soft Edge"
-c "int $g_cond[1]=`polyOptions -q -ae`; if ($g_cond[0]) polyOptions -se; else polyOptions -ae;"
-i "polyDuplicateEdgeLoop.png";

menuItem
-d 1;

menuItem
-l "Normals Size..."
-c "ChangeNormalSize"
-i "resizeWindow.png";

menuItem
-l "Color Set Editor..."
-c "OpenColorSetEditor"
-i "polyColorSetEditor.png";

setParent -m ..;

menuItem
-l "Convert"
-sm 1
-i "da_PolygonsToNurbs.png";

menuItem
-l "Poly to NURBS"
-c "da_PolyToNurbs"
-i "da_PolygonsToNurbs.png";

menuItem
-l "Instance to Object"
-c "ConvertInstanceToObject"
-i "instanceToObject.png";

setParent -m ..;

menuItem
-l "Deformers"
-sm 1
-i "bendNLD.png";

if (!`optionVar -q deformationUseComponentTags`){
menuItem
-l "Deformer Set Editor..."
-c "DeformerSetEditor"
-i "da_deformerSetEditor.png";

menuItem
-d 1;
}

menuItem
-l "Nonlinear"
-sm 1
-i "bendNLD.png";

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

setParent -m ..;

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_PaintableRiggedCluster" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_PaintableRiggedClusterUI" 
-i "cluster.png";
}

menuItem
-l "Rigged Sculpt"
-c "da_SculptDeformer"
-i "sculpt.png";

menuItem 
-l "Flow Path Object..."
-c "FlowPathObjectOptions"
-i "flowPathObj.png"
-en (size(`listConnections -s 1 -d 0 ($myCurTransform[0] + ".tx")`));

menuItem
-l "Lattice..."
-c "CreateLatticeOptions"
-i "lattice.png";

menuItem
-l "Delta Mush"
-c "DeltaMush"
-i "da_deltaMush.png";

menuItem
-l "Tension"
-c "Tension"
-i "da_tensionDef.png";

if (`about -api` >= 20220000){
menuItem
-l "Solidify"
-c "Solidify"
-i "polyPlatonicSolid.png";
}

menuItem
-l "Jiggle"
-c "MASHaddJiggleDeformer"
-i "MASH_CreateJiggleDeformer.png";

menuItem
-l "Blend"
-c "MASHaddBlendDeformer"
-i "MASH_CreateBlendDeformer.png";

menuItem
-l "Membrane"
-c "createMembrane"
-i "da_membrane.png";

menuItem
-l "Texture Deformer"
-c "CreateTextureDeformer"
-i "textureDeformer.png";

menuItem
-d 1;

menuItem
-l "Create nCloth as Deformer"
-c "da_ClothAsDeformer"
-i "nClothCreate.png";

menuItem
-l "Paint nCloth Input Attract"
-c "setNClothMapType(\"inputAttract\",\"\",1); artAttrNClothToolScript 3 inputAttract"
-i "nClothPaintPerVertex.png";

setParent -m ..;

menuItem
-l "Skin/Muscle"
-sm 1
-i "smoothSkin.png";

menuItem
-l "Apply Muscle System to Skin"
-c "cMuscle_makeMuscleSystem(1)"
-i "cMuscle_skin_apply.png";

menuItem
-l "Default Muscle Weights..."
-c "cMuscleWeightDefaultUI()"
-i "cMuscle_skin_applyDefault.png";

menuItem
-l "Paint Muscle Weights..."
-c "cMusclePaint()"
-i "cMuscle_skin_paint.png";

menuItem
-l "Smooth Skin to Muscle System..."
-c "cMuscleConvertSkin()"
-i "cMuscle_skin_convert.png";

menuItem
-d 1;

menuItem
-l "Bake Deformers to Skin..."
-c "BakeDeformerTool"
-i "out_baked.png";

menuItem
-l "Unbind Skin..."
-c "DetachSkinOptions"
-i "detachSkin.png";

setParent -m ..;

menuItem
-l "UV Mapping"
-sm 1
-i "polyUnfoldUVs.png";

menuItem
-l "Select All"
-c "da_SelectUV"
-i "polyGridUV.png";

menuItem
-d 1;

menuItem
-l "Match Shells Scale" 
-c "uvTkDoGetTexelDensity;uvTkDoSetTexelDensity" 
-i "polyScaleUV.png";

menuItem
-l "3D Cut and Sew"
-c "SetCutSewUVTool"
-i "CutSewUVTool.png";

menuItem
-l "3D Grab UV..."
-c "SetMeshGrabUVTool; da_OpenToolSettings"
-i "UV_3D_Grab_Brush.png";

menuItem
-d 1;

menuItem
-l "Automatic..."
-c "performPolyAutoProj 1"
-i "polyAutoProj.png";

menuItem
-l "Spherical"
-c "performPolyProjectionArgList \"1\" {\"0\", \"Spherical\", \"ls -selection\", \"0\"} \"\";"
-i "polySphereProj.png";

menuItem
-l "Per Face..."
-c "da_MapFacesUV"
-i "polyNormalProj.png";

menuItem
-l "Mono Shell"
-c "da_SingleShellMapping"
-i "UVEditorShell.png";

menuItem
-d 1;

menuItem
-l "Auto Seams..."
-c "performPolyAutoSeamUV 1"
-i "polyAutoSeams.png";

menuItem
-l "Auto Unfold..." 
-c "da_AutoUnfold" 
-i "UV_Unfold_Brush.png";

setParent -m ..;

menuItem
-l "Normals"
-sm 1
-i "polyNormalsPropagate.png";

menuItem
-l "Conform"
-c "ConformPolygonNormals;"
-i "polyNormalsConform.png";

menuItem
-l "Reverse"
-c "ReversePolygonNormals"
-i "polyNormal.png";

menuItem
-l "Unlock and Fix"
-c "da_UnlockAndFixNormals"
-i "polyNormalUnlock.png";

menuItem
-l "Set Soften Edge Angle..."
-c "PolygonSoftenHardenOptions"
-i "polySoftEdge.png";

if (`about -api` >= 20180000){
menuItem
-l "Set Harden on UV Borders"
-c "polyUVBorderHard"
-i "polyHardEdge.png";
}

menuItem
-d 1;

menuItem
-l "Double Side On"
-c "da_DoubleSideOn"
-i "polyToggleProxy.png";

menuItem
-l "Double Side Off"
-c "da_DoubleSideOff"
-i "da_polyToggleProxy.png";

setParent -m ..;

menuItem
-l "Shading"
-sm 1
-i "render_adskMaterial.png";

menuItem
-l "Edit Material..."
-c "da_SelectAssignedShader"
-i "materialEditor.png";

$item = "";

$menuAssign = `menuItem -l (uiRes("m_buildShaderMenus.kAssignExistingMaterial")) -sm true -i "out_shaderList.png"`;
menuItem 
-edit 
-postMenuCommand ("buildAssignShaderMenu " + $menuAssign + " \""+$item+"\"") $menuAssign;
setParent -menu ..;

menuItem
-l "Assign New Material..."
-c "createAssignNewMaterialTreeLister \"\""
-i "render_adskMaterial.png";

menuItem
-d 1;

menuItem
-l "Assign Toon Shader"
-c "assignToonShader \"threeToneBrightness\""
-i "toonBrightness3.png";

menuItem
-l "Add Toon Outline"
-c "assignNewPfxToon"
-i "toonAddOutline.png";

menuItem
-l "Remove Toon Outlines"
-c "removePfxToonOutlines"
-i "toonRemoveOutline.png";

if (`pluginInfo -q -l mtoa`){
string $myArnoldVersion = substituteAllString(`pluginInfo -q -v mtoa`, ".", "");
int $myArnoldIntVersion = `substring $myArnoldVersion 1 3`;

menuItem
-d 1;

menuItem
-l "Arnold Light to Texture"
-c "da_AiRenderToTexture"
-i "RenderToTextureShelf.png";

menuItem
-l "Mesh Light"
-c "da_AiMeshesLight"
-i "MeshLightShelf.png";

menuItem
-l "Export Vertex Colors"
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On"
-c "da_AiExportVertexColors"
-i "rvViewingPipelineOn.png";

menuItem
-l "Off"
-c "da_AiNoExportVertexColors"
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem
-l "Arnold Subdivision"
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On/Update"
-c "da_ArnoldSubdiv"
-i "rvViewingPipelineOn.png";

menuItem
-l "Off"
-c "da_NoArnoldSubdiv"
-i "rvViewingPipelineOff.png";

setParent -m ..;

if ($myArnoldIntVersion < 320){
menuItem
-l "Opaque Mesh"
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "On"
-c "da_AiOpaque"
-i "rvViewingPipelineOn.png";

menuItem
-l "Off"
-c "da_AiNoOpaque"
-i "rvViewingPipelineOff.png";

setParent -m ..;
}
}

setParent -m ..;

menuItem
-l "Dynamics"
-sm 1
-i "out_nucleus.png";

menuItem
-l "Create nCloth"
-c "nClothCreate"
-i "nClothCreate.png";

menuItem
-l "Create nHair..."
-c "CreateHairOptions"
-i "hairCreate.png";

menuItem
-l "Create Passive Collider"
-c "nClothMakeCollide"
-i "nClothCreatePassive.png";

menuItem
-l "Emit nParticle..."
-c "NEmitFromObjectOptions"
-i "emitter.png";

menuItem
-l "Fill Object With Particle..."
-c "ParticleFillOptions"
-i "nPartfillObject.png";

menuItem
-l "Create nSoft Body..."
-c "CreateNSoftBodyOptions"
-i "soft.png";

menuItem
-l "Set Initial State"
-c "setNClothStartState;"
-i "fluidInitialStateSet.png";

menuItem
-d 1;

menuItem
-l "MASH Bullet Dynamics" 
-c "AddShellDynamics" 
-i "MASH_ShellDynamics.png";

menuItem
-d 1;

menuItem
-l "Create Active Rigid Body"
-c "rigidBody -active -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none "
-i "rigid.png";

menuItem
-l "Create Passive Rigid Body"
-c "rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none "
-i "rigidPassive.png";

menuItem
-l "Constrain"
-sm 1
-i "constraint.png";

menuItem
-l "Nail"
-c "constrain -nail "
-rp "N"
-i "constraint.png";

menuItem
-l "Hinge"
-c "constrain -hinge -o 0 0 0 "
-i "constraint.png";

menuItem
-l "Spring"
-c "constrain -spring -st 5 -d 0.1 "
-i "constraint.png";

menuItem
-l "Barrier"
-c "constrain -barrier -o 0 0 0 "
-i "constraint.png";

setParent -m ..;

menuItem
-l "Set Initial State"
-c "setDynStartState;"
-i "fluidInitialStateSet.png";

menuItem
-d 1;

menuItem
-l "Emit Fluid From Object..."
-c "EmitFluidFromObjectOptions"
-i "fluidObjectEmit.png";

menuItem
-l "Make Fluid Collide"
-c "MakeFluidCollide"
-i "fluidCollide.png";

menuItem
-d 1;

menuItem
-l "Fields"
-sm 1
-i "posRadial.png";

menuItem
-l "Air"
-c "dynExecuteFieldCommands 1 \"air -pos 0 0 0 -m 4 -att 1 -dx 0 -dy 1 -dz 0 -s 5 -iv 1 -iro 1 -vco 0 -es 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posAir.png";

menuItem
-l "Drag"
-c "dynExecuteFieldCommands 1 \"drag -pos 0 0 0 -m 0.05 -att 1 -dx 0 -dy 0 -dz 0 -ud 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posDrag.png";

menuItem
-l "Gravity"
-c "dynExecuteFieldCommands 1 \"gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5\""
-i "posGravity.png";

menuItem
-l "Newton"
-c "dynExecuteFieldCommands 1 \"newton -pos 0 0 0 -m 5 -att 1 -mnd 0.2  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posNewton.png";

menuItem
-l "Radial"
-c "dynExecuteFieldCommands 1 \"radial -pos 0 0 0 -m 5 -att 1 -typ 0  -mxd 20  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posRadial.png";

menuItem
-l "Turbulence"
-c "dynExecuteFieldCommands 1 \"turbulence -pos 0 0 0 -m 5 -att 1 -f 1 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posTurbulence.png";

menuItem
-l "Uniform"
-c "dynExecuteFieldCommands 1 \"uniform -pos 0 0 0 -m 5 -att 1 -dx 1 -dy 0 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posUniform.png";

menuItem
-l "Vortex"
-c "dynExecuteFieldCommands 1 \"vortex -pos 0 0 0 -m 5 -att 1 -ax 0 -ay 1 -az 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posVortex.png";

menuItem
-l "Volume Axis"
-c "dynExecuteFieldCommands 1 \"volumeAxis -pos 0 0 0 -m 5 -att 0 -ia 0 -afc 1 -afx 1 -arx 0 -alx 0 -drs 0 -dx 1 -dy 0 -dz 0 -trb 0 -trs 0.2 -tfx 1 -tfy 1 -tfz 1 -tox 0 -toy 0 -toz 0 -dtr 0  -mxd -1  -vsh cube -vof 0 0 0 -vsw 360 -tsr 0.5 \""
-i "posVolumeAxis.png";

setParent -m ..;

if (`pluginInfo -q -l bifrostshellnode`){
menuItem
-d 1;

menuItem
-l "Create Bifrost Aero"
-c "CreateBifrostAero"
-i "out_bifrostShape.png";

menuItem
-l "Create Bifrost Liquid"
-c "CreateBifrostLiquid"
-i "out_bifrostShape.png";
}

if (`pluginInfo -q -l Boss`){
menuItem
-l "Bifrost Ocean..."
-c "da_OpenBossEditor"
-i "fluidCreate2D.png";
}

setParent -m ..;

menuItem
-l "Cache"
-sm 1
-i "nClothCacheCreate.png";

menuItem
-l "Create nCache..."
-c "nClothCacheOpt"
-i "nClothCacheCreate.png";

menuItem
-l "Delete nCache"
-c "deleteNclothCache"
-i "nClothCacheDelete.png";

menuItem
-l "Append to Cache"
-c "cacheAppend"
-i "nClothCacheAppend.png";

menuItem
-l "Attach Cache..."
-c "attachCache"
-i "nClothCacheExisting.png";

menuItem
-d 1;

menuItem
-l "Create Geometry Cache..."
-c "geometryCacheOpt"
-i "createCache.png";

menuItem
-l "Delete Geometry Cache..."
-c "geometryDeleteCacheOpt"
-i "deleteCache.png";

menuItem
-d 1;

menuItem
-l "Export to GPU Cache..."
-c "GpuCacheExportSelectionOptions"
-i "greasePencilExport.png";

setParent -m ..;

menuItem
-l "XGen"
-sm 1
-i "xgDEditor.png";

menuItem
-l "Create Interactive Groom..."
-c "XgmCreateInteractiveGroomSplinesOption"
-i "xgIG_creation.png";

menuItem
-l "Interactive Brush..."
-c "XgmSetCombBrushToolOption"
-i "xgIG_comb.png";

menuItem
-l "Interactive Groom Editor"
-c "XgCreateIgSplineEditor"
-i "xgIG_editor.png";

menuItem
-d 1;

menuItem
-l "Create Description..."
-c "XgCreateDescription"
-i "xgCreateDescription.png";

menuItem
-l "XGen Editor..."
-c "if (!`pluginInfo -q -loaded xgenToolkit`) loadPlugin xgenToolkit.mll;XgCreateDescriptionEditor"
-i "xgDEditor.png";

menuItem
-l "XGen Library..."
-c "XGenLibraryWindow"
-i "xgLibrary.png";

menuItem
-d 1;

menuItem
-l "HUD Info"
-c "ToggleXGenDisplayHUD"
-cb (`optionVar -q xgenHUDVisibility`);

setParent -m ..;

menuItem
-l "Select"
-sm 1
-i "aselect.png";

menuItem
-l "All Vertices"
-c "ConvertSelectionToVertices"
-i "vertex_NEX.png";

menuItem
-d 1;

menuItem
-l "Triangle"
-c "da_SelectTriangle"
-i "polyTriangulate.png";

menuItem
-l "Nsided"
-c "da_SelectNsided"
-i "polyCreateFacet.png";

menuItem
-d 1;

menuItem
-l "Hard Edges"
-c "da_EdgeHard"
-i "da_hardEdge.png";

menuItem
-l "Soft Edges"
-c "da_EdgeSoft"
-i "da_softEdge.png";

menuItem
-l "Border Edges"
-c "da_EdgeBorder"
-i "da_borderEdge.png";

setParent -m ..;

menuItem
-d 1;

menuItem 
-l "High Quality Smooth" 
-c "da_HighQualitySmoothMeshToggle"
-cb ($mySubdivMode == 3)
-en ($myDispSetting == 0);

menuItem 
-l "Displacement Preview" 
-c "da_HighQualityDispMeshToggle"
-cb ($myDispSetting);

menuItem 
-l "Smooth UV Borders" 
-c "da_SmoothUV"
-cb ($myUVSmoothMode == 2);

setParent -m ..;

} 
// Define PolyJoint marking menu
global proc PolyJoint_MM_May9(){

menuItem
-l "Bind Skin..." 
-c "SmoothBindSkinOptions" 
-rp "N" 
-i "smoothSkin.png";

menuItem
-l "Rigid Bind..." 
-c "RigidBindSkinOptions" 
-rp "SW" 
-i "rigidBind.png";

menuItem
-l "Bind Rigid Skin" 
-c "da_BindRigidSkin" 
-rp "W" 
-i "detachSkin.png";

menuItem
-l "Delta Skin" 
-c "da_DeltaSkin" 
-rp "SE" 
-i "smoothSkinWeights.png";

menuItem
-l "Shape to Joint(s)" 
-c "da_shapeParentJoints" 
-rp "E" 
-i "XRayJoints.png";

menuItem
-l "Joint Size..." 
-c "jdsWin" 
-rp "S" 
-i "resizeWindow.png";

menuItem
-l "Add Influence..." 
-c "AddInfluenceOptions" 
-rp "NE" 
-i "addWrapInfluence.png";

menuItem
-l "Remove Influence" 
-c "RemoveInfluence" 
-rp "NW" 
-i "removeWrapInfluence.png";

menuItem
-l "Paint Skin Weights..."
-c "da_OpenPaintSkinTool"
-i "paintSkinWeights.png";

setParent -m ..;

} 
// Define ReferenceEditor marking menu
global proc ReferenceEditor_MM_May9(){

menuItem
-l "Reload Reference" 
-c "referenceEdLoadCB" 
-rp "N" 
-i "reloadReference.png";

menuItem
-l "Duplicate Reference" 
-c "duplicateReference 1 referenceEditorPanel1referenceEditorPanel" 
-rp "S" 
-i "duplicateReference.png";

menuItem
-l "Select Reference" 
-c "referenceEdSelectCB" 
-rp "NE" 
-i "selectFileContents.png";

menuItem
-l "Create Reference" 
-c "CreateReference" 
-rp "E" 
-i "createReference.png";

menuItem
-l "Remove Reference" 
-c "referenceEdRemoveCB;" 
-rp "W" 
-i "removeReference.png";

setParent -m ..;

} 
// Define RenderView marking menu
global proc RenderView_MM_May9(){

menuItem
-l "Batch Render" 
-c "BatchRender;" 
-rp "N" 
-i "batchRender.png";

menuItem
-c "BatchRenderOptions;" 
-ob 1;

menuItem
-l "Color Picker..." 
-c "colorEditor" 
-rp "S" 
-i "render_swColorPerVertex.png";

menuItem
-l "Save Image" 
-c "renderWindowMenuCommand saveImage renderView" 
-rp "E" 
-i "fileSave.png";

menuItem
-l "Render Sequence" 
-c "RenderSequence" 
-rp "W" 
-i "menuIconRender.png";

menuItem
-l "Real Size" 
-c "renderWindowEditor -edit -realSize renderView;" 
-rp "NE" 
-i "rvRealSize.png";

menuItem
-l "Keep Image" 
-c "renderWindowMenuCommand keepImageInRenderView renderView;" 
-rp "NW" 
-i "rvKeepIt.png";

menuItem
-l "Test Resolution" 
-sm 1
-i "ResolutionGate.png";

menuItem
-l "Half" 
-c "setTestResolutionVar(4)";

menuItem
-l "Quarter" 
-c "setTestResolutionVar(3)";

menuItem
-d 1;

menuItem
-l "Full" 
-c "setTestResolutionVar(1)";

setParent -m ..;

menuItem
-l "Select Camera" 
-c "da_SelectCamera" 
-rp "SE" 
-i "Camera.png";

setParent -m ..;

} 
// Define Sets marking menu
global proc Sets_MM_May9(){
global string $da_underPointerPanel;
$da_underPointerPanel = `getPanel -underPointer`;

if (`gmatch $da_underPointerPanel "outlinerPanel*"`){
menuItem
-l "Select Set" 
-c "selectAllSetMembers $da_underPointerPanel" 
-rp "N" 
-i "aselect.png";
}

menuItem
-l "Delete Set" 
-c "doDelete" 
-rp "S" 
-i "deleteActive.png";

menuItem
-l "Hide Set" 
-c "da_HiddenSet" 
-rp "E" 
-i "out_renderPassSet.png";

menuItem
-l "Reveal Set" 
-c "da_RevealSet" 
-rp "SE" 
-i "out_objectSet.png";

setParent -m ..;

} 
// Define Shaders marking menu
global proc Shaders_MM_May9(){

menuItem
-l "Edit Material..." 
-c "da_EditAndFrameShaderOutliner" 
-rp "N" 
-i "hsGraphMaterial.png";

setParent -m ..;

} 
// Define SkyDomeLight marking menu
global proc SkyDomeLight_MM_May9(){

menuItem
-l "Toggle Visibility" 
-c "da_ToggleAiSkyDome" 
-rp "N" 
-i "RS_visible.png";

menuItem
-l "Light Linking..." 
-c "LightCentricLightLinkingEditor;" 
-rp "W" 
-i "out_defaultLightList.png";

menuItem
-l "Light Editor..." 
-c "da_LightList" 
-rp "NW" 
-i "light_manager.png";

menuItem
-l "Edit Light..." 
-c "AttributeEditor" 
-rp "SW" 
-i "attributes.png";

menuItem
-l "Add Physical Sky" 
-c "da_AddPhysicalSky" 
-rp "E" 
-i "PhysicalSkyShelf.png";

menuItem
-l "Temperature" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "Cold" 
-c "da_AiColdLight";

menuItem
-l "Neutral" 
-c "da_AiNeutralLight";

menuItem
-l "Warm" 
-c "da_AiWarmLight";

setParent -m ..;

menuItem
-l "Samples" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "Low" 
-c "da_AiLowSample";

menuItem
-l "High" 
-c "da_AiHighSample";

setParent -m ..;

menuItem
-l "Portal Mode" 
-sm 1
-i "MtoA_Logo.png";

menuItem
-l "Off" 
-c "da_AiPortalModeOff";

menuItem
-l "Interior" 
-c "da_AiPortalModeInterior";

menuItem
-l "Interior and Exterior" 
-c "da_AiPortalModeInteriorExterior";

setParent -m ..;

setParent -m ..;

} 
// Define SurfacePoint marking menu
global proc SurfacePoint_MM_May9(){

menuItem
-l "Insert Isoparms" 
-c "InsertIsoparms" 
-rp "N"
-i "insert.png";

menuItem
-c "InsertIsoparmsOptions" 
-ob 1;

menuItem
-l "Surface Editing" 
-c "SurfaceEditingTool" 
-rp "S" 
-i "surfaceEditor.png";

menuItem
-c "SurfaceEditingToolOptions" 
-ob 1;

if (`about -api` >= 20200000){
menuItem
-l "Rivet Constraint" 
-c "Rivet" 
-rp "E" 
-i "pointOnPolyConstraint.png";
}

setParent -m ..;

}
// Define StandIn marking menu
global proc StandIn_MM_May9(){

if (`about -api` >= 20180000){
menuItem
-l "Create MASH Network..." 
-c "MASHcreateOptions" 
-rp "N" 
-i "MASH_CreateNetwork.png";
}

menuItem
-l "Display as Boundry Box" 
-c "da_aiStandInBoundryBox" 
-rp "NE";

menuItem
-l "Display as Polywire" 
-c "da_aiStandinPolyWire" 
-rp "SE";

menuItem
-l "display as Point Cloud" 
-c "da_aiStandinPointCloud" 
-rp "E";

setParent -m ..;

} 
// Define Tool_3DCutSew marking menu
global proc Tool_3DCutSew_MM_May9(){

Sup_Symmetry_MM_May9;

Sup_SoftSelect_MM_May9;

menuItem -itl 1 
-l "Complete Tool" 
-c "buildSelectMM;MarkingMenuPopDown;\nda_BackToObjectMode" 
-rp "E" 
-i "aselect.png";

setParent -m ..;

} 
// Define Tool_3DPaint marking menu
global proc Tool_3DPaint_MM_May9(){

string $currentCtx = `currentCtx`;
int $reflectionCheck = `art3dPaintCtx -q -rn $currentCtx`;
string $reflectionDirection = `art3dPaintCtx -q -ra $currentCtx`;

menuItem -itl 1 
-l "Symmetry" 
-c "if (`art3dPaintCtx -q -rn art3dPaintContext`) art3dPaintCtx -e -reflection  false `currentCtx`; else art3dPaintCtx -e -reflection  true `currentCtx`;" 
-cb $reflectionCheck 
-rp "E";

radioMenuItemCollection;

menuItem -itl 1 
-l "Z Axis" 
-c "art3dPaintCtx -e -reflection  true `currentCtx`;\nart3dPaintCtx -e -ra \"z\" `currentCtx`;" 
-rb ($reflectionDirection == "z") 
-rp "SE";

menuItem -itl 1 
-l "Y Axis" 
-c "art3dPaintCtx -e -reflection  true `currentCtx`;\nart3dPaintCtx -e -ra \"y\" `currentCtx`;" 
-rb ($reflectionDirection == "y") 
-rp "S";

menuItem -itl 1 
-l "X Axis" 
-c "art3dPaintCtx -e -reflection  true `currentCtx`;\nart3dPaintCtx -e -ra \"x\" `currentCtx`;" 
-rb ($reflectionDirection == "x") 
-rp "SW";

menuItem -itl 1 
-l "Paint Color" 
-c "art3dPaintCtx -e -painttxtattrname `attributeToPaint_uiToMel(\"Color\")` `currentCtx`;" 
-i "colorPresetSpectrum.png" 
-rp "N";

menuItem -itl 1 
-l "Paint Transparency" 
-c "art3dPaintCtx -e -painttxtattrname `attributeToPaint_uiToMel(\"Transparency\")` `currentCtx`;" 
-i "colorPresetBlackRedYellow.png"
-rp "NE";

menuItem -itl 1 
-l "Paint BumpMap" 
-c "art3dPaintCtx -e -painttxtattrname `attributeToPaint_uiToMel(\"BumpMap\")` `currentCtx`;" 
-i "colorPresetGrayscale.png" 
-rp "NW";

menuItem -itl 1 
-l "Assign/Edit Texture" 
-c "art3dPaintAssignFileTexture( \"art3dFileTextureFrame\");" 
-i "imageDisplay.png"
-rp "W";

setParent -m ..;

} 
// Define Tool_Connect marking menu
global proc Tool_Connect_MM_May9(){

radioMenuItemCollection;

menuItem -itl 1 
-l "Slide" 
-rp "S" 
-c "nexOpt -e connectCurLmbMap slide; refresh -f; dR_updateCommandPanel" 
-rb (`nexOpt -q connectCurLmbMap` == "slide");

menuItem -itl 1 
-l "Segments" 
-rp "N" 
-c "nexOpt -e connectCurLmbMap segments; refresh -f; dR_updateCommandPanel" 
-rb (`nexOpt -q connectCurLmbMap` == "segments");

menuItem -itl 1 
-l "Pinch" 
-rp "W" 
-c "nexOpt -e connectCurLmbMap pinch; refresh -f; dR_updateCommandPanel" 
-rb (`nexOpt -q connectCurLmbMap` == "pinch");

menuItem -itl 1 
-l "Complete Tool" 
-c "buildSelectMM;MarkingMenuPopDown;\nda_BackToObjectMode" 
-rp "E" 
-i "aselect.png";

menuItem -itl 1 
-l "Reset Settings..." 
-c "mtk_initToolOptions(1, \"connect\"); nexCtx -resetManip; dR_updateCommandPanel" 
-i "CN_refresh.png";

setParent -m ..;

} 
// Define Tool_Crease marking menu
global proc Tool_Crease_MM_May9(){
string $mySel[] = `ls -sl`;
string $mySelShape[] = `listRelatives -f -s`;
string $currentPanel = `getPanel -wf`;

menuItem -itl 1 
-l "No Crease" 
-c "for ($each in `ls -sl`){polyCrease -ch true -value 0 -vertexValue 0 $each;}" 
-rp "NW";

menuItem -itl 1 
-l "Infinite Crease" 
-c "for ($each in `ls -sl`){polyCrease -ch true -value 10 -vertexValue 10 $each;}" 
-rp "N";

menuItem -itl 1 
-l "1 Crease" 
-c "for ($each in `ls -sl`){polyCrease -ch true -value 1 -vertexValue 1 $each;}" 
-rp "W";

menuItem -itl 1 
-l "2 Crease" 
-c "for ($each in `ls -sl`){polyCrease -ch true -value 2 -vertexValue 2 $each;}" 
-rp "SW";

menuItem -itl 1 
-l "3 Crease" 
-c "for ($each in `ls -sl`){polyCrease -ch true -value 3 -vertexValue 3 $each;}" 
-rp "S";

menuItem -itl 1 
-l "4 Crease" 
-c "for ($each in `ls -sl`){polyCrease -ch true -value 4 -vertexValue 4 $each;}" 
-rp "SE";

menuItem -itl 1 
-l "5 Crease" 
-c "for ($each in `ls -sl`){polyCrease -ch true -value 5 -vertexValue 5 $each;}" 
-rp "E";

menuItem -itl 1 
-l "6 Crease" 
-c "for ($each in `ls -sl`){polyCrease -ch true -value 6 -vertexValue 6 $each;}" 
-rp "NE";

menuItem -itl 1 
-l "Crease Set Editor..." 
-c "python \"creaseSetEditor.showCreaseSetEditor()\";" 
-i "polyCrease.png";

menuItem  -itl 1 
-d 1;

if (size($mySel[0]) || 0){
int $myDispSetting = `getAttr ($mySelShape[0] + ".showDisplacements")`;
int $mySubdivMode = `getAttr ($mySelShape[0] + ".smoothDrawType")`;

menuItem -itl 1 
-l "High Quality Smooth" 
-c "da_HighQualitySmoothMesh"
-cb ($mySubdivMode == 3)
-en ($myDispSetting == 0);

menuItem -itl 1 
-l "Displacement Preview" 
-c "da_HighQualityDispMeshToggle"
-cb ($myDispSetting);
}

if (`gmatch $currentPanel "modelPanel*"`){
string $myCamera = `modelPanel -q -cam $currentPanel`;
string $myOverrideCheck = `modelEditor -q -rom $currentPanel`;

menuItem -itl 1
-l "Selection Highlight" 
-c "da_ToggleSelectionHighlighting" 
-cb (`modelEditor -q -sel $currentPanel`);

if (`pluginInfo -q -l mtoa`){
string $myArnoldVersion = substituteAllString(`pluginInfo -q -v mtoa`, ".", "");
int $myArnoldIntVersion = `substring $myArnoldVersion 1 3`;

if (`about -api` >= 20180000 && $myArnoldIntVersion >= 320){
int $myRenderDevice = `getAttr "defaultArnoldRenderOptions.renderDevice"`;

menuItem 
-d 1;

menuItem -itl 1
-l "Arnold Viewport" 
-c "da_ArnoldRenderViewport" 
-cb ($myOverrideCheck == "arnoldViewOverride");

if ($myOverrideCheck == "arnoldViewOverride"){
menuItem
-c "arnoldViewOverrideOptionBox" 
-ob 1;
}

menuItem -itl 1
-l "Arnold GPU" 
-c "da_ToggleRenderDevice" 
-cb ($myRenderDevice);
}
}
}

setParent -m ..;

} 
// Define Tool_CreateParticle marking menu
global proc Tool_CreateParticle_MM_May9(){

menuItem -itl 1
-l "Tool Settings..." 
-c "da_OpenToolSettings" 
-rp "N" 
-i "toolSettings.png";

menuItem -itl 1 
-l "Reset Settings" 
-c "resetTool dynParticleContext" 
-rp "S" 
-i "CN_refresh.png";

menuItem -itl 1 
-l "Complete Tool" 
-c "buildSelectMM;MarkingMenuPopDown;" 
-rp "E" 
-i "aselect.png";

menuItem -itl 1 
-l "Points Style" 
-c "optionVar -stringValue NParticleStyle \"Points\";" 
-i "nPartPoints.png";

menuItem -itl 1 
-l "Balls Style" 
-c "optionVar -stringValue NParticleStyle \"Balls\";" 
-i "nPartBalls.png";

menuItem -itl 1 
-l "Cloud Style" 
-c "optionVar -stringValue NParticleStyle \"Cloud\";" 
-i "nPartCloud.png";

menuItem -itl 1 
-l "ThickCloud Style" 
-c "optionVar -stringValue NParticleStyle \"ThickCloud\";" 
-i "nPartThickCloud.png";

menuItem -itl 1 
-l "Water Style" 
-c "optionVar -stringValue NParticleStyle \"Water\";" 
-i "nPartWater.png";

setParent -m ..;

} 

// Define Tool_EditConstraintMembership marking menu
global proc Tool_EditConstraintMembership_MM_May9(){

menuItem -itl 1 
-l "Grow Selection"
-rp "NE" 
-c "GrowPolygonSelectionRegion" 
-i "growCVselect.png";

menuItem -itl 1 
-l "Shrink Selection"
-rp "NW" 
-c "ShrinkPolygonSelectionRegion" 
-i "shrinkCVselect.png";

menuItem -itl 1 
-l "Complete Tool" 
-c "da_CompleteEditConstraintMembershipTool" 
-rp "E" 
-i "aselect.png";

setParent -m ..;
}

// Define Tool_EditMembership marking menu
global proc Tool_EditMembership_MM_May9(){

menuItem -itl 1 
-l "Grow Selection"
-rp "NE" 
-c "GrowPolygonSelectionRegion" 
-i "growCVselect.png";

menuItem -itl 1 
-l "Shrink Selection"
-rp "NW" 
-c "ShrinkPolygonSelectionRegion" 
-i "shrinkCVselect.png";

menuItem -itl 1 
-l "Complete Tool" 
-c "da_CompleteEditMembershipTool" 
-rp "E" 
-i "aselect.png";

setParent -m ..;

}

// Define Tool_GreasePencil marking menu
global proc Tool_GreasePencil_MM_May9(){

menuItem -itl 1 
-l "Pencil" 
-c "setGreasePencilType 1;" 
-rp "N" 
-i "greasePencilPencil.png";

menuItem -itl 1 
-l "Eraser" 
-c "setGreasePencilType 4;" 
-rp "S" 
-i "greasePencilEraser.png";

menuItem -itl 1 
-l "Remove Frame" 
-c "removeGreasePencilFrameAtCurrentTime" 
-rp "W" 
-i "greasePencilDeleteFrame.png";

menuItem -itl 1 
-l "Add Frame" 
-c "createOrEditGreasePencilFrameAtCurrentTime" 
-rp "E" 
-i "greasePencilAddFrame.png";

menuItem -itl 1 
-l "Pre-Frame Ghost" 
-c "toggleGreasePencilPreFrameCount" 
-rp "SW" 
-i "greasePencilPreGhostOff.png";

menuItem -itl 1 
-l "Post-Frame Ghost" 
-c "toggleGreasePencilPostFrameCount" 
-rp "SE" 
-i "greasePencilPostGhostOff.png";

menuItem -itl 1 
-l "Marker" 
-c "setGreasePencilType 2" 
-rp "NW" 
-i "greasePencilMarker.png";

menuItem -itl 1 
-l "Soft Pencil" 
-c "setGreasePencilType 3" 
-rp "NE" 
-i "greasePencilSoftPencil.png";

menuItem -itl 1 
-l "Tool Window..." 
-c "createGreasePencilWindow" 
-i "GreasePencil.png";

menuItem -itl 1 
-l "Complete Tool" 
-c "buildSelectMM;MarkingMenuPopDown;if (`window -ex greasePencilFloatingWindow`)deleteUI greasePencilFloatingWindow" 
-i "aselect.png";

setParent -m ..;

} 
// Define Tool_HairPaint marking menu
global proc Tool_HairPaint_MM_May9(){

string $currentCtx = `currentCtx`;
int $reflectionCheck = `artAttrCtx -q -rn $currentCtx`;
string $reflectionDirection = `artAttrCtx -q -ra $currentCtx`;

menuItem -itl 1 
-l "Paint Hair Settings..." 
-c "paintHairTool 1;" 
-rp "N" 
-i "hairPaint.png";

menuItem -itl 1 
-l "Symmetry" 
-c "if (`artAttrCtx -q -rn hairPaintContext`) artAttrCtx -e -reflection  false `currentCtx`; else artAttrCtx -e -reflection  true `currentCtx`;" 
-cb $reflectionCheck 
-rp "E";

radioMenuItemCollection;

menuItem -itl 1 
-l "Z Axis" 
-c "artAttrCtx -e -reflection  true `currentCtx`;\nartAttrCtx -e -ra \"z\" `currentCtx`;" 
-rb ($reflectionDirection == "z") 
-rp "SE";

menuItem -itl 1 
-l "Y Axis" 
-c "artAttrCtx -e -reflection  true `currentCtx`;\nartAttrCtx -e -ra \"y\" `currentCtx`;" 
-rb ($reflectionDirection == "y") 
-rp "S";

menuItem -itl 1 
-l "X Axis" 
-c "artAttrCtx -e -reflection  true `currentCtx`;\nartAttrCtx -e -ra \"x\" `currentCtx`;" 
-rb ($reflectionDirection == "x") 
-rp "SW";

setParent -m ..;

} 
// Define Tool_IkHandle marking menu
global proc Tool_IkHandle_MM_May9(){

menuItem -itl 1
-l "Tool Settings..." 
-c "da_OpenToolSettings" 
-rp "N" 
-i "toolSettings.png";

menuItem -itl 1 
-l "Reset Settings" 
-c "resetTool ikHandleContext" 
-rp "S" 
-i "CN_refresh.png";

menuItem -itl 1 
-l "Complete Tool" 
-c "buildSelectMM;MarkingMenuPopDown" 
-rp "E" 
-i "aselect.png";

setParent -m ..;

} 
// Define Tool_IkSplineHandle marking menu
global proc Tool_IkSplineHandle_MM_May9(){

menuItem -itl 1
-l "Tool Settings..." 
-c "da_OpenToolSettings" 
-rp "N" 
-i "toolSettings.png";

menuItem -itl 1 
-l "Reset Settings" 
-c "resetTool ikSplineHandleContext" 
-rp "S" 
-i "CN_refresh.png";

menuItem -itl 1 
-l "Complete Tool" 
-c "buildSelectMM;MarkingMenuPopDown" 
-rp "E" 
-i "aselect.png";

setParent -m ..;

} 
// Define Tool_MultiCut marking menu
global proc Tool_MultiCut_MM_May9(){

Sup_Symmetry_MM_May9;

int $deleteFaceOn = `nexOpt -q useDeleteFaces`;
int $extractFacesOn = `nexOpt -q useExtractFaces`;
int $splitModeOn = ($deleteFaceOn == $extractFacesOn);

menuItem -itl 1 
-l "Quad Draw"
-c "dR_quadDrawTool;"
-rp "NW"
-i "quadDraw_NEX32.png";

radioMenuItemCollection;

menuItem -itl 1 
-l "Cut Mode" 
-c "nexOpt -e useDeleteFaces true; refresh -f;\nnexOpt -e useExtractFaces false; floatFieldGrp -e -en false nexExtractFacesFloatGrp; refresh -f" 
-rb $deleteFaceOn
-rp "NE";

menuItem -itl 1 
-l "Extract Mode" 
-c "nexOpt -e useExtractFaces true; floatFieldGrp -e -en true nexExtractFacesFloatGrp; refresh -f;\nnexOpt -e useDeleteFaces false; refresh -f" 
-rb $extractFacesOn
-rp "SE";

menuItem -itl 1 
-l "Split Mode" 
-c "nexOpt -e useExtractFaces false; floatFieldGrp -e -en false nexExtractFacesFloatGrp; refresh -f;\nnexOpt -e useDeleteFaces false; refresh -f" 
-rb $splitModeOn
-rp "E";

menuItem -itl 1
-l "Edge Flow" 
-c "if (`nexOpt -q useEdgeFlow`){nexOpt -e useEdgeFlow false; floatSliderGrp -e -en false nexEdgeFlowFloatField;}else{nexOpt -e useEdgeFlow true; floatSliderGrp -e -en true nexEdgeFlowFloatField;}" 
-cb (`nexOpt -q useEdgeFlow`)
-rp "W";

menuItem -itl 1 
-l "Slice Plane" 
-c "dr_polyCut(0);" 
-rp "S" 
-i "sketchPlane.png";

menuItem -itl 1
-l "Construction History" 
-c "if (`constructionHistory -q -tgl`) constructionHistory -tgl off; else constructionHistory -tgl on" 
-cb (`constructionHistory -q -tgl`);

menuItem -itl 1 
-l "Reset Settings" 
-c "nexCtx -resetManip" 
-i "CN_refresh.png";

setParent -m ..;

} 
// Define Tool_PaintAttr marking menu
global proc Tool_PaintAttr_MM_May9(){

string $currentCtx = `currentCtx`;
int $reflectionCheck = `artAttrCtx -q -rn $currentCtx`;
string $reflectionDirection = `artAttrCtx -q -ra $currentCtx`;

radioMenuItemCollection;

menuItem -itl 1 
-l "Z Axis" 
-c "artAttrCtx -e -reflection  true `currentCtx`;\nartAttrCtx -e -ra \"z\" `currentCtx`;" 
-rb ($reflectionDirection == "z") 
-rp "SE";

menuItem -itl 1 
-l "Y Axis" 
-c "artAttrCtx -e -reflection  true `currentCtx`;\nartAttrCtx -e -ra \"y\" `currentCtx`;" 
-rb ($reflectionDirection == "y") 
-rp "S";

menuItem -itl 1 
-l "X Axis" 
-c "artAttrCtx -e -reflection  true `currentCtx`;\nartAttrCtx -e -ra \"x\" `currentCtx`;" 
-rb ($reflectionDirection == "x") 
-rp "SW";

menuItem -itl 1 
-l "Symmetry" 
-c "if (`artAttrCtx -q -rn artAttrContext`) artAttrCtx -e -reflection  false `currentCtx`; else artAttrCtx -e -reflection  true `currentCtx`;" 
-cb $reflectionCheck
-rp "E";

menuItem -itl 1 
-l "Replace" 
-c "artAttrPaintOperation artAttrCtx Replace;" 
-rp "N";

menuItem -itl 1 
-l "Add" 
-c "artAttrPaintOperation artAttrCtx Add;" 
-rp "NE";

menuItem -itl 1 
-l "Scale" 
-c "artAttrPaintOperation artAttrCtx Scale;" 
-rp "NW";

menuItem -itl 1 
-l "Flood Smooth" 
-c "artAttrPaintOperation artAttrCtx Smooth;\nartAttrCtx -e -clear `currentCtx`;" 
-rp "W";

setParent -m ..;

} 
// Define Tool_PaintFX marking menu
global proc Tool_PaintFX_MM_May9(){

menuItem -itl 1 
-l "Get Brush..." 
-c "ContentBrowserWindow;contentBrowserSetContext(\"WindowsMenu\", \"examples\", \"Examples/Paint Effects/Airbrush\");" 
-rp "N" 
-i "paintEffectsBrushesLarge.png";

menuItem -itl 1 
-l "Reset Template Brush" 
-c "ResetTemplateBrush" 
-rp "S" 
-i "resetTemplateBrush.png";

menuItem -itl 1 
-l "Get Settings from Selected" 
-c "GetSettingsFromSelectedStroke" 
-rp "W"
-i "RS_isolate.png";

menuItem -itl 1 
-l "Apply Settings to Selected" 
-c "ApplySettingsToSelectedStroke" 
-rp "E"
-i "RS_import_layer.png";

setParent -m ..;

} 
// Define Tool_PaintSkin marking menu
global proc Tool_PaintSkin_MM_May9(){
string $currentTool = `currentCtx`;
int $paintModeCheck = `artAttrSkinPaintCtx -q -skinPaintMode $currentTool`;

if ($paintModeCheck == 1){
menuItem -itl 1 
-l "Add to 0.05" 
-c "artAttrPaintOperation artAttrSkinPaintCtx Add; artAttrSkinPaintCtx -e -opacity 0.05 `currentCtx`"
-i "addCreateGeneric.png"
-rp "NE";

menuItem -itl 1 
-l "Replace to 1" 
-c "artAttrPaintOperation artAttrSkinPaintCtx Replace; artAttrSkinPaintCtx -e -opacity 1 `currentCtx`"
-i "teKeyRefresh.png"
-rp "N";

menuItem -itl 1 
-l "Color Ramp" 
-c "da_ToggleRampSkin;artAttrCtx -e -colorRamp \" 1,0,0,0.5,1,1,1,0,0.986,1,0.12,0,0.12,0.014,1,1,1,0.86,1,1,0.004,0,0.004,0,1 \" artAttrSkinContext" 
-rp "S" 
-cb (`artAttrSkinPaintCtx -q -useColorRamp artAttrSkinContext`);

menuItem -itl 1 
-l "Smooth to 1" 
-c "artAttrPaintOperation artAttrSkinPaintCtx Smooth; artAttrSkinPaintCtx -e -opacity 1 `currentCtx`"
-i "smoothSkinWeights.png"
-rp "NW";

menuItem -itl 1 
-l "Flood" 
-c "artAttrSkinPaintCtx -e -clear `currentCtx`"
-i "alignVMin.png"
-rp "SW";

menuItem -itl 1 
-l "Select Vertex" 
-c "da_SkinPaintMode" 
-cb ($paintModeCheck == 0)
-rp "W";
}

menuItem -itl 1 
-l "XRay Joints" 
-c "da_ToggleXRayJointsSkin" 
-rp "E" 
-cb (`artAttrSkinPaintCtx -q -xrayJoints artAttrSkinContext`);

menuItem -itl 1 
-l "Wireframe" 
-c "da_ToggleSkinWireframe" 
-rp "SE" 
-cb (`artAttrSkinPaintCtx -q -showactive artAttrSkinContext`);

if ($paintModeCheck == 0){
Sup_Symmetry_PaintSkin_MM_May9;

menuItem -itl 1 
-l "Grow Selection"
-rp "NE" 
-c "GrowPolygonSelectionRegion" 
-i "growCVselect.png";

menuItem -itl 1 
-l "Shrink Selection"
-rp "NW" 
-c "ShrinkPolygonSelectionRegion" 
-i "shrinkCVselect.png";

menuItem -itl 1 
-l "Deselect All"
-rp "S" 
-c "select -cl" 
-i "hotkeyFieldClear.png";

if (`selectType -q -pe`){
if (size(`filterExpand -sm 32`)){
menuItem -itl 1 
-l "Convert to Vertex"
-rp "SW" 
-c "ConvertSelectionToVertices" 
-i "polyConvertToVertices.png";

menuItem -itl 1 
-l "Select Vertex" 
-c "ConvertSelectionToVertices;da_SkinPaintMode" 
-cb ($paintModeCheck == 0)
-rp "W";
}else{
menuItem -itl 1 
-l "Vertex Mode"
-rp "SW" 
-c "setSelectMode components Components; selectType -smp 1 -sme 0 -smf 0 -smu 0 -pv 1 -pe 0 -pf 0 -puv 0; HideManipulators" 
-i "vertex_NEX.png";

menuItem -itl 1 
-l "Select Vertex" 
-c "da_SkinPaintMode" 
-cb ($paintModeCheck == 0)
-rp "W";
}
} else {
if (size(`filterExpand -sm 31`)){
if (size(`filterExpand -sm 31`) >= 2){
menuItem -itl 1 
-l "Convert to Edge"
-rp "SW" 
-c "ConvertSelectionToContainedEdges" 
-i "polyConvertToContainedEdges.png";
}else{
menuItem -itl 1 
-l "Convert to Edge"
-rp "SW" 
-c "ConvertSelectionToEdges" 
-i "polyConvertToEdge.png";
}
}else{
menuItem -itl 1 
-l "Edge Mode"
-rp "SW" 
-c "setSelectMode components Components; selectType -smp 0 -sme 1 -smf 0 -smu 0 -pv 0 -pe 1 -pf 0 -puv 0; HideManipulators" 
-i "edges_NEX.png";
}

menuItem -itl 1 
-l "Select Vertex" 
-c "da_SkinPaintMode" 
-cb ($paintModeCheck == 0)
-rp "W";
}
}

menuItem -itl 1 
-l "Tool Settings..." 
-c "da_OpenToolSettings"
-i "toolSettings.png";

menuItem -itl 1 
-l "Complete Tool" 
-c "da_ClosePaintSkinTool" 
-i "aselect.png";

menuItem 
-d 1;

menuItem -itl 1 
-l "Color Management"
-c "da_ToggleColorManagement" 
-cb (`colorManagementPrefs -q -cme`);

menuItem -itl 1 
-l "Anti-Aliasing" 
-c "da_AntiAliasToggle"  
-cb (`getAttr "hardwareRenderingGlobals.multiSampleEnable"`);

setParent -m ..;

} 
// Define Tool_QuadDraw marking menu
global proc Tool_QuadDraw_MM_May9(){

Sup_Symmetry_MM_May9;
Sup_SoftSelect_MM_May9;

int $extendMode = `nexOpt -q extendType`;
string $currentPanel = `getPanel -wf`;

menuItem -itl 1 
-l "Clear Dots" 
-c "dR_quadDrawClearDots" 
-rp "NE" 
-i "RS_delete.png";

menuItem -itl 1 
-l "Complete Tool" 
-c "buildSelectMM;MarkingMenuPopDown;\nda_BackToObjectMode" 
-rp "E" 
-i "aselect.png";

menuItem -itl 1 
-l "Multi Cut" 
-c "dR_multiCutTool;" 
-rp "NW" 
-i "multiCut_NEX32.png";

radioMenuItemCollection;

menuItem -itl 1 
-l "Extend Border" 
-c "nexOpt -e extendType 2;" 
-rb (2 == $extendMode)
-rp "W";

menuItem -itl 1 
-l "Extend Edge" 
-c "nexOpt -e extendType 0;" 
-rb (0 == $extendMode)
-rp "SW";

menuItem -itl 1 
-l "Extend Loop" 
-c "nexOpt -e extendType 1;" 
-rb (1 == $extendMode)
-rp "SE";

if (`gmatch $currentPanel "modelPanel*"`){

if (size(`ls -lv`) > 0 ){
menuItem -itl 1 
-l "Add Live Smooth" 
-c "da_SubdivQuadDraw"
-i "polySmoothProxy.png";
}

menuItem -itl 1
-l "Isolate Select" 
-c "ToggleIsolateSelect" 
-cb (`isolateSelect -q -state $currentPanel`);

menuItem 
-d 1;
}

menuItem -itl 1
-l "Construction History" 
-c "if (`constructionHistory -q -tgl`) constructionHistory -tgl off; else constructionHistory -tgl on;" 
-cb (`constructionHistory -q -tgl`);

menuItem -itl 1 
-l "Reset Settings" 
-c "nexCtx -resetManip" 
-i "CN_refresh.png";

setParent -m ..;

} 
// Define Tool_SculptLegacy marking menu
global proc Tool_SculptLegacy_MM_May9(){

string $currentCtx = `currentCtx`;
int $reflectionCheck = `artPuttyCtx -q -rn $currentCtx`;
int $wfCheck = `artPuttyCtx -q -showactive $currentCtx`;
int $autoSmoothCheck = `artPuttyCtx -q -autosmooth $currentCtx`;
string $reflectionDirection = `artPuttyCtx -q -ra $currentCtx`;

radioMenuItemCollection;

menuItem -itl 1 
-l "X Axis" 
-c "artPuttyCtx -e -reflection  true `currentCtx`;\nartPuttyCtx -e -ra \"x\" `currentCtx`;" 
-rb ($reflectionDirection == "x") 
-rp "SW";

menuItem -itl 1 
-l "Y Axis" 
-c "artPuttyCtx -e -reflection  true `currentCtx`;\nartPuttyCtx -e -ra \"y\" `currentCtx`;" 
-rb ($reflectionDirection == "y") 
-rp "S";

menuItem -itl 1 
-l "Z Axis" 
-c "artPuttyCtx -e -reflection  true `currentCtx`;\nartPuttyCtx -e -ra \"z\" `currentCtx`;" 
-rb ($reflectionDirection == "z") 
-rp "SE";

menuItem -itl 1 
-l "Symmetry" 
-c "if (`artPuttyCtx -q -rn artPuttyContext`) artPuttyCtx -e -reflection  false `currentCtx`; else artPuttyCtx -e -reflection  true `currentCtx`;" 
-cb $reflectionCheck 
-rp "E";

menuItem -itl 1 
-l "Wireframe" 
-c "if (`artPuttyCtx -q -showactive artPuttyContext`) artPuttyCtx -e -showactive false `currentCtx`; else artPuttyCtx -e -showactive true `currentCtx`;" 
-cb $wfCheck 
-rp "W";

menuItem -itl 1 
-l "Auto Smooth" 
-c "if (`artPuttyCtx -q -autosmooth artPuttyContext`) artPuttyCtx -e -autosmooth false `currentCtx`; else artPuttyCtx -e -autosmooth true `currentCtx`;" 
-cb $autoSmoothCheck 
-rp "N";

setParent -m ..;

} 
// Define Tool_SculptMesh marking menu
global proc Tool_SculptMesh_MM_May9(){

if (`about -api` >= 20180000){
Sup_Symmetry_MM_May9;
}
string $currentCtx = `currentCtx`;
int $wireframeCheck = `sculptMeshCacheCtx -q -displayWireframe $currentCtx`;
int $axisDirection = `sculptMeshCacheCtx -q -mirror $currentCtx`;

menuItem -itl 1 
-l "Freeze..." 
-c "SetMeshFreezeTool; da_OpenToolSettings" 
-rp "NE" 
-i "Freeze.png";

menuItem -itl 1 
-l "Sculpt..." 
-c "SetMeshSculptTool; da_OpenToolSettings" 
-rp "E" 
-i "Sculpt.png";

menuItem -itl 1 
-l "Grab..." 
-c "SetMeshGrabTool; da_OpenToolSettings" 
-rp "NW" 
-i "Grab.png";

menuItem -itl 1 
-l "Wireframe" 
-c "da_ToggleSculptWireframe" 
-cb (1 == $wireframeCheck)
-rp "W";

if (`about -api` >= 20180000){
menuItem -itl 1 
-l "Flood" 
-c "da_SculptFlood" 
-i "polySmoothProxy.png";
}

menuItem -itl 1 
-d 1; 

menuItem -itl 1 
-l "Smooth..." 
-c "SetMeshSmoothTool; da_OpenToolSettings" 
-i "Smooth.png";

menuItem -itl 1 
-l "Relax..." 
-rp "S" 
-c "SetMeshRelaxTool; da_OpenToolSettings" 
-i "Relax.png";

menuItem -itl 1 
-l "Pinch..." 
-rp "SE" 
-c "SetMeshPinchTool; da_OpenToolSettings" 
-i "Pinch.png" ;

menuItem -itl 1 
-l "Flatten..." 
-rp "SW" 
-c "SetMeshFlattenTool; da_OpenToolSettings" 
-i "Flatten.png";

menuItem -itl 1 
-l "Foamy..." 
-c "SetMeshFoamyTool; da_OpenToolSettings" 
-i "Foamy.png";

menuItem -itl 1 
-l "Spray..." 
-c "SetMeshSprayTool; da_OpenToolSettings" 
-i "Spray.png";

menuItem -itl 1 
-l "Repeat..." 
-c "SetMeshRepeatTool; da_OpenToolSettings" 
-i "Repeat.png";

menuItem -itl 1 
-l "Imprint..." 
-c "SetMeshImprintTool; da_OpenToolSettings" 
-i "Imprint.png";

menuItem -itl 1 
-l "Wax..." 
-c "SetMeshWaxTool; da_OpenToolSettings" 
-i "Wax.png";

menuItem -itl 1 
-l "Scrape..." 
-c "SetMeshScrapeTool; da_OpenToolSettings" 
-i "Scrape.png";

menuItem -itl 1 
-l "Fill..." 
-c "SetMeshFillTool; da_OpenToolSettings" 
-i "Fill.png";

menuItem -itl 1 
-l "Knife..." 
-c "SetMeshKnifeTool; da_OpenToolSettings" 
-i "Knife.png";

menuItem -itl 1 
-l "Smear..." 
-c "SetMeshSmearTool; da_OpenToolSettings" 
-i "Smear.png";

menuItem -itl 1 
-l "Bulge..." 
-c "SetMeshBulgeTool; da_OpenToolSettings" 
-i "Bulge.png";

menuItem -itl 1 
-l "Amplify..." 
-c "SetMeshAmplifyTool; da_OpenToolSettings" 
-i "Amplify.png";

menuItem -itl 1 
-d 1;

menuItem -itl 1 
-l "Smooth Target..." 
-c "SetMeshSmoothTargetTool; da_OpenToolSettings" 
-i "SmoothTarget.png";

menuItem -itl 1 
-l "Clone Target..." 
-c "SetMeshCloneTargetTool; da_OpenToolSettings" 
-i "CloneTarget.png";

menuItem -itl 1 
-l "Mask Target..." 
-c "SetMeshMaskTool; da_OpenToolSettings" 
-i "Mask.png";

menuItem -itl 1 
-l "Erase Target..." 
-c "SetMeshEraseTool; da_OpenToolSettings" 
-i "Erase.png";

menuItem -itl 1 
-d 1;

menuItem -itl 1 
-l "3D Grab UV..." 
-c "SetMeshGrabUVTool; da_OpenToolSettings" 
-i "UV_3D_Grab_Brush.png";

setParent -m ..;

} 
// Define Tool_TargetWeld marking menu
global proc Tool_TargetWeld_MM_May9(){

Sup_Symmetry_MM_May9;

menuItem -itl 1 
-l "Complete Tool" 
-c "buildSelectMM;MarkingMenuPopDown;\nda_BackToObjectMode" 
-rp "E" 
-i "aselect.png";

radioMenuItemCollection;

menuItem -itl 1 
-l "Merge to Target" 
-c "targetWeldCtx -e -mergeToCenter 0 polyMergeVertexContext; refresh -f" 
-rb (`targetWeldCtx -q -mergeToCenter polyMergeVertexContext` == 0)
-rp "SW";

menuItem -itl 1 
-l "Merge to Center" 
-c "targetWeldCtx -e -mergeToCenter 1 polyMergeVertexContext; refresh -f" 
-rb (`targetWeldCtx -q -mergeToCenter polyMergeVertexContext`)
-rp "S";

menuItem -itl 1
-l "Construction History" 
-c "if (`constructionHistory -q -tgl`) constructionHistory -tgl off; else constructionHistory -tgl on;" 
-cb (`constructionHistory -q -tgl`);

menuItem -itl 1 
-l "Reset Settings" 
-c "resetTool polyMergeVertexContext" 
-i "CN_refresh.png";

setParent -m ..;

} 
// Define Tool_UVBushes marking menu
global proc Tool_UVBushes_MM_May9(){

menuItem -itl 1 
-l "Cut..." 
-c "setToolTo texCutUVContext;\ntexCutContext -edit -mode Cut texCutUVContext;da_OpenToolSettings" 
-rp "NE" 
-i "cutUVTool.png";

menuItem -itl 1 
-l "Sew..." 
-c "setToolTo texCutUVContext;\ntexCutContext -edit -mode Sew texCutUVContext;da_OpenToolSettings" 
-rp "E" 
-i "sewUVTool.png";

menuItem -itl 1 
-l "Grab..." 
-c "setToolTo texSculptCacheContextObj;\ntexSculptCacheContext -e -m Grab texSculptCacheContextObj;da_OpenToolSettings" 
-rp "SE" 
-i "grabUVTool.png";

menuItem -itl 1 
-l "Pin..." 
-c "setToolTo texSculptCacheContextObj;\ntexSculptCacheContext -e -m Freeze texSculptCacheContextObj;da_OpenToolSettings" 
-rp "S" 
-i "pinUVTool.png";

menuItem -itl 1 
-l "Smear..." 
-c "setToolTo texSculptCacheContextObj;\ntexSculptCacheContext -e -m Smear texSculptCacheContextObj;da_OpenToolSettings" 
-rp "SW" 
-i "smearUVTool.png";

menuItem -itl 1 
-l "Optimize Tool..." 
-c "setToolTo texUnfoldUVContext;\nUnfold3DContext -e -optimize texUnfoldUVContext;da_OpenToolSettings" 
-rp "NW" 
-i "optimizeUVTool.png";

menuItem -itl 1 
-l "Symmetrize..." 
-c "setToolTo texSymmetrizeUVContext;\nSymmetrizeUVContext -e texSymmetrizeUVContext;da_OpenToolSettings" 
-i "symmetrizeUVTool.png";

menuItem -itl 1 
-l "Unfold Tool..." 
-c "setToolTo texUnfoldUVContext;\nUnfold3DContext -e -unfold texUnfoldUVContext;da_OpenToolSettings" 
-rp "N" 
-i "unfoldUVTool.png";

menuItem -itl 1 
-l "Pinch..." 
-c "setToolTo texSculptCacheContextObj;\ntexSculptCacheContext -e -m Pinch -i1 texSculptCacheContextObj;da_OpenToolSettings" 
-rp "W" 
-i "pinchUVTool.png";

setParent -m ..;

} 
// Define Tool_Walk marking menu
global proc Tool_Walk_MM_May9(){
string $currentPanel = `getPanel -wf`;

menuItem -itl 1 
-l "Increase Speed" 
-c "da_IncreaseWalkSpeed"
-i "moveUVUp.png" 
-rp "N";

menuItem -itl 1 
-l "Reduce Speed" 
-c "da_ReduceWalkSpeed"
-i "moveUVDown.png" 
-rp "S";

menuItem -itl 1 
-l "Exit" 
-c "da_DisableWalkTool"
-i "RS_disable.png" 
-rp "E";

menuItem -itl 1 
-l "Tool Settings..." 
-c "da_OpenToolSettings"
-i "toolSettings.png" 
-rp "W";

menuItem -itl 1 
-l "Select None"
-c "SelectNone" 
-rp "NE"
-i "hotkeyFieldClear.png";

if (`gmatch $currentPanel "modelPanel*"`){
string $myCamera = `modelPanel -q -cam $currentPanel`;
string $myOverrideCheck = `modelEditor -q -rom $currentPanel`;

menuItem -itl 1
-l "Selection Highlight" 
-c "da_ToggleSelectionHighlighting" 
-cb (`modelEditor -q -sel $currentPanel`);

if (`pluginInfo -q -l mtoa`){
string $myArnoldVersion = substituteAllString(`pluginInfo -q -v mtoa`, ".", "");
int $myArnoldIntVersion = `substring $myArnoldVersion 1 3`;

if (`about -api` >= 20180000 && $myArnoldIntVersion >= 320){
int $myRenderDevice = `getAttr "defaultArnoldRenderOptions.renderDevice"`;

menuItem 
-d 1;

menuItem -itl 1
-l "Arnold Viewport" 
-c "da_ArnoldRenderViewport" 
-cb ($myOverrideCheck == "arnoldViewOverride");

if ($myOverrideCheck == "arnoldViewOverride"){
menuItem
-c "arnoldViewOverrideOptionBox" 
-ob 1;
}

menuItem -itl 1
-l "Arnold GPU" 
-c "da_ToggleRenderDevice" 
-cb ($myRenderDevice);
}
}
}

setParent -m ..;

}
// Define Tool_XGenBrush marking menu
global proc Tool_XGenBrush_MM_May9(){

menuItem -itl 1 
-l "Mirror Off" 
-c "da_XGenBrushMangement_MirrorOff" 
-rp "E";

menuItem -itl 1 
-l "Mirror Z" 
-c "da_XGenBrushMangement_MirrorZ" 
-rp "SE";

menuItem -itl 1 
-l "Mirror Y" 
-c "da_XGenBrushMangement_MirrorY" 
-rp "S";

menuItem -itl 1 
-l "Mirror X" 
-c "da_XGenBrushMangement_MirrorX" 
-rp "SW";

menuItem -itl 1 
-l "Length..." 
-c "XgmSetLengthBrushTool; da_OpenToolSettings" 
-rp "N" 
-i "xgIG_length.png";

menuItem -itl 1 
-l "Comb..." 
-c "XgmSetCombBrushTool; da_OpenToolSettings" 
-rp "W" 
-i "xgIG_comb.png";

menuItem -itl 1 
-l "Freeze..." 
-c "XgmSetFreezeBrushTool; da_OpenToolSettings" 
-rp "NE" 
-i "xgIG_freeze.png";

menuItem -itl 1 
-l "Grab..." 
-c "XgmSetGrabBrushTool; da_OpenToolSettings" 
-rp "NW" 
-i "xgIG_grab.png";

menuItem -itl 1 
-l "Mesh Collide" 
-sm 1;

menuItem -itl 1 
-l "On" 
-c "da_XGenBrushMangement_CollisionOn" 
-i "rvViewingPipelineOn.png";

menuItem -itl 1 
-l "Off" 
-c "da_XGenBrushMangement_CollisionOff" 
-i "rvViewingPipelineOff.png";

setParent -m ..;

menuItem -itl 1 
-l "Groom Editor" 
-c "XgCreateIgSplineEditor" 
-i "xgIG_editor.png";

menuItem -itl 1 
-d 1;

menuItem -itl 1 
-l "Density..." 
-c "XgmSetDensityBrushTool; da_OpenToolSettings" 
-i "xgIG_density.png";

menuItem -itl 1 
-l "Place..." 
-c "XgmSetPlaceBrushTool; da_OpenToolSettings" 
-i "xgIG_place.png";

menuItem -itl 1 
-l "Cut..." 
-c "XgmSetCutBrushTool; da_OpenToolSettings" 
-i "xgIG_cut.png";

menuItem -itl 1 
-l "Width..." 
-c "XgmSetWidthBrushTool; da_OpenToolSettings" 
-i "xgIG_width.png";

menuItem -itl 1 
-l "Twist..." 
-c "XgmSetDirectionBrushTool; da_OpenToolSettings" 
-i "xgIG_twist.png";

menuItem -itl 1 
-l "Smooth..." 
-c "XgmSetSmoothBrushTool; da_OpenToolSettings" 
-i "xgIG_smooth.png";

menuItem -itl 1 
-l "Noise..." 
-c "XgmSetNoiseBrushTool; da_OpenToolSettings" 
-i "xgIG_noise.png";

menuItem -itl 1 
-l "Clump..." 
-c "XgmSetClumpBrushTool; da_OpenToolSettings" 
-i "xgIG_clump.png";

menuItem -itl 1 
-l "Part..." 
-c "XgmSetPartBrushTool; da_OpenToolSettings" 
-i "xgIG_part.png";

menuItem -itl 1 
-d 1;

menuItem -itl 1 
-l "Select..." 
-c "XgmSetSelectBrushTool; da_OpenToolSettings" 
-i "xgIG_select.png";

setParent -m ..;

} 
// Define Tool_XGenGuide marking menu
global proc Tool_XGenGuide_MM_May9(){

menuItem -itl 1 
-l "3D Falloff On" 
-c "xgmGuideSculptContext -e -volumetricSel 1 xgmGuideSculptTool;" 
-rp "NE";

menuItem -itl 1 
-l "3D Falloff Off" 
-c "xgmGuideSculptContext -e -volumetricSel 0 xgmGuideSculptTool;" 
-rp "NW";

menuItem -itl 1 
-l "Highlight On" 
-c "xgmGuideSculptContext -e -selHilight 1 xgmGuideSculptTool;" 
-rp "SE";

menuItem -itl 1 
-l "Highlight Off" 
-c "xgmGuideSculptContext -e -selHilight 0 xgmGuideSculptTool;" 
-rp "SW";

menuItem -itl 1 
-l "Lock Length Off" 
-c "xgmGuideSculptContext -e -lockLength 0 `currentCtx`;" 
-rp "W" 
-i "unlockLength.png";

menuItem -itl 1 
-l "Lock Length On" 
-c "xgmGuideSculptContext -e -lockLength 1 `currentCtx`;" 
-rp "E" 
-i "lockLength.png";

menuItem -itl 1 
-l "Guides Tool" 
-c "XgGuideTool" 
-rp "N" 
-i "xgGuideContext.png";

menuItem -itl 1 
-l "XGen Editor..." 
-c "if (!`pluginInfo -q -loaded xgenToolkit`) loadPlugin xgenToolkit.mll;XgCreateDescriptionEditor" 
-i "xgDEditor.png";

setParent -m ..;

} 
// Define Tool_XGenPlaceGuide marking menu
global proc Tool_XGenPlaceGuide_MM_May9(){

menuItem -itl 1 
-l "Sculpt Guides..." 
-c "python(\"xgui.createDescriptionEditor(False).guideSculptContext(False)\");da_OpenToolSettings" 
-rp "N" 
-i "xgGuideSculptTool.png";

menuItem -itl 1 
-l "Mirror Guides X-axis" 
-c "xgmFlipGuides( python(\"xgui.createDescriptionEditor(False).currentDescription()\") )" 
-rp "W" 
-i "xgFlipGuides.png";

menuItem -itl 1 
-l "Select Description" 
-c "python(\"xgen.selectionToggle(xgui.createDescriptionEditor(False).currentDescription())\");\npython(\"xgen.selectionToggle(xgui.createDescriptionEditor(False).currentDescription())\")" 
-rp "NE" 
-i "xgSelectionToggle.png";

setParent -m ..;

} 
// Define Toon marking menu
global proc Toon_MM_May9(){

menuItem
-l "Toon To Polygons" 
-c "PaintEffectsToPoly" 
-rp "E" 
-i "toonToPolygons.png";

menuItem
-l "Assign PaintFX  to Outline" 
-c "assignBrushToPfxToon" 
-rp "N" 
-i "toonAssignPfxBrush.png";

menuItem
-c "ContentBrowserWindow;contentBrowserSetContext(\"WindowsMenu\", \"examples\", \"Examples/Paint Effects/Airbrush\");" 
-ob 1;

menuItem
-l "Create Modifier" 
-c "createLineModifier" 
-rp "S" 
-i "toonLineModifier.png";

menuItem
-l "Paint Attributes" 
-sm 1;

menuItem
-l "Line Width" 
-c "setToolSettingsVisible 1;\npaintToonAttribute \"lineWidthMap\" \"Line Width\"" 
-i "toonPaintWidth.png";

menuItem
-l "Line Offset" 
-c "setToolSettingsVisible 1;\npaintToonAttribute \"lineOffsetMap\" \"Line Offset\" " 
-i "toonPaintOffset.png";

menuItem
-l "Line Opacity" 
-c "setToolSettingsVisible 1;\npaintToonAttribute \"lineOpacityMap\" \"Line Opacity\" " 
-i "toonPaintOpacity.png";

menuItem
-l "Profile Color" 
-c "setToolSettingsVisible 1;\npaintToonAttribute \"profileColor\" \"Profile Color\" " 
-i "toonPaintProfileColor.png";

menuItem
-l "Crease Color" 
-c "setToolSettingsVisible 1;\npaintToonAttribute \"creaseColor\" \"Crease Color\" " 
-i "toonPaintCreaseColor.png";

menuItem
-l "Border Color" 
-c "setToolSettingsVisible 1;\npaintToonAttribute \"borderColor\" \"Border Color\" " 
-i "toonPaintBorderColor.png";

setParent -m ..;

setParent -m ..;

} 
// Define TransformShape marking menu
global proc TransformShape_MM_May9(){

menuItem
-l "Parent to Transform" 
-c "parent -r -s" 
-rp "N" 
-i "out_transform.png";

setParent -m ..;

} 
// Define TweakMesh marking menu
global proc TweakMesh_MM_May9(){

menuItem
-l "Tweak to Shapes" 
-c "da_TweakToMesh" 
-rp "N" 
-i "da_OneToMany.png";

setParent -m ..;

} 
// Define UV_Editor marking menu
global proc UV_Editor_MM_May9(){

menuItem
-l "Cut/Sew..." 
-c "setToolTo texCutUVContext;\ntexCutContext -edit -mode Cut texCutUVContext;da_OpenToolSettings" 
-rp "NE" 
-i "CutSewUVTool.png";

menuItem
-l "Optimize Tool..." 
-c "setToolTo texUnfoldUVContext;\nUnfold3DContext -e -optimize texUnfoldUVContext;da_OpenToolSettings" 
-rp "NW" 
-i "optimizeUVTool.png";

menuItem
-l "UV Toolkit..." 
-c "da_OpenUvTool" 
-i "UVTk.png";

menuItem
-l "UV Set Editor..." 
-c "UVSetEditor" 
-i "polyUVSetEditor.png";

menuItem
-l "UV Link Editor..." 
-c "UVCentricUVLinkingEditor" 
-i "da_uvLinkEditor.png";

if (`about -api` >= 20190000){
menuItem
-l "Reset UI" 
-c "UVEditorResetAllToDefault" 
-i "deletePreset.png";
}

setParent -m ..;

} 
// Define UV marking menu
global proc UV_MM_May9(){

Sup_Symmetry_MM_May9;

Sup_SoftSelect_MM_May9;

string $EdgeSlide = `xformConstraint -q -type`;

menuItem
-l "Edge Slide"
-c "da_EdgeSlideToggle"
-rp "SE"
-cb ($EdgeSlide == "edge");

menuItem
-l "Select Shell" 
-c "SelectUVShell" 
-rp "E" 
-i "UVEditorShell.png";

menuItem
-l "Select Shell Border" 
-c "SelectUVBorder" 
-rp "W" 
-i "UVEditorShellBorder.png";

menuItem
-l "3D Cut and Sew" 
-c "SetCutSewUVTool" 
-rp "NW" 
-i "CutSewUVTool.png";

menuItem
-l "3D Grab UV..." 
-c "SetMeshGrabUVTool;da_OpenToolSettings" 
-rp "NE" 
-i "UV_3D_Grab_Brush.png";

menuItem
-l "UV Toolkit..." 
-c "da_OpenUvTool" 
-i "UVTk.png";

menuItem
-l "Take Snapshot..." 
-c "performUVSnapshot" 
-i "out_snapshot.png";

menuItem
-d 1;

menuItem
-l "Auto Seams..." 
-c "performPolyAutoSeamUV 1" 
-i "polyAutoSeams.png";

menuItem
-l "Legacy Unfold" 
-c "polyOptUvs -i 5000 -ss 0.001 -gb 0 -gmb 0.5 -pub 0 -ps  0 -oa  0 -us off -ch 1" 
-i "polyUnfoldUVs.png";

if (`pluginInfo -q -l Unfold3D` == 1){
menuItem
-l "Unfold" 
-c "performUnfold 0" 
-i "textureEditorUnfoldUVs.png";

menuItem
-c "performUnfold 1" 
-ob 1;

menuItem
-l "Optimize" 
-c "performPolyOptimizeUV 0" 
-i "optimizeUVTool.png";

menuItem
-c "performPolyOptimizeUV 1" 
-ob 1;
}

menuItem
-d 1;

menuItem
-l "Select Invert"
-c "InvertSelection" 
-i "out_reverse.png";

menuItem
-l "Select All"
-c "SelectAll" 
-i "aselect.png";

menuItem
-d 1;

menuItem
-l "Selection to Edges" 
-c "ConvertSelectionToContainedEdges" 
-i "edges_NEX.png";

menuItem
-l "Selection to Faces" 
-c "ConvertSelectionToFaces" 
-i "faces_NEX.png";

menuItem
-l "Selection to Vertices" 
-c "PolySelectConvert 3" 
-i "vertex_NEX.png";

setParent -m ..;

} 
// Define Vertex marking menu
global proc Vertex_MM_May9(){

Sup_Symmetry_MM_May9;

Sup_SoftSelect_MM_May9;

string $EdgeSlide = `xformConstraint -q -type`;
string $myComponents[] = `ls -sl -fl`;

menuItem
-l "Edge Slide"
-c "da_EdgeSlideToggle"
-rp "SE"
-cb ($EdgeSlide == "edge");

menuItem
-l "Multi Cut"
-c "dR_multiCutTool;"
-rp "W"
-i "multiCut_NEX32.png";

menuItem
-l "Merge"
-c "PolyMerge"
-rp "NE"
-i "polyMerge.png";

menuItem
-l "Average Vertex"
-c "performPolyAverageVertex 0"
-rp "SW"
-i "polyAverageVertex.png";

menuItem
-l "Merge to Center"
-c "MergeToCenter"
-rp "NW"
-i "polyMergeToCenter.png";

menuItem
-l "Extrude"
-c "PolyExtrude"
-rp "E"
-i "polyExtrudeFacet.png";

if (`about -api` >= 20200000){
menuItem
-l "Rivet Constraint" 
-c "Rivet" 
-i "pointOnPolyConstraint.png";
}else{
if(size($myComponents) != 1){
menuItem
-l "Air Rivet..."
-c "da_AirRivet"
-i "out_airField.png";
}else{
menuItem
-l "Air Rivet"
-c "da_AirRivet"
-i "out_airField.png";
}
}

menuItem
-d 1;

menuItem
-l "Edit"
-sm 1
-i "vertex_NEX.png";

menuItem
-l "Transform"
-c "performPolyMove \"\" 0"
-i "polyMoveVertex.png";

menuItem
-l "Detach"
-c "da_DetachVertex"
-i "polySplitVertex.png";

menuItem
-l "Chamfer"
-c "polyChamferVtx 1 0.25 0"
-i "polyChamfer.png";

menuItem
-d 1;

menuItem
-l "Crease Tool"
-c "PolyCreaseTool"
-i "polyCrease.png";

menuItem
-c "python \"creaseSetEditor.showCreaseSetEditor()\";"
-ob 1;

menuItem
-l "Remove Crease"
-c "polyCrease -op 1"
-i "trash.png";

menuItem
-d 1;

menuItem
-l "Transfer Vertex Order"
-c "TransferVertexOrder"
-i "transferIDs.png";

menuItem
-l "Flip"
-c "dR_performSymmetryFlip;\ninViewMessage -pos topCenter -msg \"Select simmetry edge\" -fade;"
-i "polyFlip.png";

menuItem
-l "Symmetrize"
-c "dR_performSymmetrize;\ninViewMessage -pos topCenter -msg \"Select simmetry edge\" -fade;"
-i "symmetrize.png";

menuItem
-l "Set CVs to Zero"
-c "da_ResetSelTweakPoint"
-i "polyCollapseEdge.png";

setParent -m ..;

menuItem
-l "Deformers"
-sm 1
-i "bendNLD.png";

menuItem
-l "Bend"
-c "Bend"
-i "bendNLD.png";

menuItem
-l "Flare"
-c "Flare"
-i "flareNLD.png";

menuItem
-l "Sine"
-c "Sine"
-i "sineNLD.png";

menuItem
-l "Squash"
-c "Squash"
-i "squashNLD.png";

menuItem
-l "Twist"
-c "Twist"
-i "twistNLD.png";

menuItem
-l "Wave"
-c "Wave"
-i "waveNLD.png";

menuItem 
-d 1;

string $myComponentSel[] = `ls -sl -fl`;
if (size($myComponentSel) == 1){
menuItem
-l "Rigged Cluster" 
-c "da_PaintableRiggedCluster" 
-i "cluster.png";
} else {
menuItem
-l "Rigged Cluster..." 
-c "da_PaintableRiggedClusterUI" 
-i "cluster.png";
}

menuItem
-l "Lattice..."
-c "CreateLatticeOptions"
-i "lattice.png";

setParent -m ..;

menuItem
-l "Skin/Muscle"
-sm 1
-i "smoothSkin.png";

menuItem
-l "Muscle Self Collision Groups"
-c "cMuscleSelfCollisionUI(); "
-i "cMuscle_multi_apply.png";

menuItem
-d 1;

menuItem
-l "Paint Skin Weights..."
-c "da_OpenPaintSkinTool"
-i "paintSkinWeights.png";

menuItem
-l "Hammer Skin Weights"
-c "weightHammerVerts"
-i "weightHammer.png";

menuItem
-l "Copy Skin Weights"
-c "artAttrSkinWeightCopy"
-i "polyCopyUV.png";

menuItem
-l "Paste Skin Weights"
-c "artAttrSkinWeightPaste"
-i "polyPasteUV.png";

setParent -m ..;

menuItem
-l "Dynamics"
-sm 1
-i "out_nucleus.png";

menuItem
-l "Emit nParticle..."
-c "NEmitFromObjectOptions"
-i "emitter.png";

menuItem
-l "Particle Style"
-sm 1
-i "out_particle.png";

menuItem
-l "Points"
-c "optionVar -stringValue NParticleStyle \"Points\";"
-i "nPartPoints.png";

menuItem
-l "Balls"
-c "optionVar -stringValue NParticleStyle \"Balls\";"
-i "nPartBalls.png";

menuItem
-l "Cloud"
-c "optionVar -stringValue NParticleStyle \"Cloud\";"
-i "nPartCloud.png";

menuItem
-l "ThickCloud"
-c "optionVar -stringValue NParticleStyle \"ThickCloud\";"
-i "nPartThickCloud.png";

menuItem
-l "Water"
-c "optionVar -stringValue NParticleStyle \"Water\";"
-i "nPartWater.png";

setParent -m ..;

setParent -m ..;

menuItem
-l "nConstraint"
-sm 1
-i "menuIconConstraints.png";

menuItem
-l "Transform Constraint"
-c "doCreateNConstraint transform 0"
-i "nConstraintTransform.png";

menuItem
-l "Self Component"
-c "performCreateComponentNConstraint 0;"
-i "nConstraintComponent.png";

menuItem
-c "performCreateComponentNConstraint 1;"
-ob 1;

menuItem
-l "Component to Component"
-c "performCreateDynamicConstraint 0 \"pointToPoint\";"
-i "nConstraintComponent.png";

menuItem
-l "Tearable Surface"
-c "performCreateDynamicConstraint 0 \"tearableSurface\";"
-i "nConstraintTearable.png";

menuItem
-l "Force Field"
-c "doCreateNConstraint force 0"
-i "nConstraintForceField.png";

menuItem
-d 1;

menuItem
-l "Select Members"
-c "dynamicConstraintMembership \"select\";"
-i "nConstraintSelectMembers.png";

menuItem
-l "Replace Members"
-c "dynamicConstraintMembership \"replace\";"
-i "nConstraintReplaceMembers.png";

menuItem
-l "Add Members"
-c "dynamicConstraintMembership \"add\";"
-i "nConstraintAddMembers.png";

menuItem
-l "Remove Members"
-c "dynamicConstraintMembership \"remove\";"
-i "nConstraintRemoveMembers.png";

setParent -m ..;

menuItem
-l "Select"
-sm 1
-i "aselect.png";

menuItem
-l "Invert"
-c "da_InvertSelection" 
-i "out_reverse.png";

menuItem
-l "All"
-c "da_SelectAll" 
-i "aselect.png";

menuItem
-d 1;

menuItem
-l "Selection Constraints..."
-c "PolygonSelectionConstraints"
-i "polySelectUsingConstraints.png";

menuItem
-l "Create Quick Set..."
-c "CreateQuickSelectSet" 
-i "out_objectSet.png";

setParent -m ..;

menuItem
-d 1;

menuItem
-l "Selection to UVs"
-c "ConvertSelectionToUVs"
-i "UVEditorVertex.png";

setParent -m ..;

} 
// Define volumeAxisField marking menu
global proc volumeAxisField_MM_May9(){
string $myCurve[] = `filterExpand -sm 9`;
string $myCurTransform[] = `ls -sl -typ "transform"`;

menuItem
-l "Connect and Set to Curve"
-c "da_VolumeFieldToCurve"
-i "out_nurbsCurve.png"
-rp "N"
-en (size($myCurve) == 1);

menuItem
-l "Assign Field to Selected" 
-c "AffectSelectedObject" 
-rp "W" 
-i "connectField.png" 
-en (size($myCurTransform) >= 2);

menuItem
-l "Set to Cube"
-c "da_VolumeFieldCube"
-i "volumeCube.png"
-rp "E";

menuItem
-l "Dynamic Relationship..."
-c "DynamicRelationshipEditor"
-i "passSetRelationEditor.png"
-rp "S";

setParent -m ..;

}
// Define Window_UV_Edge marking menu
global proc Window_UV_Edge_MM_May9(){

Sup_Symmetry_MM_May9;

Sup_SoftSelect_MM_May9;

string $EdgeSlide = `xformConstraint -q -type`;

menuItem
-l "Edge Slide"
-c "da_EdgeSlideToggle"
-rp "SE"
-cb ($EdgeSlide == "edge");

menuItem
-l "Cut"
-c "CutUVs"
-i "polyCutUV.png"
-rp "E";

menuItem
-l "Sew"
-c "SewUVs"
-i "polySewUV.png"
-rp "W";

menuItem
-l "Stitch" 
-c "texMultiStitch 1" 
-rp "SW" 
-i "polyUVMultiStitch.png";

menuItem
-l "Optimize Tool..." 
-c "setToolTo texUnfoldUVContext;\nUnfold3DContext -e -optimize texUnfoldUVContext;da_OpenToolSettings" 
-rp "NW" 
-i "optimizeUVTool.png";

menuItem
-l "Cut/Sew..." 
-c "setToolTo texCutUVContext;\ntexCutContext -edit -mode Cut texCutUVContext;da_OpenToolSettings" 
-rp "NE" 
-i "CutSewUVTool.png";

menuItem
-l "UV Toolkit..." 
-c "da_OpenUvTool" 
-i "UVTk.png";

menuItem
-d 1;

menuItem
-l "Auto Seams..." 
-c "performPolyAutoSeamUV 1" 
-i "polyAutoSeams.png";

menuItem
-l "Legacy Unfold" 
-c "polyOptUvs -i 5000 -ss 0.001 -gb 0 -gmb 0.5 -pub 0 -ps  0 -oa  0 -us off -ch 1" 
-i "polyUnfoldUVs.png";

if (`pluginInfo -q -l Unfold3D` == 1){
menuItem
-l "Unfold" 
-c "performUnfold 0" 
-i "textureEditorUnfoldUVs.png";

menuItem
-c "performUnfold 1" 
-ob 1;

menuItem
-l "Optimize" 
-c "performPolyOptimizeUV 0" 
-i "optimizeUVTool.png";

menuItem
-c "performPolyOptimizeUV 1" 
-ob 1;
}

menuItem
-l "Layout" 
-c "LayoutUV" 
-i "layoutUV.png";

menuItem
-c "LayoutUVOptions" 
-ob 1;

menuItem
-d 1;

menuItem
-l "Edges to Curves" 
-c "da_ConvertUvEdgeToCurve" 
-i "polyEdgeToCurves.png";

menuItem
-l "To Loops to Curves..." 
-c "da_EdgesToLoopToCurve" 
-i "da_EdgeToLoopToCurve.png";

menuItem
-d 1;

menuItem
-l "Selection to UVs" 
-c "ConvertSelectionToUVs" 
-i "UVEditorVertex.png";

setParent -m ..;

} 
// Define Window_UV_Face marking menu
global proc Window_UV_Face_MM_May9(){

menuItem
-l "Flip U" 
-c "polyFlipUV -flipType 0 -local on" 
-rp "N" 
-i "flipU.png";

menuItem
-l "Select Shell" 
-c "da_SelectShellFromFaces" 
-rp "E" 
-i "UVTkUVShell.png";

menuItem
-l "Automatic Map..." 
-c "performPolyAutoProj 1" 
-rp "SW" 
-i "polyAutoProj.png";

menuItem
-l "Spherical Map" 
-c "performPolyProjectionArgList \"1\" {\"0\", \"Spherical\", \"ls -selection\", \"0\"} \"\";" 
-rp "SE" 
-i "polySphereProj.png";

menuItem
-l "Match Shells Scale" 
-c "uvTkDoGetTexelDensity;uvTkDoSetTexelDensity" 
-rp "W" 
-i "polyScaleUV.png";

menuItem
-l "Per Face Map..."
-c "da_MapFacesFacesUV"
-rp "S" 
-i "polyNormalProj.png";

menuItem
-l "UV Toolkit..." 
-c "da_OpenUvTool" 
-i "UVTk.png";

menuItem
-d 1;

menuItem
-l "Layout" 
-c "LayoutUV" 
-i "layoutUV.png";

menuItem
-c "LayoutUVOptions" 
-ob 1;

menuItem
-d 1;

menuItem
-l "Selection to UVs" 
-c "ConvertSelectionToUVs" 
-i "UVEditorVertex.png";

setParent -m ..;

} 
// Define Window_UV_Mesh marking menu
global proc Window_UV_Mesh_MM_May9(){
string $mySelShape[] = `listRelatives -f -s`;
int $myUVSmoothMode = `getAttr ($mySelShape[0] + ".osdFvarBoundary")`;

menuItem
-l "Auto Unfold..." 
-c "da_AutoUnfold" 
-rp "N" 
-i "UV_Unfold_Brush.png";

menuItem
-l "Optimize Tool..." 
-c "setToolTo texUnfoldUVContext;\nUnfold3DContext -e -optimize texUnfoldUVContext;da_OpenToolSettings" 
-rp "NW" 
-i "optimizeUVTool.png";

menuItem
-l "Cut/Sew..." 
-c "setToolTo texCutUVContext;\ntexCutContext -edit -mode Cut texCutUVContext;da_OpenToolSettings" 
-rp "NE" 
-i "CutSewUVTool.png";

menuItem
-l "Automatic Map..." 
-c "performPolyAutoProj 1" 
-rp "SW" 
-i "polyAutoProj.png";

menuItem
-l "Spherical Map" 
-c "performPolyProjectionArgList \"1\" {\"0\", \"Spherical\", \"ls -selection\", \"0\"} \"\";" 
-rp "SE" 
-i "polySphereProj.png";

menuItem
-l "Per Face Map..."
-c "da_MapFacesUV"
-rp "E"
-i "polyNormalProj.png";

menuItem 
-l "Smooth UV Borders" 
-c "da_SmoothUV"
-rp "S"
-cb ($myUVSmoothMode == 2);

menuItem
-l "Mono Shell Map"
-c "da_SingleShellMapping"
-rp "W"
-i "UVEditorShell.png";

menuItem
-l "UV Toolkit..." 
-c "da_OpenUvTool" 
-i "UVTk.png";

menuItem
-l "Symmetrize..." 
-c "setToolTo texSymmetrizeUVContext;\nSymmetrizeUVContext -e texSymmetrizeUVContext;da_OpenToolSettings" 
-i "symmetrizeUVTool.png";

menuItem
-d 1;

menuItem
-l "Auto Seams..." 
-c "performPolyAutoSeamUV 1" 
-i "polyAutoSeams.png";

menuItem
-l "Legacy Unfold" 
-c "polyOptUvs -i 5000 -ss 0.001 -gb 0 -gmb 0.5 -pub 0 -ps  0 -oa  0 -us off -ch 1" 
-i "polyUnfoldUVs.png";

if (`pluginInfo -q -l Unfold3D` == 1){
menuItem
-l "Unfold" 
-c "performUnfold 0" 
-i "textureEditorUnfoldUVs.png";

menuItem
-c "performUnfold 1" 
-ob 1;

menuItem
-l "Optimize" 
-c "performPolyOptimizeUV 0" 
-i "optimizeUVTool.png";

menuItem
-c "performPolyOptimizeUV 1" 
-ob 1;
}

menuItem
-l "Layout" 
-c "LayoutUV" 
-i "layoutUV.png";

menuItem
-c "LayoutUVOptions" 
-ob 1;

menuItem
-l "Match Shells Scale" 
-c "uvTkDoGetTexelDensity;uvTkDoSetTexelDensity" 
-i "polyScaleUV.png";

menuItem
-d 1;

menuItem
-l "UV Set Editor..." 
-c "UVSetEditor" 
-i "polyUVSetEditor.png";

menuItem
-l "UV Link Editor" 
-c "UVCentricUVLinkingEditor" 
-i "da_uvLinkEditor.png";

if (`about -api` >= 20190000){
menuItem
-l "Reset UI" 
-c "UVEditorResetAllToDefault" 
-i "deletePreset.png";
}

menuItem
-d 1;

menuItem
-l "Select UVs" 
-c "ConvertSelectionToUVs" 
-i "UVEditorVertex.png";

setParent -m ..;

} 
// Define Window_UV_UV marking menu
global proc Window_UV_UV_MM_May9(){

Sup_Symmetry_MM_May9;

Sup_SoftSelect_MM_May9;

string $EdgeSlide = `xformConstraint -q -type`;

menuItem
-l "Edge Slide"
-c "da_EdgeSlideToggle"
-rp "SE"
-cb ($EdgeSlide == "edge");

menuItem
-l "Optimize Tool..." 
-c "setToolTo texUnfoldUVContext;\nUnfold3DContext -e -optimize texUnfoldUVContext;da_OpenToolSettings" 
-rp "NW" 
-i "optimizeUVTool.png";

menuItem
-l "Select Shell" 
-c "SelectUVShell" 
-rp "E" 
-i "UVEditorShell.png";

menuItem
-l "Lattice..." 
-c "LatticeUVTool;da_OpenToolSettings" 
-rp "NE" 
-i "uvlattice.png";

menuItem
-l "Select Shell Border" 
-c "SelectUVBorder" 
-rp "W" 
-i "UVEditorShellBorder.png";

menuItem
-l "UV Toolkit..." 
-c "da_OpenUvTool" 
-i "UVTk.png";

menuItem
-l "Take Snapshot..." 
-c "performUVSnapshot" 
-i "out_snapshot.png";

menuItem
-d 1;

menuItem
-l "Symmetrize" 
-c "SymmetrizeUV" 
-i "polySymmetrizeUV.png";

menuItem
-c "SymmetrizeUVOptions" 
-ob 1;

menuItem
-l "Auto Seams..." 
-c "performPolyAutoSeamUV 1" 
-i "polyAutoSeams.png";

menuItem
-l "Legacy Unfold" 
-c "polyOptUvs -i 5000 -ss 0.001 -gb 0 -gmb 0.5 -pub 0 -ps  0 -oa  0 -us off -ch 1" 
-i "polyUnfoldUVs.png";

if (`pluginInfo -q -l Unfold3D` == 1){
menuItem
-l "Unfold" 
-c "performUnfold 0" 
-i "textureEditorUnfoldUVs.png";

menuItem
-c "performUnfold 1" 
-ob 1;

menuItem
-l "Optimize" 
-c "performPolyOptimizeUV 0" 
-i "optimizeUVTool.png";

menuItem
-c "performPolyOptimizeUV 1" 
-ob 1;
}

menuItem
-l "Straighten" 
-c "performPolyStraightenUVs 0" 
-i "polyStraightenUV.png";

menuItem
-c "performPolyStraightenUVs 1" 
-ob 1;

menuItem
-l "Rotate" 
-c "performPolyRotateUVs 0" 
-i "polyRotateUVCCW.png";

menuItem
-c "performPolyRotateUVs 1" 
-ob 1;

menuItem
-l "Layout" 
-c "LayoutUV" 
-i "layoutUV.png";

menuItem
-c "LayoutUVOptions" 
-ob 1;

menuItem
-d 1;

menuItem
-l "Select Invert"
-c "InvertSelection" 
-i "out_reverse.png";

menuItem
-l "Select All"
-c "SelectAll" 
-i "aselect.png";

menuItem
-d 1;

menuItem
-l "Selection to Edges" 
-c "ConvertSelectionToContainedEdges" 
-i "edges_NEX.png";

menuItem
-l "Selection to Faces" 
-c "ConvertSelectionToFaces" 
-i "faces_NEX.png";

menuItem
-l "Selection to Vertices" 
-c "ConvertSelectionToVertices" 
-i "vertex_NEX.png";

menuItem
-l "Match Shells Scale" 
-c "uvTkDoGetTexelDensity;uvTkDoSetTexelDensity" 
-rp "SW" 
-i "polyScaleUV.png";

setParent -m ..;

} 
// Define Window_UV_Vertex marking menu
global proc Window_UV_Vertex_MM_May9(){

menuItem
-l "Selection to UVs" 
-c "ConvertSelectionToUVs" 
-rp "N" 
-i "UVEditorVertex.png";

menuItem
-l "UV Toolkit..." 
-c "da_OpenUvTool" 
-i "UVTk.png";

menuItem
-d 1;

menuItem
-l "Layout" 
-c "LayoutUV" 
-i "layoutUV.png";

menuItem
-c "LayoutUVOptions" 
-ob 1;

setParent -m ..;

} 
// Define XGen_Description marking menu
global proc XGen_Description_MM_May9(){

menuItem
-l "Convert to Interactive Groom..." 
-c "python(\"xgui.createXgIgConvertToInteractiveGroomWindow()\")" 
-rp "E" 
-i "xgConvertToIG.png";

menuItem
-l "Guides Tool"
-c "XgGuideTool"
-rp "N" 
-i "xgGuideContext.png";

menuItem
-l "Primitives to Poly..."
-c "python(\"import xgenm.xmaya.xgmConvertPrimToPolygon as cpp;cpp.convertPrimToPolygon(True)\")"
-rp "S" 
-i "da_xgPolyConvert.png";

menuItem
-l "Sculpt Guides..."
-c "python(\"xgui.createDescriptionEditor(False).guideSculptContext(False)\");da_OpenToolSettings"
-rp "NE" 
-i "xgGuideSculptTool.png";

menuItem
-l "XGen Editor..." 
-c "if (!`pluginInfo -q -loaded xgenToolkit`) loadPlugin xgenToolkit.mll;XgCreateDescriptionEditor" 
-i "xgDEditor.png";

menuItem
-l "XGen Library..."
-c "XGenLibraryWindow"
-i "xgLibrary.png";

setParent -m ..;

} 
// Define XGen_Guides marking menu
global proc XGen_Guides_MM_May9(){

menuItem
-l "Sculpt Guides..." 
-c "python(\"xgui.createDescriptionEditor(False).guideSculptContext(False)\");da_OpenToolSettings" 
-rp "N" 
-i "xgGuideSculptTool.png";

menuItem
-l "Guides Tool" 
-c "XgGuideTool" 
-rp "S" 
-i "xgGuideContext.png";

menuItem
-l "Primitives to Poly..." 
-c "python(\"import xgenm.xmaya.xgmConvertPrimToPolygon as cpp;cpp.convertPrimToPolygon(False)\")" 
-rp "E" 
-i "da_xgPolyConvert.png";

menuItem
-c "python(\"import xgenm.xmaya.xgmConvertPrimToPolygon as cpp;cpp.convertPrimToPolygon(True)\")" 
-ob 1;

menuItem
-l "Mirror Guides X-axis" 
-c "xgmFlipGuides( python(\"xgui.createDescriptionEditor(False).currentDescription()\") )" 
-rp "W" 
-i "xgFlipGuides.png";

menuItem
-l "Select Description" 
-c "python(\"xgen.selectionToggle(xgui.createDescriptionEditor(False).currentDescription())\");\npython(\"xgen.selectionToggle(xgui.createDescriptionEditor(False).currentDescription())\")" 
-rp "NE" 
-i "xgSelectionToggle.png";

menuItem
-l "XGen Editor..." 
-c "if (!`pluginInfo -q -loaded xgenToolkit`) loadPlugin xgenToolkit.mll;XgCreateDescriptionEditor" 
-i "xgDEditor.png";

setParent -m ..;

} 
// Define XGen_Patch marking menu
global proc XGen_Patch_MM_May9(){

menuItem
-l "Sculpt Guides..." 
-c "python(\"xgui.createDescriptionEditor(False).guideSculptContext(False)\");da_OpenToolSettings" 
-rp "N" 
-i "xgGuideSculptTool.png";

menuItem
-l "Guides Tool" 
-c "XgGuideTool" 
-rp "S" 
-i "xgGuideContext.png";

menuItem
-l "Primitives to Poly..." 
-c "python(\"import xgenm.xmaya.xgmConvertPrimToPolygon as cpp;cpp.convertPrimToPolygon(False)\")" 
-rp "E" 
-i "da_xgPolyConvert.png";

menuItem
-c "python(\"import xgenm.xmaya.xgmConvertPrimToPolygon as cpp;cpp.convertPrimToPolygon(True)\")" 
-ob 1;

menuItem
-l "XGen Editor..." 
-c "if (!`pluginInfo -q -loaded xgenToolkit`) loadPlugin xgenToolkit.mll;XgCreateDescriptionEditor" 
-i "xgDEditor.png";

setParent -m ..;

} 
// Define XGen_SplineDescription marking menu
global proc XGen_SplineDescription_MM_May9(){

menuItem 
-l "Mirror Off" 
-c "da_XGenBrushMangement_MirrorOff" 
-rp "E";

menuItem 
-l "Mirror Z" 
-c "da_XGenBrushMangement_MirrorZ" 
-rp "SE";

menuItem 
-l "Mirror Y" 
-c "da_XGenBrushMangement_MirrorY" 
-rp "S";

menuItem 
-l "Mirror X" 
-c "da_XGenBrushMangement_MirrorX" 
-rp "SW";

menuItem 
-l "Length..." 
-c "XgmSetLengthBrushToolOption" 
-rp "N" 
-i "xgIG_length.png";

menuItem 
-l "Comb..." 
-c "XgmSetCombBrushToolOption" 
-rp "W" 
-i "xgIG_comb.png";

menuItem 
-l "Freeze..." 
-c "XgmSetFreezeBrushToolOption" 
-rp "NE" 
-i "xgIG_freeze.png";

menuItem 
-l "Grab..." 
-c "XgmSetGrabBrushToolOption" 
-rp "NW" 
-i "xgIG_grab.png";

menuItem 
-l "Groom Editor" 
-c "XgCreateIgSplineEditor" 
-i "xgIG_editor.png";

menuItem 
-l "Groom to Polygons..." 
-c "import xgenm.xmaya.xgmSplineToGeometryConvert as convert;convert.convertPrimToPolygon(True)" 
-i "xgConvertToPoly.png" 
-stp "python";

menuItem 
-d 1;

menuItem 
-l "Density..." 
-c "XgmSetDensityBrushToolOption" 
-i "xgIG_density.png";

menuItem 
-l "Place..." 
-c "XgmSetPlaceBrushToolOption" 
-i "xgIG_place.png";

menuItem 
-l "Cut..." 
-c "XgmSetCutBrushToolOption" 
-i "xgIG_cut.png";

menuItem 
-l "Width..." 
-c "XgmSetWidthBrushToolOption" 
-i "xgIG_width.png";

menuItem 
-l "Twist..." 
-c "XgmSetDirectionBrushToolOption" 
-i "xgIG_twist.png";

menuItem 
-l "Smooth..." 
-c "XgmSetSmoothBrushToolOption" 
-i "xgIG_smooth.png";

menuItem 
-l "Noise..." 
-c "XgmSetNoiseBrushToolOption" 
-i "xgIG_noise.png";

menuItem 
-l "Clump..." 
-c "XgmSetClumpBrushToolOption" 
-i "xgIG_clump.png";

menuItem 
-l "Part..." 
-c "XgmSetPartBrushToolOption" 
-i "xgIG_part.png";

menuItem 
-d 1;

menuItem 
-l "Select..." 
-c "XgmSetSelectBrushToolOption" 
-i "xgIG_select.png";

setParent -m ..;

} 

// Define Support SoftSelect marking menu
global proc USD_MM_May9(){

menuItem 
-l "USD Layer Editor" 
-c "UsdLayerEditor" 
-i "USD_generic.png"
-rp "N";

setParent -m ..;

}
// Support MMs

// Define Support SoftSelect marking menu
global proc Sup_SoftSelect_MM_May9(){
int $softSelectOn = `softSelect -q -softSelectEnabled`;
int $fallofMode = `softSelect -q -softSelectFalloff`;
int $softSelectColourOn = `softSelect -q -enableFalseColor`;

menuItem 
-l "Soft Selection"
-i "customSoftSelectFalloffCurve.png"
-sm 1
-rp "S";

menuItem 
-l "Colour Feedback"
-checkBox $softSelectColourOn
-c ("softSelect -e -enableFalseColor #1");

radioMenuItemCollection;

menuItem 
-l "Soft Select"
-rp "S"
-cb $softSelectOn
-c ("softSelect -e -softSelectEnabled #1");

menuItem 
-l "Surface"
-rp	"W"
-rb (1 == $fallofMode)
-c ("softSelect -e -softSelectFalloff 1");

menuItem 
-l "Volume"
-rp	"SW"
-rb (0 == $fallofMode)
-c ("softSelect -e -softSelectFalloff 0");

menuItem
-l "Global"
-rp "SE" 
-rb (2 == $fallofMode)
-c "softSelect -e -softSelectFalloff 2";

menuItem
-l "Object"
-rp "E" 
-rb (3 == $fallofMode)
-c "softSelect -e -softSelectFalloff 3";

setParent -m ..;

}
// Define Support Symmetry marking menu
global proc Sup_Symmetry_MM_May9(){
int $reflectionOn = `symmetricModelling -q -symmetry`;

int $reflectionAbout;
string $val = `symmetricModelling -q -about` ;
if ($val == "world")
$reflectionAbout = 0;
else if ($val == "object")
$reflectionAbout = 1;
else // topo
$reflectionAbout = 2;

int $reflectionAxis;
$val = `symmetricModelling -q -axis` ;
if ($val == "x")
$reflectionAxis = 0;
else if ($val == "y")
$reflectionAxis = 1;
else
$reflectionAxis = 2;

menuItem 
-l "Symmetry"
-i "symmetryConstraint.svg"
-sm 1
-radialPosition	"N";

menuItem 
-l "Symmetry"
-rp	"N"
-cb	$reflectionOn
-c	("symmetricModelling -e -symmetry #1; if (#1) SymmetrizeSelection;");

radioMenuItemCollection;

menuItem 
-l "World"
-rp	"SE"
-rb	($reflectionAbout == 0)
-c	("symmetricModelling -e -about \"world\"");

menuItem 
-l "Object"
-rp	"E"
-rb	($reflectionAbout == 1)
-c	("symmetricModelling -e -about \"object\"");

menuItem 
-l "Topology"
-rp	"NE"
-rb	($reflectionAbout == 2)
-c	("reflectionSetMode topo");

radioMenuItemCollection;

menuItem 
-l "X Axis"
-rp	"NW"
-rb	($reflectionAxis == 0)
-c ("symmetricModelling -e -axis \"x\"");

menuItem 
-l "Y Axis"
-rp	"W"
-rb	($reflectionAxis == 1)
-c	("symmetricModelling -e -axis \"y\"");

menuItem 
-l "Z Axis"
-rp	"SW"
-rb	($reflectionAxis == 2)
-c	("symmetricModelling -e -axis \"z\"");

setParent -m ..;

}

// Define Support Symmetry for PaintSkin marking menu
global proc Sup_Symmetry_PaintSkin_MM_May9(){
int $reflectionOn = `symmetricModelling -q -symmetry`;

int $reflectionAxis;
$val = `symmetricModelling -q -axis` ;
if ($val == "x")
$reflectionAxis = 0;
else if ($val == "y")
$reflectionAxis = 1;
else
$reflectionAxis = 2;

menuItem -itl 1 
-l "Symmetry"
-i "symmetryConstraint.svg"
-sm 1
-radialPosition	"N";

menuItem -itl 1 
-l "Symmetry"
-rp	"N"
-cb	$reflectionOn
-c	("symmetricModelling -e -symmetry #1; if (#1) SymmetrizeSelection; symmetricModelling -e -about \"object\"");

radioMenuItemCollection;

menuItem -itl 1 
-l "X Axis"
-rp	"NW"
-rb	($reflectionAxis == 0)
-c ("symmetricModelling -e -axis \"x\"; symmetricModelling -e -about \"object\"");

menuItem -itl 1 
-l "Y Axis"
-rp	"W"
-rb	($reflectionAxis == 1)
-c	("symmetricModelling -e -axis \"y\"; symmetricModelling -e -about \"object\"");

menuItem -itl 1 
-l "Z Axis"
-rp	"SW"
-rb	($reflectionAxis == 2)
-c	("symmetricModelling -e -axis \"z\"; symmetricModelling -e -about \"object\"");

setParent -m ..;

}

// Define Support JointLabel marking menu
global proc Sup_JointLabel_MM_May9(){
menuItem 
-l "Labelling"
-sm 1;

menuItem 
-l "Add Label" 
-sm 1
fbikLabelItem;

menuItem
-rtc "FBIKLabelLeft";

menuItem 
-rtc "FBIKLabelRight";

menuItem 
-rtc "FBIKLabelCenter";

menuItem 
-d 1;

menuItem 
-rtc "FBIKLabelNone";

menuItem 
-rtc "FBIKLabelArm";

menuItem 
-rtc "FBIKLabelLeg";

menuItem 
-d 1;

menuItem 
-rtc "FBIKLabelCollar";

menuItem 
-rtc "FBIKLabelElbow";

menuItem 
-rtc "FBIKLabelFoot";

menuItem 
-rtc "FBIKLabelHand";

menuItem 
-rtc "FBIKLabelHead";

menuItem 
-rtc "FBIKLabelHip";

menuItem 
-rtc "FBIKLabelKnee";

menuItem 
-rtc "FBIKLabelNeck";

menuItem 
-rtc "FBIKLabelRoot";

menuItem 
-rtc "FBIKLabelShoulder";

menuItem 
-rtc "FBIKLabelSpine";

menuItem 
-d 1;

menuItem 
-rtc "FBIKLabelThumb";

menuItem 
-rtc "FBIKLabelIndex";

menuItem 
-rtc "FBIKLabelMiddleFinger";

menuItem 
-rtc "FBIKLabelRingFinger";

menuItem 
-rtc "FBIKLabelPinky";

menuItem 
-rtc "FBIKLabelExtraFinger";

menuItem 
-rtc "FBIKLabelFingerBase";

menuItem 
-d 1;

menuItem 
-rtc "FBIKLabelBigToe";

menuItem 
-rtc "FBIKLabelIndexToe";

menuItem 
-rtc "FBIKLabelMiddleToe";

menuItem 
-rtc "FBIKLabelRingToe";

menuItem 
-rtc "FBIKLabelPinkyToe";

menuItem 
-rtc "FBIKLabelFootThumb";

menuItem 
-rtc "FBIKLabelToeBase";

setParent -m ..;

menuItem 
-d 1;

menuItem 
-rtc "ToggleSelectedLabels";

menuItem 
-rtc "ShowAllLabels";

menuItem 
-rtc "HideAllLabels";

menuItem 
-d 1;

menuItem 
-rtc "RenameJointsFromLabels"
renameJointsMenu;

menuItem 
-rtc "LabelBasedOnJointNames"
labelJointsMenu;

setParent -m ..;
}