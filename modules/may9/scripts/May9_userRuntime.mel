// Remove May9 RunTime Commands
global proc May9_runTimeCommandsRemover(){

catchQuiet (`runTimeCommand -e -del da_MMtoKey_press`);

catchQuiet (`runTimeCommand -e -del da_MMtoKey_release`);

catchQuiet (`runTimeCommand -e -del da_BifrostGeoToMaya`);

catchQuiet (`runTimeCommand -e -del da_BifBoardEdit`);

catchQuiet (`runTimeCommand -e -del da_BifrostGraphEditor`);

catchQuiet (`runTimeCommand -e -del da_DeltaWrap`);

catchQuiet (`runTimeCommand -e -del da_ParticleTrails`);

catchQuiet (`runTimeCommand -e -del da_SmoothProxy`);

catchQuiet (`runTimeCommand -e -del da_FluidSelfShadowingOn`);

catchQuiet (`runTimeCommand -e -del da_FluidSelfShadowingOff`);

catchQuiet (`runTimeCommand -e -del da_nParticleNoLiveOutsideEmitter`);

catchQuiet (`runTimeCommand -e -del da_nParticleLiveOutsideEmitter`);

catchQuiet (`runTimeCommand -e -del da_NodeEditorNoClick`);

catchQuiet (`runTimeCommand -e -del da_PolyCombine`);

catchQuiet (`runTimeCommand -e -del da_PolySeparate`);

catchQuiet (`runTimeCommand -e -del da_CopyAttributeEditorTab`);

catchQuiet (`runTimeCommand -e -del da_ToggleFogging`);

catchQuiet (`runTimeCommand -e -del da_AttachToMotionPath`);

catchQuiet (`runTimeCommand -e -del da_ToggleKeyTangent`);

catchQuiet (`runTimeCommand -e -del da_ToggleGraphInfinity`);

catchQuiet (`runTimeCommand -e -del da_SineChannel`);

catchQuiet (`runTimeCommand -e -del da_NoiseChannel`);

catchQuiet (`runTimeCommand -e -del da_DofLocator`);

catchQuiet (`runTimeCommand -e -del da_ExposeJointOrient`);

catchQuiet (`runTimeCommand -e -del da_SelectAll`);

catchQuiet (`runTimeCommand -e -del da_InvertSelection`);

catchQuiet (`runTimeCommand -e -del da_SculptDeformer`);

catchQuiet (`runTimeCommand -e -del da_ExpressionEditor`);

catchQuiet (`runTimeCommand -e -del da_StringNodeToExpression`);

catchQuiet (`runTimeCommand -e -del da_LocatorOnSurface`);

catchQuiet (`runTimeCommand -e -del da_LocatorOnCurve`);

catchQuiet (`runTimeCommand -e -del da_PointOnCurve`);

catchQuiet (`runTimeCommand -e -del da_IncreaseLocatorSize`);

catchQuiet (`runTimeCommand -e -del da_DecreaseLocatorSize`);

catchQuiet (`runTimeCommand -e -del da_CurveCvRivet`);

catchQuiet (`runTimeCommand -e -del da_RiggedCluster`);

catchQuiet (`runTimeCommand -e -del da_VolumeFieldCube`);

catchQuiet (`runTimeCommand -e -del da_VolumeFieldCurve`);

catchQuiet (`runTimeCommand -e -del da_FiledCurve`);

catchQuiet (`runTimeCommand -e -del da_VolumeFieldToCurve`);

catchQuiet (`runTimeCommand -e -del da_SelectLayerObject`);

catchQuiet (`runTimeCommand -e -del da_SelectFromAnimCurve`);

catchQuiet (`runTimeCommand -e -del da_ChannelBox`);

catchQuiet (`runTimeCommand -e -del da_ConnectPlace2dToFile`);

catchQuiet (`runTimeCommand -e -del da_TogglePivotVisibility`);

catchQuiet (`runTimeCommand -e -del da_AiPointLightVisible`);

catchQuiet (`runTimeCommand -e -del da_AiNoPointLightVisible`);

catchQuiet (`runTimeCommand -e -del da_AiLightVisible`);

catchQuiet (`runTimeCommand -e -del da_AiNoLightVisible`);

catchQuiet (`runTimeCommand -e -del da_AiRenderToTexture`);

catchQuiet (`runTimeCommand -e -del da_EditConstraintMembershipTool`);

catchQuiet (`runTimeCommand -e -del da_CompleteEditConstraintMembershipTool`);

catchQuiet (`runTimeCommand -e -del da_ToggleSelectionHighlighting`);

catchQuiet (`runTimeCommand -e -del da_ToggleControllersVis`);

catchQuiet (`runTimeCommand -e -del da_ToggleRenderDevice`);

catchQuiet (`runTimeCommand -e -del da_AiAreaLight`);

catchQuiet (`runTimeCommand -e -del da_RemoveInfinity`);

catchQuiet (`runTimeCommand -e -del da_AiPortalModeOff`);

catchQuiet (`runTimeCommand -e -del da_AiPortalModeInterior`);

catchQuiet (`runTimeCommand -e -del da_AiPortalModeInteriorExterior`);

catchQuiet (`runTimeCommand -e -del da_SelectionSize`);

catchQuiet (`runTimeCommand -e -del da_EditMembershipTool`);

catchQuiet (`runTimeCommand -e -del da_CompleteEditMembershipTool`);

catchQuiet (`runTimeCommand -e -del da_BlueOverrides`);

catchQuiet (`runTimeCommand -e -del da_BatchSkinTransfertUI`);

catchQuiet (`runTimeCommand -e -del da_InteractivePlayback`);

catchQuiet (`runTimeCommand -e -del da_ToggleEmitterManipulators`);

catchQuiet (`runTimeCommand -e -del da_nParticleKill`);

catchQuiet (`runTimeCommand -e -del da_OpenPaintSkinTool`);

catchQuiet (`runTimeCommand -e -del da_ClosePaintSkinTool`);

catchQuiet (`runTimeCommand -e -del da_OpenToolSettings`);

catchQuiet (`runTimeCommand -e -del da_ToggleUndoState`);

catchQuiet (`runTimeCommand -e -del da_BindRigidSkin`);
	
catchQuiet (`runTimeCommand -e -del da_HgHierachy`);

catchQuiet (`runTimeCommand -e -del da_HgConnections`);

catchQuiet (`runTimeCommand -e -del da_OutlinerNoClick`);

catchQuiet (`runTimeCommand -e -del da_EditContainer`);

catchQuiet (`runTimeCommand -e -del da_ToggleContainer`);

catchQuiet (`runTimeCommand -e -del da_DetachEdge`);

catchQuiet (`runTimeCommand -e -del da_DetachVertex`);

catchQuiet (`runTimeCommand -e -del da_SelectTriangle`);

catchQuiet (`runTimeCommand -e -del da_SelectNsided`);

catchQuiet (`runTimeCommand -e -del da_CleanNonmainfold`);

catchQuiet (`runTimeCommand -e -del da_ToggleWalkTool`);

catchQuiet (`runTimeCommand -e -del da_EnableWalkTool`);

catchQuiet (`runTimeCommand -e -del da_DisableWalkTool`);

catchQuiet (`runTimeCommand -e -del da_IncreaseWalkSpeed`);

catchQuiet (`runTimeCommand -e -del da_ReduceWalkSpeed`);

catchQuiet (`runTimeCommand -e -del da_SkinPaintMode`);

catchQuiet (`runTimeCommand -e -del da_AutoUnfold`);

catchQuiet (`runTimeCommand -e -del da_DeltaSkin`);

catchQuiet (`runTimeCommand -e -del da_SmoothUV`);

catchQuiet (`runTimeCommand -e -del da_SingleShellMapping`);

catchQuiet (`runTimeCommand -e -del da_SurfaceSlideToggle`);

catchQuiet (`runTimeCommand -e -del da_EdgeSlideToggle`);

catchQuiet (`runTimeCommand -e -del da_evalToggle`);

catchQuiet (`runTimeCommand -e -del da_ToggleCachePlayback`);

catchQuiet (`runTimeCommand -e -del da_EvalCacheHUD`);

catchQuiet (`runTimeCommand -e -del da_NoEvalCacheHUD`);

catchQuiet (`runTimeCommand -e -del da_ToggleSmoothMeshCache`);

catchQuiet (`runTimeCommand -e -del da_ConnectTransformUI`);

catchQuiet (`runTimeCommand -e -del da_ConnectShapeUI`);

catchQuiet (`runTimeCommand -e -del da_ConnectNurbsShapesUI`);

catchQuiet (`runTimeCommand -e -del da_RedOverrides`);

catchQuiet (`runTimeCommand -e -del da_GreenOverrides`);

catchQuiet (`runTimeCommand -e -del da_NoColorOverrides`);

catchQuiet (`runTimeCommand -e -del da_AiMeshesLight`);

catchQuiet (`runTimeCommand -e -del da_AiHighSample`);

catchQuiet (`runTimeCommand -e -del da_AiLowSample`);

catchQuiet (`runTimeCommand -e -del da_AiWarmLight`);

catchQuiet (`runTimeCommand -e -del da_AiNeutralLight`);

catchQuiet (`runTimeCommand -e -del da_AiColdLight`);

catchQuiet (`runTimeCommand -e -del da_EnableBoundingBox`);

catchQuiet (`runTimeCommand -e -del da_DisableBoundingBox`);

catchQuiet (`runTimeCommand -e -del da_IkOnCurve`);

catchQuiet (`runTimeCommand -e -del da_IkOnJoint`);

catchQuiet (`runTimeCommand -e -del da_MirrorCutSelector`);

catchQuiet (`runTimeCommand -e -del da_TransformMirrorSelector`);

catchQuiet (`runTimeCommand -e -del da_TransformMirrorNegX`);

catchQuiet (`runTimeCommand -e -del da_TransformMirrorNegY`);

catchQuiet (`runTimeCommand -e -del da_TransformMirrorNegZ`);

catchQuiet (`runTimeCommand -e -del da_ResetSelTweakPoint`);

catchQuiet (`runTimeCommand -e -del da_SmoothPreviewOff`);

catchQuiet (`runTimeCommand -e -del da_HighQualityDispMeshToggle`);

catchQuiet (`runTimeCommand -e -del da_HighQualitySmoothMeshToggle`);

catchQuiet (`runTimeCommand -e -del da_HighQualitySmoothMesh`);

catchQuiet (`runTimeCommand -e -del da_HighQualityDispMesh`);

catchQuiet (`runTimeCommand -e -del da_PivotToCurvesOrigin`);

catchQuiet (`runTimeCommand -e -del da_SnapCurveToMesh`);

catchQuiet (`runTimeCommand -e -del da_SnapCurveToNurbs`);

catchQuiet (`runTimeCommand -e -del da_ImagesPlane`);

catchQuiet (`runTimeCommand -e -del da_VideoImagesPlane`);

catchQuiet (`runTimeCommand -e -del da_ToggleLocalTumble`);

catchQuiet (`runTimeCommand -e -del da_shapeParentJoints`);

catchQuiet (`runTimeCommand -e -del da_ArnoldRenderViewport`);

catchQuiet (`runTimeCommand -e -del da_nRigidsAirPush`);

catchQuiet (`runTimeCommand -e -del da_nRigidsNoAirPush`);

catchQuiet (`runTimeCommand -e -del da_nRigidsWindShadow`);

catchQuiet (`runTimeCommand -e -del da_nRigidsNoWindShadow`);

catchQuiet (`runTimeCommand -e -del da_PrimitiveAsTool`);

catchQuiet (`runTimeCommand -e -del da_NoPrimitiveAsTool`);

catchQuiet (`runTimeCommand -e -del da_TogglePrimitiveAsTool`);

catchQuiet (`runTimeCommand -e -del da_CtrlPointConstraint`);

catchQuiet (`runTimeCommand -e -del da_CtrlOrientConstraint`);

catchQuiet (`runTimeCommand -e -del da_CtrlParentConstraint`);

catchQuiet (`runTimeCommand -e -del da_CtrlAimConstraint`);

catchQuiet (`runTimeCommand -e -del da_CtrlPoleVectorConstraint`);

catchQuiet (`runTimeCommand -e -del da_GoToCVsNURBS`);

catchQuiet (`runTimeCommand -e -del da_curveToPoly`);

catchQuiet (`runTimeCommand -e -del da_wireframeTemplateA`);

catchQuiet (`runTimeCommand -e -del da_wireframeTemplateB`);

catchQuiet (`runTimeCommand -e -del da_interactiveUnion`);

catchQuiet (`runTimeCommand -e -del da_interactiveDifference`);

catchQuiet (`runTimeCommand -e -del da_interactiveIntersection`);

catchQuiet (`runTimeCommand -e -del da_perspToggle`);

catchQuiet (`runTimeCommand -e -del da_shell`);

catchQuiet (`runTimeCommand -e -del da_shellDetach`);

catchQuiet (`runTimeCommand -e -del da_shellSubdiv`);

catchQuiet (`runTimeCommand -e -del da_shellNoSubdiv`);

catchQuiet (`runTimeCommand -e -del da_XGenBrushMangement_MirrorOff`);

catchQuiet (`runTimeCommand -e -del da_XGenBrushMangement_MirrorX`);

catchQuiet (`runTimeCommand -e -del da_XGenBrushMangement_MirrorY`);

catchQuiet (`runTimeCommand -e -del da_XGenBrushMangement_MirrorZ`);

catchQuiet (`runTimeCommand -e -del da_XGenBrushMangement_CollisionOn`);

catchQuiet (`runTimeCommand -e -del da_XGenBrushMangement_CollisionOff`);

catchQuiet (`runTimeCommand -e -del da_FacesFollicles`);

catchQuiet (`runTimeCommand -e -del da_Compass`);

catchQuiet (`runTimeCommand -e -del da_AntiAliasToggle`);

catchQuiet (`runTimeCommand -e -del da_JointMode`);

catchQuiet (`runTimeCommand -e -del da_motionBlurEnableToggle`);

catchQuiet (`runTimeCommand -e -del da_ToggleAO`);

catchQuiet (`runTimeCommand -e -del da_maxPlaybackSpeedToggle`);

catchQuiet (`runTimeCommand -e -del da_steppedPreview`);

catchQuiet (`runTimeCommand -e -del da_TitleBarToggle`);

catchQuiet (`runTimeCommand -e -del da_SculptFlood`);

catchQuiet (`runTimeCommand -e -del da_pivotKeyable`);

catchQuiet (`runTimeCommand -e -del da_moveKeyframeToNext`);

catchQuiet (`runTimeCommand -e -del da_moveKeyframeToPrev`);

catchQuiet (`runTimeCommand -e -del da_roundKeyframe`);

catchQuiet (`runTimeCommand -e -del da_weightedTangents`);

catchQuiet (`runTimeCommand -e -del da_breakTangents`);

catchQuiet (`runTimeCommand -e -del da_InseritKeyframe`);

catchQuiet (`runTimeCommand -e -del da_MatchNormals`);

catchQuiet (`runTimeCommand -e -del da_MatchUV`);

catchQuiet (`runTimeCommand -e -del da_SelectShellFromFaces`);

catchQuiet (`runTimeCommand -e -del da_ShowLocalAxis`);

catchQuiet (`runTimeCommand -e -del da_HideLocalAxis`);

catchQuiet (`runTimeCommand -e -del da_FreezeDelNonDef`);

catchQuiet (`runTimeCommand -e -del da_EmitterDirectional`);

catchQuiet (`runTimeCommand -e -del da_EmitterOmni`);

catchQuiet (`runTimeCommand -e -del da_EmitterVolume`);

catchQuiet (`runTimeCommand -e -del da_EmitterCompass`);

catchQuiet (`runTimeCommand -e -del da_nClothForceCompass`);

catchQuiet (`runTimeCommand -e -del da_nClothWindCompass`);

catchQuiet (`runTimeCommand -e -del da_MapFacesUV`);

catchQuiet (`runTimeCommand -e -del da_MapFacesFacesUV`);

catchQuiet (`runTimeCommand -e -del da_AiVolumes`);

catchQuiet (`runTimeCommand -e -del da_AiVolumeShader`);

catchQuiet (`runTimeCommand -e -del da_AiVolumeShapes`);

catchQuiet (`runTimeCommand -e -del da_RenderViews`);

catchQuiet (`runTimeCommand -e -del da_CameraImagesPlane`);

catchQuiet (`runTimeCommand -e -del da_CameraVideoImagesPlane`);

catchQuiet (`runTimeCommand -e -del da_RemoveMrNodes`);

catchQuiet (`runTimeCommand -e -del da_OpenUvTool`);

catchQuiet (`runTimeCommand -e -del da_ExposeRotationOrder`);

catchQuiet (`runTimeCommand -e -del da_hotkeySetToggle`);

catchQuiet (`runTimeCommand -e -del da_TransparentShadowsToggle`);

catchQuiet (`runTimeCommand -e -del da_KeyKeyedOnly`);

catchQuiet (`runTimeCommand -e -del da_FluidKillFields`);

catchQuiet (`runTimeCommand -e -del da_CurveToNHairs`);

catchQuiet (`runTimeCommand -e -del da_MetaBalls`);

catchQuiet (`runTimeCommand -e -del da_EdgesToLoopToCurve`);

catchQuiet (`runTimeCommand -e -del da_ResetTransform`);

catchQuiet (`runTimeCommand -e -del da_UnLock`);

catchQuiet (`runTimeCommand -e -del da_Lock`);

catchQuiet (`runTimeCommand -e -del da_GoToCvsMode`);

catchQuiet (`runTimeCommand -e -del da_ClearFreeze`);

catchQuiet (`runTimeCommand -e -del da_ColorManagementOn`);

catchQuiet (`runTimeCommand -e -del da_ColorManagementOff`);

catchQuiet (`runTimeCommand -e -del da_LayoutOutliner`);

catchQuiet (`runTimeCommand -e -del da_LastOpInStack`);

catchQuiet (`runTimeCommand -e -del da_SetObjectMode`);

catchQuiet (`runTimeCommand -e -del da_ClearPersp`);

catchQuiet (`runTimeCommand -e -del da_ToggleComponentMode`);

catchQuiet (`runTimeCommand -e -del da_ToggleColorManagement`);

catchQuiet (`runTimeCommand -e -del da_ToggleRampSkin`);

catchQuiet (`runTimeCommand -e -del da_ToggleXRayJointsSkin`);

catchQuiet (`runTimeCommand -e -del da_ToggleWireOnShade`);

catchQuiet (`runTimeCommand -e -del da_ToggleDagNode`);

catchQuiet (`runTimeCommand -e -del da_ToggleMaterial`);

catchQuiet (`runTimeCommand -e -del da_ToggleShapes`);

catchQuiet (`runTimeCommand -e -del da_ExpandShade`);

catchQuiet (`runTimeCommand -e -del da_FlattenSurface`);

catchQuiet (`runTimeCommand -e -del da_RevertToSave`);

catchQuiet (`runTimeCommand -e -del da_PolyDivision`);

catchQuiet (`runTimeCommand -e -del da_SelectObjectMaterial`);

catchQuiet (`runTimeCommand -e -del da_SelectCamera`);

catchQuiet (`runTimeCommand -e -del da_LookThruSelected`);

catchQuiet (`runTimeCommand -e -del da_BifrostContinuousEmission`);

catchQuiet (`runTimeCommand -e -del da_BifrostNoContinuousEmission`);

catchQuiet (`runTimeCommand -e -del da_BifrostMesh`);

catchQuiet (`runTimeCommand -e -del da_BifrostNoMesh`);

catchQuiet (`runTimeCommand -e -del da_BifrostGravity`);

catchQuiet (`runTimeCommand -e -del da_BifrostNoGravity`);

catchQuiet (`runTimeCommand -e -del da_ListInputOperations`);

catchQuiet (`runTimeCommand -e -del da_nParticleNoGravity`);

catchQuiet (`runTimeCommand -e -del da_nParticleGravity`);

catchQuiet (`runTimeCommand -e -del da_nParticleNoSelfCollide`);

catchQuiet (`runTimeCommand -e -del da_nParticleSelfCollide`);

catchQuiet (`runTimeCommand -e -del da_BrushSurfaceSnap`);

catchQuiet (`runTimeCommand -e -del da_BrushNoSurfaceSnap`);

catchQuiet (`runTimeCommand -e -del da_BrushSurfaceCollideOutside`);

catchQuiet (`runTimeCommand -e -del da_BrushSurfaceCollideInside`);

catchQuiet (`runTimeCommand -e -del da_BrushSurfaceCollideBoth`);

catchQuiet (`runTimeCommand -e -del da_BrushNoSurfaceCollide`);

catchQuiet (`runTimeCommand -e -del da_BrushOccupyAttraction`);

catchQuiet (`runTimeCommand -e -del da_BrushNoOccupyAttraction`);

catchQuiet (`runTimeCommand -e -del da_ModifierOccupyVolume`);

catchQuiet (`runTimeCommand -e -del da_ModifierNoOccupyVolume`);

catchQuiet (`runTimeCommand -e -del da_ParentAndPosition`);

catchQuiet (`runTimeCommand -e -del da_ResetTweakPoint`);

catchQuiet (`runTimeCommand -e -del da_FollicleBraid`);

catchQuiet (`runTimeCommand -e -del da_FollicleNoBraid`);

catchQuiet (`runTimeCommand -e -del da_ManipToggleComp`);

catchQuiet (`runTimeCommand -e -del da_ManipToggleTrans`);

catchQuiet (`runTimeCommand -e -del da_ManipToggle`);

catchQuiet (`runTimeCommand -e -del da_SelectUV`);

catchQuiet (`runTimeCommand -e -del da_SelectParticle`);

catchQuiet (`runTimeCommand -e -del da_SelectMulti`);

catchQuiet (`runTimeCommand -e -del da_SelectCV`);

catchQuiet (`runTimeCommand -e -del da_SelectLattice`);

catchQuiet (`runTimeCommand -e -del da_BackToObjectMode`);

catchQuiet (`runTimeCommand -e -del da_BevelPlusForText`);

catchQuiet (`runTimeCommand -e -del da_TimeDraggerSmooth`);

catchQuiet (`runTimeCommand -e -del da_TimeDraggerNoSmooth`);

catchQuiet (`runTimeCommand -e -del da_FrameOnlySelected`);

catchQuiet (`runTimeCommand -e -del da_DeformerUV`);

catchQuiet (`runTimeCommand -e -del da_ToggleNurbsCurvesVis`);

catchQuiet (`runTimeCommand -e -del da_ToggleNurbsVis`);

catchQuiet (`runTimeCommand -e -del da_ToggleSubVis`);

catchQuiet (`runTimeCommand -e -del da_TogglePolyVis`);

catchQuiet (`runTimeCommand -e -del da_ToggleLightVis`);

catchQuiet (`runTimeCommand -e -del da_ToggleJointVis`);

catchQuiet (`runTimeCommand -e -del da_ToggleIkVis`);

catchQuiet (`runTimeCommand -e -del da_ToggleDefVis`);

catchQuiet (`runTimeCommand -e -del da_ToggleLocVis`);

catchQuiet (`runTimeCommand -e -del da_DoubleSideOn`);

catchQuiet (`runTimeCommand -e -del da_DoubleSideOff`);

catchQuiet (`runTimeCommand -e -del da_LightList`);

catchQuiet (`runTimeCommand -e -del da_HgConnectionLevel`);

catchQuiet (`runTimeCommand -e -del da_SaveRenderImage`);

catchQuiet (`runTimeCommand -e -del da_NconstraintTransform`);

catchQuiet (`runTimeCommand -e -del da_EditDeformer`);

catchQuiet (`runTimeCommand -e -del da_LegacySubdivPolyMode`);

catchQuiet (`runTimeCommand -e -del da_LegacySubdivStandardMode`);

catchQuiet (`runTimeCommand -e -del da_LegacySubdivToggle`);

catchQuiet (`runTimeCommand -e -del da_NucleusPhysicallyBasedOn`);

catchQuiet (`runTimeCommand -e -del da_NucleusPhysicallyBasedOff`);

catchQuiet (`runTimeCommand -e -del da_GoToMesh`);

catchQuiet (`runTimeCommand -e -del da_TxManager`);

catchQuiet (`runTimeCommand -e -del da_AiLightNormalize`);

catchQuiet (`runTimeCommand -e -del da_AiNoLightNormalize`);

catchQuiet (`runTimeCommand -e -del da_AiPhotometric`);

catchQuiet (`runTimeCommand -e -del da_AiSkyDome`);

catchQuiet (`runTimeCommand -e -del da_AiMeshLight`);

catchQuiet (`runTimeCommand -e -del da_MashVoxelizer`);

catchQuiet (`runTimeCommand -e -del da_ToolSettings`);

catchQuiet (`runTimeCommand -e -del da_OpenBossEditor`);

catchQuiet (`runTimeCommand -e -del da_ModelingToolkit`);

catchQuiet (`runTimeCommand -e -del da_OpenColorEditor`);

catchQuiet (`runTimeCommand -e -del da_JointsAsBone`);

catchQuiet (`runTimeCommand -e -del da_JointsAsNone`);

catchQuiet (`runTimeCommand -e -del da_GoToFront`);

catchQuiet (`runTimeCommand -e -del da_GoToSide`);

catchQuiet (`runTimeCommand -e -del da_GoToTop`);

catchQuiet (`runTimeCommand -e -del da_GoToPersp`);

catchQuiet (`runTimeCommand -e -del da_ToolProperty`);

catchQuiet (`runTimeCommand -e -del da_PolyToNurbs`);

catchQuiet (`runTimeCommand -e -del da_MembraneCollider`);

catchQuiet (`runTimeCommand -e -del da_HairLockBase`);

catchQuiet (`runTimeCommand -e -del da_HairLockBothEnds`);

catchQuiet (`runTimeCommand -e -del da_HairNoLock`);

catchQuiet (`runTimeCommand -e -del da_HairDynamic`);

catchQuiet (`runTimeCommand -e -del da_HairPassive`);

catchQuiet (`runTimeCommand -e -del da_HairStatic`);

catchQuiet (`runTimeCommand -e -del da_LocatorVisibility`);

catchQuiet (`runTimeCommand -e -del da_LocatorNoVisibility`);

catchQuiet (`runTimeCommand -e -del da_SetIKPerfAngle`);

catchQuiet (`runTimeCommand -e -del da_AssumeIKPrefAngle`);

catchQuiet (`runTimeCommand -e -del da_BoneAsFat`);

catchQuiet (`runTimeCommand -e -del da_BoneAsOff`);

catchQuiet (`runTimeCommand -e -del da_EdgeRightAngle`);

catchQuiet (`runTimeCommand -e -del da_EdgeStraightAngle`);

catchQuiet (`runTimeCommand -e -del da_EdgeAcuteAngle`);

catchQuiet (`runTimeCommand -e -del da_EdgeBorder`);

catchQuiet (`runTimeCommand -e -del da_EdgeInside`);

catchQuiet (`runTimeCommand -e -del da_EdgeHard`);

catchQuiet (`runTimeCommand -e -del da_EdgeSoft`);

catchQuiet (`runTimeCommand -e -del da_ZeroTransfomations`);

catchQuiet (`runTimeCommand -e -del da_ConnectShapes`);

catchQuiet (`runTimeCommand -e -del da_Auto_MembraneCollider`);

catchQuiet (`runTimeCommand -e -del da_SelectAssignedShader`);

catchQuiet (`runTimeCommand -e -del da_EnableReference`);

catchQuiet (`runTimeCommand -e -del da_DisableReference`);

catchQuiet (`runTimeCommand -e -del da_ToggleSculptWireframe`);

catchQuiet (`runTimeCommand -e -del da_AiPortalLight`);

catchQuiet (`runTimeCommand -e -del da_AiNoPortalLight`);

catchQuiet (`runTimeCommand -e -del da_ClothInputMesh`);

catchQuiet (`runTimeCommand -e -del da_ClothAsDeformer`);

catchQuiet (`runTimeCommand -e -del da_CopySelection`);

catchQuiet (`runTimeCommand -e -del da_PasteSelection`);

catchQuiet (`runTimeCommand -e -del da_ToggleSkinWireframe`);

catchQuiet (`runTimeCommand -e -del da_NucleusPlaneOn`);

catchQuiet (`runTimeCommand -e -del da_NucleusPlaneOff`);

catchQuiet (`runTimeCommand -e -del da_NucleusHqOn`);

catchQuiet (`runTimeCommand -e -del da_NucleusHqOff`);

catchQuiet (`runTimeCommand -e -del da_NucleusGravityOn`);

catchQuiet (`runTimeCommand -e -del da_NucleusGravityOff`);

catchQuiet (`runTimeCommand -e -del da_ConnectCereation`);

catchQuiet (`runTimeCommand -e -del da_AiLightPortal`);

catchQuiet (`runTimeCommand -e -del da_TogglePlayback`);

catchQuiet (`runTimeCommand -e -del da_ToggleModelingTool`);

catchQuiet (`runTimeCommand -e -del da_MirrorCutX`);

catchQuiet (`runTimeCommand -e -del da_MirrorCutY`);

catchQuiet (`runTimeCommand -e -del da_MirrorCutZ`);

catchQuiet (`runTimeCommand -e -del da_MirrorCutXNeg`);

catchQuiet (`runTimeCommand -e -del da_MirrorCutYNeg`);

catchQuiet (`runTimeCommand -e -del da_MirrorCutZNeg`);

catchQuiet (`runTimeCommand -e -del da_BooleanFullIntersect`);

catchQuiet (`runTimeCommand -e -del da_PlaneCutter`);

catchQuiet (`runTimeCommand -e -del da_NurbsToMesh`);

catchQuiet (`runTimeCommand -e -del da_FluidAutoResizeOn`);

catchQuiet (`runTimeCommand -e -del da_FluidAutoResizeOff`);

catchQuiet (`runTimeCommand -e -del da_NurbsConnectCreation`);

catchQuiet (`runTimeCommand -e -del da_CurveConnectCreation`);

catchQuiet (`runTimeCommand -e -del da_ConnectNurbsShapes`);

catchQuiet (`runTimeCommand -e -del da_ToggleChannelLayer`);

catchQuiet (`runTimeCommand -e -del da_ToggleMTK`);

catchQuiet (`runTimeCommand -e -del da_ToggleAttribute`);

catchQuiet (`runTimeCommand -e -del da_ToggleOutline`);

catchQuiet (`runTimeCommand -e -del da_ToggleToolSetting`);

catchQuiet (`runTimeCommand -e -del da_SlideConstraintOff`);

catchQuiet (`runTimeCommand -e -del da_SlideConstraintOn`);

catchQuiet (`runTimeCommand -e -del da_nHairSelfCollideOn`);

catchQuiet (`runTimeCommand -e -del da_nHairSelfCollideOff`);

catchQuiet (`runTimeCommand -e -del da_nHairColllideOff`);

catchQuiet (`runTimeCommand -e -del da_nHairCollideOn`);

catchQuiet (`runTimeCommand -e -del da_nHairLockTip`);

catchQuiet (`runTimeCommand -e -del da_BatchSkinTransfertUV`);

catchQuiet (`runTimeCommand -e -del da_BatchSkinTransfertCP`);

catchQuiet (`runTimeCommand -e -del da_BatchSkinTransfertRC`);

catchQuiet (`runTimeCommand -e -del da_BatchSkinTransfertCC`);

catchQuiet (`runTimeCommand -e -del da_PolyShade`);

catchQuiet (`runTimeCommand -e -del da_PolyNoShade`);

catchQuiet (`runTimeCommand -e -del da_ToggleUVBorders`);

catchQuiet (`runTimeCommand -e -del da_ToggleResolutionGate`);

catchQuiet (`runTimeCommand -e -del da_CameraBookmark`);

catchQuiet (`runTimeCommand -e -del da_ResetPivot`);

catchQuiet (`runTimeCommand -e -del da_NucleusMedium`);

catchQuiet (`runTimeCommand -e -del da_NucleusParallelOn`);

catchQuiet (`runTimeCommand -e -del da_NucleusParallelOff`);

catchQuiet (`runTimeCommand -e -del da_CurveDistributionMash`);

catchQuiet (`runTimeCommand -e -del da_LayoutPersp`);

catchQuiet (`runTimeCommand -e -del da_LayoutNodeEditor`);

catchQuiet (`runTimeCommand -e -del da_LayoutUvTextureEditor`);

catchQuiet (`runTimeCommand -e -del da_LayoutGraphEditor`);

catchQuiet (`runTimeCommand -e -del da_LayoutShapeEditor`);

catchQuiet (`runTimeCommand -e -del da_LayoutReferenceEditor`);

catchQuiet (`runTimeCommand -e -del da_LayoutComponentEditor`);

catchQuiet (`runTimeCommand -e -del da_LayoutRelationshipEditor`);

catchQuiet (`runTimeCommand -e -del da_LayoutDynamicRelationshipEditor`);

catchQuiet (`runTimeCommand -e -del da_LayoutHypershade`);

catchQuiet (`runTimeCommand -e -del da_AiOpaque`);

catchQuiet (`runTimeCommand -e -del da_AiNoOpaque`);

catchQuiet (`runTimeCommand -e -del da_CloseAllPanel`);

catchQuiet (`runTimeCommand -e -del da_MashBlendDeformer`);

catchQuiet (`runTimeCommand -e -del da_AboutMay9`);

catchQuiet (`runTimeCommand -e -del da_ControllerProssimity`);

catchQuiet (`runTimeCommand -e -del da_ControllerNoProssimity`);

catchQuiet (`runTimeCommand -e -del da_ConvertUvEdgeToCurve`);

catchQuiet (`runTimeCommand -e -del da_EdgeRingAndLoop`);

catchQuiet (`runTimeCommand -e -del da_SelectComponentShader`);

catchQuiet (`runTimeCommand -e -del da_CreateAssigNode`);

catchQuiet (`runTimeCommand -e -del da_EditAndFrameShaderOutliner`);

catchQuiet (`runTimeCommand -e -del da_UnlockAndFixNormals`);

catchQuiet (`runTimeCommand -e -del da_AiStandardHairToPfxHair`);

catchQuiet (`runTimeCommand -e -del da_ToggleLightManipulators`);

catchQuiet (`runTimeCommand -e -del da_ToggleCameraManipulators`);

catchQuiet (`runTimeCommand -e -del da_AutoBevel`);

catchQuiet (`runTimeCommand -e -del da_MashBulletGravity`);

catchQuiet (`runTimeCommand -e -del da_MashBulletNoGravity`);

catchQuiet (`runTimeCommand -e -del da_MashBulletGround`);

catchQuiet (`runTimeCommand -e -del da_MashBulletNoGround`);

catchQuiet (`runTimeCommand -e -del da_CopyCameraPosition`);

catchQuiet (`runTimeCommand -e -del da_PasteCameraPosition`);

catchQuiet (`runTimeCommand -e -del da_SelectVertexJoint`);

catchQuiet (`runTimeCommand -e -del da_MeshLightVisible`);

catchQuiet (`runTimeCommand -e -del da_MeshLightNoVisible`);

catchQuiet (`runTimeCommand -e -del da_FileAlphaLuminance`);

catchQuiet (`runTimeCommand -e -del da_FileNoAlphaLuminance`);

catchQuiet (`runTimeCommand -e -del da_FileColorSpaceSrgb`);

catchQuiet (`runTimeCommand -e -del da_FileColorSpaceRaw`);

catchQuiet (`runTimeCommand -e -del da_FileFilterQuadratic`);

catchQuiet (`runTimeCommand -e -del da_FileFilterOff`);

catchQuiet (`runTimeCommand -e -del da_MashParticle`);

catchQuiet (`runTimeCommand -e -del da_TweakToMesh`);

catchQuiet (`runTimeCommand -e -del da_Subdivision`);

catchQuiet (`runTimeCommand -e -del da_RivetMashFace`);

catchQuiet (`runTimeCommand -e -del da_RivetMashVertex`);

catchQuiet (`runTimeCommand -e -del da_RivetMashEdge`);

catchQuiet (`runTimeCommand -e -del da_CreateStandInFile`);

catchQuiet (`runTimeCommand -e -del da_doExportStandIn`);

catchQuiet (`runTimeCommand -e -del da_aiStandInBoundryBox`);

catchQuiet (`runTimeCommand -e -del da_aiStandinPolyWire`);

catchQuiet (`runTimeCommand -e -del da_aiStandinPointCloud`);

catchQuiet (`runTimeCommand -e -del da_SurfaceScatterMash`);

catchQuiet (`runTimeCommand -e -del da_CurveLength`);

catchQuiet (`runTimeCommand -e -del da_CleanHUD`);

catchQuiet (`runTimeCommand -e -del da_EnableHUD`);

catchQuiet (`runTimeCommand -e -del da_ToggleHUD`);

catchQuiet (`runTimeCommand -e -del da_ParticleToMesh`);

catchQuiet (`runTimeCommand -e -del da_FluidToMesh`);

catchQuiet (`runTimeCommand -e -del da_MouseTrack`);

catchQuiet (`runTimeCommand -e -del da_aiCurveCollector`);

catchQuiet (`runTimeCommand -e -del da_ToggleMouseWheel`);

catchQuiet (`runTimeCommand -e -del da_CombineCurves`);

catchQuiet (`runTimeCommand -e -del da_NucleusWindController`);

catchQuiet (`runTimeCommand -e -del da_AirWindController`);

catchQuiet (`runTimeCommand -e -del da_AddPhysicalSky`);

catchQuiet (`runTimeCommand -e -del da_ToggleTwoSidedLighting`);

catchQuiet (`runTimeCommand -e -del da_ToggleActiveComponentsXray`);

catchQuiet (`runTimeCommand -e -del da_ToggleJointXray`);

catchQuiet (`runTimeCommand -e -del da_ToggleMotionTrialHandles`);

catchQuiet (`runTimeCommand -e -del da_ExtractCurveShape`);

catchQuiet (`runTimeCommand -e -del da_SepareCurves`);

// Remove May9 Legacy RunTime Commands

catchQuiet (`runTimeCommand -e -del
	da_ToggleUV`);
}


// Define May9 RunTime Commands
global proc May9_runTimeCommands(){

if(!(catchQuiet (`da_MMtoKey_press`))){
	May9_runTimeCommandsRemover;
}

runTimeCommand
	-ann "Enable MMtoKey"
	-cat "Custom Scripts.May9_Next.System"
	-cl "python"
	-c ("try:\n    May9_Next.pressSelected(ctl=False, alt=False, sh=False)\nexcept Exception: \n    pass")
	da_MMtoKey_press;

runTimeCommand
	-ann "Disable MMtoKey"
	-cat "Custom Scripts.May9_Next.System"
	-cl "python"
	-c ("May9_Next.releaseSelected()\n\ndef run(parent):\n    cmds.deleteUI(parent)")
	da_MMtoKey_release;

runTimeCommand
	-ann "Convert Bifrost Geo to Maya Ones"
	-cat "Custom Scripts.May9_Next.BifrostGraph"
	-c ("string $mySel[] = `ls -sl`;\nstring $myBifMayaMesh = `createNode bifrostGeoToMaya`;\nstring $myMesh = `createNode mesh`;\n\nconnectAttr -f ($mySel[0] + \".mesh\") ($myBifMayaMesh + \".bifrostGeo\");\nconnectAttr -f ($myBifMayaMesh + \".mayaMesh[0]\") ($myMesh + \".inMesh\");\nhyperShade -assign initialShadingGroup;")
	da_BifrostGeoToMaya;

runTimeCommand
	-ann "Edit Bif Node Board"
	-cat "Custom Scripts.May9_Next.BifrostGraph"
	-c ("pickWalk -d down;\nstring $myBoard[] = `listConnections -s 1 -d 0 -t \"bifrostBoard\"`;\n\nselect $myBoard[0];\nopenBifrostGraphEditorFromSelection;")
	da_BifBoardEdit;

runTimeCommand
	-ann "Bifrost Graph Editor"
	-cat "Custom Scripts.May9_Next.BifrostGraph"
	-c ("if (`pluginInfo -q -l bifrostGraph` == 1){\n    openBifrostGraphEditorFromSelection;\n}")
	da_BifrostGraphEditor;

runTimeCommand
	-ann "Apply Wrap Deformer and Delta Mush"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myResult = `confirmDialog -title \"Continue?\" -message \"Before continue please check to have selected: first the driven mesh, then the driver one\" \n-button \"Continue\" -button \"Close\"  -defaultButton \"Close\" \n-cancelButton \"Close\" -dismissString \"Close\"`;\n\nif ($myResult == \"Continue\"){\n    string $polySel[] = `filterExpand -sm 12`;\n    doWrapArgList \"2\" { \"1\",\"0\",\"0\" };\n    select $polySel[0];\t\n    DeltaMush;\n    select $polySel[1];\n}")
	da_DeltaWrap;

runTimeCommand
	-ann "Add MASH Trails to Particle"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $myParticles[] = `ls -sl`;\nstring $myMashTrails = `createNode MASH_Trails`;\n\nconnectAttr -f ($myParticles[0] + \".position\") ($myMashTrails + \".positionInPP\");\nconnectAttr -f (\"time1.outTime\") ($myMashTrails + \".time\");\n\nstring $myMeshTrails = `createNode mesh`;\nhyperShade -assign initialShadingGroup;\n\nconnectAttr -f ($myMashTrails + \".outputMesh\") ($myMeshTrails + \".inMesh\");\n\npickWalk -d up;\nrename particleTrails1;\n\nselect $myMashTrails;AttributeEditor")
	da_ParticleTrails;

runTimeCommand
	-ann "Enable Advanced Smooth Proxy"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("setDisplaySmoothness 1;\nstring $mySel[] = `ls -sl`;\nstring $myShape[] = `listRelatives -f -s`;\nint $myPolyCounts[] =  `polyEvaluate -f`;\n\nif ($myPolyCounts[0] <= 24576){\n    string $myIntermediate[] = `duplicate`;\n    string $myIntermediateShape[] = `listRelatives -f -s`;\n    for ($each in $myIntermediateShape){\n        $indices = `getAttr -mi ($each + \".pnts\")`;\n        for ($i in $indices){\n        \tsetAttr($each + \".pnts[\" + $i + \"]\", 0,0,0);\n        }\n    }\n\n    string $mySmooth[] = `duplicate`;\n    string $mySmoothShape[] = `listRelatives -f -s`;\n    \n    string $myProxyNode = `createNode polySmoothProxy`;\n    \n    if ($myPolyCounts[0] <= 24) {\n        addAttr -ln \"Division_Level\" -at long -min 1 -max 7 $mySel[0];\n    \tsetAttr ($mySel[0] + \".Division_Level\") 6;\n    } else if ($myPolyCounts[0] <= 96) {\n        addAttr -ln \"Division_Level\" -at long -min 1 -max 6 $mySel[0];\n    \tsetAttr ($mySel[0] + \".Division_Level\") 5;\n    } else if ($myPolyCounts[0] <= 384) {\n        addAttr -ln \"Division_Level\" -at long -min 1 -max 5 $mySel[0];\n    \tsetAttr ($mySel[0] + \".Division_Level\") 4;\n    } else if ($myPolyCounts[0] <= 1536) {\n        addAttr -ln \"Division_Level\" -at long -min 1 -max 4 $mySel[0];\n    \tsetAttr ($mySel[0] + \".Division_Level\") 3;\n    } else if ($myPolyCounts[0] <= 6144) {\n        addAttr -ln \"Division_Level\" -at long -min 1 -max 3 $mySel[0];\n    \tsetAttr ($mySel[0] + \".Division_Level\") 2;\n    } else {\n        addAttr -ln \"Division_Level\" -at long -min 1 -max 2 $mySel[0];\n    \tsetAttr ($mySel[0] + \".Division_Level\") 1;\n    }\n\n    setAttr -e -k 1 ($mySel[0] + \".Division_Level\");\n\n    connectAttr -f ($mySel[0] + \".Division_Level\") ($myProxyNode + \".exponentialLevel\");\n    connectAttr -f ($myShape[0] + \".outMesh\") ($myIntermediateShape[0] + \".inMesh\");\n    connectAttr -f ($myIntermediateShape[0] + \".outMesh\") ($myProxyNode + \".inputPolymesh\");\n    connectAttr -f ($myProxyNode + \".output\") ($mySmoothShape[0] + \".inMesh\");\n\n    select $myIntermediate[0];\n    hide;\n\n    rename $myIntermediate[0] ($mySel[0] + \"IntermediateProxy\");\n    rename $mySmooth[0] ($mySel[0] + \"SmoothProxy\");\n    \n    select $mySel[0];\n    da_PolyNoShade;\n}else{\n    warning \"Polycount is to high to apply Advance Smooth Proxy\";\n}")
	da_SmoothProxy;

runTimeCommand
	-ann "Enable Fluid Self Shadowing\n"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".selfShadowing\") 1;\n}\ninViewMessage -pos topCenter -msg \"Fluid Self Shadow Enable\" -fade;")
	da_FluidSelfShadowingOn;

runTimeCommand
	-ann "Disable Fluid Self Shadowing"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".selfShadowing\") 0;\n}\ninViewMessage -pos topCenter -msg \"Fluid Self Shadow Disable\" -fade;")
	da_FluidSelfShadowingOff;

runTimeCommand
	-ann "nParticle Die Outside Emitter"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".dieOnEmissionVolumeExit\") 1;\n}\ninViewMessage -pos topCenter -msg \"nParticle die outside the emitter volume\" -fade;")
	da_nParticleNoLiveOutsideEmitter;

runTimeCommand
	-ann "nParticle Live Outside Emitter"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".dieOnEmissionVolumeExit\") 0;\n}\ninViewMessage -pos topCenter -msg \"nParticle live outside the emitter volume\" -fade;")
	da_nParticleLiveOutsideEmitter;

runTimeCommand
	-ann "Define Node Editor no Click Command"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $mySel[] = `ls -sl`;\nstring $myNodeType[] = `da_QueryArrayNodeType`;\nselect $mySel;\n\nif ( $myNodeType[0] == \"character\" ){\n    characterEditor( true );\n}else{\n    NodeEditorGraphUpDownstream;\n}")
	da_NodeEditorNoClick;

runTimeCommand
	-ann "Combine Poly Mesh"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("if(catchQuiet(`polyUniteSkinned -ch 0 -muv 1 -cp`)){\n    polyUnite -ch 0 -muv 1 -cp;\n}")
	da_PolyCombine;

runTimeCommand
	-ann "Separate Poly Mesh"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl`;\nif(size(`findRelatedSkinCluster $mySel[0]`)){\n    string $mySkinnedMesh[] = `ls -sl`;\n    BakeNonDefHistory;\n    polySeparate -ch 1;\n    pickWalkUp;\n    pickWalkDown;\n    pickWalkLeft;\n    delete;\n}else{\n    polySeparate -ch 0;\n}")
	da_PolySeparate;

runTimeCommand
	-ann "Copy Current Attribute Editor Tab"
	-cat "Custom Scripts.May9_Next.System"
	-c ("if(`workspaceControl -q -r AttributeEditor`){\n    commitAENotes($gAECurrentTab);copyAEWindow;\n}")
	da_CopyAttributeEditorTab;

runTimeCommand
	-ann "Toggle Fogging"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $selectedPanel = `getPanel -wf`;\n\nif (`modelEditor -q -fg $selectedPanel`)\n\tmodelEditor -e -fg 0 $selectedPanel;\nelse\n\tmodelEditor -e -fg 1 $selectedPanel;")
	da_ToggleFogging;

runTimeCommand
	-ann "Attach to Motion Path"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("int $myMinTime = `playbackOptions -q -min`;\nint $myMaxTime = `playbackOptions -q -max`;\n\nif(catchQuiet(`pathAnimation -fm 1 -f 1 -fa z -ua y -wut \"vector\" -wu 0 1 0 -iu 0 -if 0 -b 0 -stu $myMinTime -etu $myMaxTime`)){\n    pathAnimation -fm 1 -f 0 -wu 0 1 0 -iu 0 -if 0 -b 0 -stu $myMinTime -etu $myMaxTime;\n}")
	da_AttachToMotionPath;

runTimeCommand
	-annotation "Toggle Global Key Tangent"
	-category "Custom Scripts.May9_Next.Toggle"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("string $myKeyTangent[] = `keyTangent -q -global -ott`;\n\nif ($myKeyTangent[0] != \"step\"){\n    keyTangent -global -ott step;\n}else{\n    keyTangent -global -ott auto;\n}")
	da_ToggleKeyTangent;

runTimeCommand
	-ann "Toggle Graph Editor Visibility Infinity"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if (`animCurveEditor -q -di graphEditor1GraphEd`){\n    animCurveEditor -e -di 0 graphEditor1GraphEd;\n}else{\n    animCurveEditor -e -di 1 graphEditor1GraphEd;\n}")
	da_ToggleGraphInfinity;

runTimeCommand
	-ann "Add Sine to Selected Channel(s)"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("string $myInputObjects[] = `channelBox -q -hol mainChannelBox`;\nstring $myOutputObjects[] = `channelBox -q -ool mainChannelBox`;\nstring $myShapeObjects[] = `channelBox -q -sol mainChannelBox`;\n\nstring $myInputChannels[] = `channelBox -q -sha mainChannelBox`;\nstring $myOutputChannels[] = `channelBox -q -soa mainChannelBox`;\nstring $myShapeChannels[] = `channelBox -q -ssa mainChannelBox`;\n\nif (size($myInputChannels))\n    select $myInputObjects;\nelse if (size($myOutputChannels))\n    select $myOutputObjects;\nelse if (size($myShapeChannels))\n    select $myShapeObjects;\n\nstring $mySel[] = `ls -sl`;\nstring $myChannels[] = `selectedChannelBoxAttributes`;\n\nif (size($myChannels) < 1){\n    inViewMessage -pos topCenter -msg \"Select at least one attribute in the channel box\" -fade;\n}\n\nfor($each in $mySel){\n    for($attr in $myChannels){\n        float $myFrequency = rand(1,3);\n        float $myAmplitude = rand(1,10); \n        float $myOffsetTime = rand(0,1);\n        float $myOffsetSpace = 0;  \n\n        string $myFrequencyName = \"Frequency_\" + $attr;\n        string $myAmplitudeName = \"Amplitude_\" + $attr;\n        string $myOffsetTimeName = \"Offset_Time_\" + $attr;\n        string $myOffsetSpaceName = \"Offset_Value_\" + $attr;\n        string $myFrequencyAttr = $each + \".\" + $myFrequencyName;\n        string $myAmplitudeAttr = $each + \".\" + $myAmplitudeName;\n        string $myOffsetTimeAttr = $each + \".\" + $myOffsetTimeName;\n        string $myOffsetSpaceAttr = $each + \".\" + $myOffsetSpaceName;\n        string $myObjectAttr = $each + \".\" + $attr;\t\n        string $mySeparatorName = \"Sine_\" + $attr;\n        string $mySeparatorAttr = $each + \".\" + $mySeparatorName;\n\n        if (`attributeExists $attr $each`){ \n            addAttr -ln $mySeparatorName -k 0 $each;  \n            setAttr -cb 1 -l 1 $mySeparatorAttr;\n            \n            addAttr -ln $myFrequencyName -k 1 -dv $myFrequency $each;\n            addAttr -ln $myAmplitudeName -k 1 -dv $myAmplitude $each;\n            addAttr -ln $myOffsetTimeName -k 1 -dv $myOffsetTime $each;\t\n            addAttr -ln $myOffsetSpaceName -k 1 -dv $myOffsetSpace $each;\t\n\t\n            string $exp = $myObjectAttr + \"= sin(time*\" + $myFrequencyAttr + \"+\" + $myOffsetTimeAttr + \")*\" + $myAmplitudeAttr + \"+\" + $myOffsetSpaceAttr;\n            string $expName = $attr + \"_sine\";\n            expression -s $exp -n $expName;\n            \n            setAttr -l 1 $myObjectAttr;\n        }\n    }\n}")
	da_SineChannel;

runTimeCommand
	-ann "Add Noise to Selected Channel(s)"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("string $myInputObjects[] = `channelBox -q -hol mainChannelBox`;\nstring $myOutputObjects[] = `channelBox -q -ool mainChannelBox`;\nstring $myShapeObjects[] = `channelBox -q -sol mainChannelBox`;\n\nstring $myInputChannels[] = `channelBox -q -sha mainChannelBox`;\nstring $myOutputChannels[] = `channelBox -q -soa mainChannelBox`;\nstring $myShapeChannels[] = `channelBox -q -ssa mainChannelBox`;\n\nif (size($myInputChannels))\n    select $myInputObjects;\nelse if (size($myOutputChannels))\n    select $myOutputObjects;\nelse if (size($myShapeChannels))\n    select $myShapeObjects;\n\nstring $mySel[] = `ls -sl`;\nstring $myChannels[] = `selectedChannelBoxAttributes`;\n\nif (size($myChannels) < 1){\n    inViewMessage -pos topCenter -msg \"Select at least one attribute in the channel box\" -fade;\n}\n\nfor($each in $mySel){\n    for($attr in $myChannels){\n        float $myFrequency = rand(2,5);\n        float $myAmplitude = rand(1,4); \n        float $myOffsetTime = rand(0,1);\n        float $myOffsetSpace = 0;  \n\n        string $myFrequencyName = \"Frequency_\" + $attr;\n        string $myAmplitudeName = \"Amplitude_\" + $attr;\n        string $myOffsetTimeName = \"Offset_Time_\" + $attr;\n        string $myOffsetSpaceName = \"Offset_Value_\" + $attr;\n        string $myFrequencyAttr = $each + \".\" + $myFrequencyName;\n        string $myAmplitudeAttr = $each + \".\" + $myAmplitudeName;\n        string $myOffsetTimeAttr = $each + \".\" + $myOffsetTimeName;\n        string $myOffsetSpaceAttr = $each + \".\" + $myOffsetSpaceName;\n        string $myObjectAttr = $each + \".\" + $attr;\t\n        string $mySeparatorName = \"Noise_\" + $attr;\n        string $mySeparatorAttr = $each + \".\" + $mySeparatorName;\n\n        if (`attributeExists $attr $each`){ \n            addAttr -ln $mySeparatorName -k 0 $each;  \n            setAttr -cb 1 -l 1 $mySeparatorAttr;\n            \n            addAttr -ln $myFrequencyName -k 1 -dv $myFrequency $each;\n            addAttr -ln $myAmplitudeName -k 1 -dv $myAmplitude $each;\n            addAttr -ln $myOffsetTimeName -k 1 -dv $myOffsetTime $each;\t\n            addAttr -ln $myOffsetSpaceName -k 1 -dv $myOffsetSpace $each;\t\n\t\n            string $exp = $myObjectAttr + \"= noise(time*\" + $myFrequencyAttr + \"+\" + $myOffsetTimeAttr + \")*\" + $myAmplitudeAttr + \"+\" + $myOffsetSpaceAttr;\n            string $expName = $attr + \"_noise\";\n            expression -s $exp -n $expName;\n            \n            setAttr -l 1 $myObjectAttr;\n        }\n    }\n}")
	da_NoiseChannel;

runTimeCommand
	-ann "Add DOF Locator to Selected Camera"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`;\nstring $myShape[] = `listRelatives -s`;\n\nspaceLocator -p 0 0 0;\nstring $myFocusLocator = `rename ($mySel[0] + \"_DOF_Locator\")`;\n\nsetAttr -l 1 -k 0 -cb 0 ($myFocusLocator + \".rx\");\nsetAttr -l 1 -k 0 -cb 0 ($myFocusLocator + \".ry\");\nsetAttr -l 1 -k 0 -cb 0 ($myFocusLocator + \".rz\");\nsetAttr -l 1 -k 0 -cb 0 ($myFocusLocator + \".sx\");\nsetAttr -l 1 -k 0 -cb 0 ($myFocusLocator + \".sy\");\nsetAttr -l 1 -k 0 -cb 0 ($myFocusLocator + \".sz\");\n\naddAttr -ln \"F_Stop\" -at double -min 1 -max 64 -dv 5.6 $myFocusLocator;\nsetAttr -e -k 1 ($myFocusLocator + \".F_Stop\");\nconnectAttr -f ($myFocusLocator + \".F_Stop\") ($myShape[0] + \".fStop\");\n\nsetAttr ($myShape[0] + \".depthOfField\") 1;\n\nexpression -n \"CameraDOF1\" -s (\n    $myShape[0] + \".focusDistance = 0;\\n\" + \n    $myShape[0] + \".focusDistance = \" + $myFocusLocator + \".translateX;\\n\" + \n    $myShape[0] + \".focusDistance = \" + $myFocusLocator + \".translateY;\\n\" + \n    $myShape[0] + \".focusDistance = \" + $myFocusLocator + \".translateZ;\\n\" + \n    $myShape[0] + \".focusDistance = \" + $mySel[0] + \".translateX;\\n\" + \n    $myShape[0] + \".focusDistance = \" + $mySel[0] + \".translateY;\\n\" + \n    $myShape[0] + \".focusDistance = \" + $mySel[0] + \".translateZ;\\n\" + \n    $myShape[0] + \".focusDistance = \" + $mySel[0] + \".rotateX;\\n\" + \n    $myShape[0] + \".focusDistance = \" + $mySel[0] + \".rotateY;\\n\" + \n    $myShape[0] + \".focusDistance = \" + $mySel[0] + \".rotateZ;\\n\" + \n    \"float $camFoc[] = `camera - q - worldCenterOfInterest \" + $mySel[0] + \"`;\\n\" + \n    \"float $camPos[] = `camera - q - position \" + $mySel[0] + \"`;\\n\" + \n    \"vector $directionVector;\\n\" + \n    \"vector $one = <<$camFoc[0], $camFoc[1], $camFoc[2] >>;\\n\" + \n    \"vector $two = <<$camPos[0], $camPos[1], $camPos[2] >>;\\n\" + \n    \"vector $final = \\($two - $one\\);\\n\" + \n    \"$directionVector = unit\\($final\\);\\n\" + \n    \"float $p1X=`getAttr \" + $mySel[0] + \".translateX`;\\n\" + \n    \"float $p1Y=`getAttr \" + $mySel[0] + \".translateY`;\\n\" + \n    \"float $p1Z=`getAttr \" + $mySel[0] + \".translateZ`;\\n\" +\n    \"float $p2X=`getAttr \" + $myFocusLocator + \".translateX`;\\n\" + \n    \"float $p2Y=`getAttr \" + $myFocusLocator + \".translateY`;\\n\" + \n    \"float $p2Z=`getAttr \" + $myFocusLocator + \".translateZ`;\\n\" + \n    \"vector $p1=<<$p1X, $p1Y, $p1Z >>;\\n\" + \n    \"vector $p2=<<$p2X, $p2Y, $p2Z >>;\\n\" + \n    \"float $d_result;\\n\" + \n    \"$d_result = \\($directionVector.x * \\($p2.x - $p1.x\\) + $directionVector.y * \\($p2.y - $p1.y\\) + $directionVector.z * \\($p2.z - $p1.z\\)\\) / sqrt\\($directionVector.x*$directionVector.x + $directionVector.y*$directionVector.y + $directionVector.z*$directionVector.z\\);\\n\" + \n    \"$d_result = abs\\($d_result\\);\\n\" + \n    $myShape[0] + \".focusDistance = $d_result;\"\n) -o $myShape[0] -ae 0 -uc all;\n\nif (`pluginInfo -q -l mtoa`){\n    setAttr ($myShape[0] + \".aiEnableDOF\") 1;\n    connectAttr -f ($myShape[0] + \".focusDistance\") ($myShape[0] + \".aiFocusDistance\");\n    expression -n \"FStopToAiApertureSize1\" -s ($myShape[0] + \".aiApertureSize = \" + $myShape[0] + \".focalLength/10/\" + $myShape[0] + \".fStop/2;\") -o $myShape[0] -ae 0 -uc all;\n}\n\nselect $mySel[0];")
	da_DofLocator;

runTimeCommand
	-ann "Expose Joint Orient"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myTransform[] = `ls -sl -tr`;\nfor ($each in $myTransform){\n    setAttr -k on ($each + \".jointOrientX\");\n    setAttr -k on ($each + \".jointOrientY\");\n    setAttr -k on ($each + \".jointOrientZ\");\n}")
	da_ExposeJointOrient;

runTimeCommand
	-ann "Select All Components from Multi Selection"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("switch (`da_QueryFilterExpand`){\n    case 34: setSelectMode components Components; selectType -smp 0 -sme 0 -smf 1 -smu 0 -pv 0 -pe 0 -pf 1 -puv 0; HideManipulators; break;\n    case 32: setSelectMode components Components; selectType -smp 0 -sme 1 -smf 0 -smu 0 -pv 0 -pe 1 -pf 0 -puv 0; HideManipulators; break;\n    case 31: setSelectMode components Components; selectType -smp 1 -sme 0 -smf 0 -smu 0 -pv 1 -pe 0 -pf 0 -puv 0; HideManipulators; break;\n}\nSelectAll;")
	da_SelectAll;

runTimeCommand
	-ann "Invert Components from Multi Selection"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("switch (`da_QueryFilterExpand`){\n    case 34: setSelectMode components Components; selectType -smp 0 -sme 0 -smf 1 -smu 0 -pv 0 -pe 0 -pf 1 -puv 0; HideManipulators; break;\n    case 32: setSelectMode components Components; selectType -smp 0 -sme 1 -smf 0 -smu 0 -pv 0 -pe 1 -pf 0 -puv 0; HideManipulators; break;\n    case 31: setSelectMode components Components; selectType -smp 1 -sme 0 -smf 0 -smu 0 -pv 1 -pe 0 -pf 0 -puv 0; HideManipulators; break;\n}\nInvertSelection")
	da_InvertSelection;

runTimeCommand
	-ann "Create Sculpt Deformer"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl`;\n\nif (size($mySel) == 2){\n    sculpt -sculptTool $mySel[1] -mode flip -insideMode even -maxDisplacement 0.1 -dropoffType linear -dropoffDistance 1 -groupWithLocator 0 -objectCentered 1 $mySel[0];\n    select $mySel[1];\n}else{\n    sculpt -mode flip -insideMode even -maxDisplacement 0.1 -dropoffType linear -dropoffDistance 1 -groupWithLocator 0 -objectCentered 1;\n}\n\nstring $mySculptor[] = `ls -sl`;\nstring $mySculptorShape[] = `listRelatives -f -s`;\nselect $mySculptorShape[0];\n\nstring $myScuplt[] = `listConnections -s 0 -d 1 -t \"sculpt\"`;\nselect $myScuplt[0];\n\nAttributeEditor;\n\naddAdvancedSculptAttrs $myScuplt[0];\n\nstring $myScupltOrigin[] = `listConnections -s 1 -d 0 -t \"locator\"`;\n\nselect $myScupltOrigin[0];\nstring $myBuffer = `group -n sculptOrigin1`;\n\nselect $mySculptor[0];\nselect -add $myBuffer;\ndoCreateParentConstraintArgList 1 { \"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\npickWalk -d down;\npickWalk -d right;\nstring $myParentCons[] = `ls -sl`;\n\nselect $mySculptor[0];\n\naddAttr -ln \"ParentOrigin\" -at bool -min 0 -max 1 -dv 1 $mySculptor[0];\nsetAttr -e -k 1 ($mySculptor[0] + \".ParentOrigin\");\n\naddAttr -ln \"Displacement\" -at double -dv .1 $mySculptor[0];\nsetAttr -e -k 1 ($mySculptor[0] + \".Displacement\");\n\naddAttr -ln \"Dropoff\" -at double -min 0 -dv 1 $mySculptor[0];\nsetAttr -e -k 1 ($mySculptor[0] + \".Dropoff\");\n\nconnectAttr -f ($mySculptor[0] + \".ParentOrigin\") ($myParentCons[1] + \".\" + $mySculptor[0] + \"W0\");\nconnectAttr -f ($mySculptor[0] + \".Displacement\") ($myScuplt[0] + \".maximumDisplacement\");\nconnectAttr -f ($mySculptor[0] + \".Dropoff\") ($myScuplt[0] + \".dropoffDistance\");")
	da_SculptDeformer;

runTimeCommand
	-ann "Custom Expression Editor"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("ExpressionEditor;\nEEselectFilterCB expression")
	da_ExpressionEditor;

runTimeCommand
	-ann "Connect String Node to a Expression"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl`; \n\nfor ($i=0; $i < size($mySel); $i++){\n    string $myTextExpression = `createNode makeTextCurves`;\n    \n    connectAttr -f ($mySel[$i] + \".expression\") ($myTextExpression + \".text\");\n    disconnectAttr ($mySel[$i] + \".expression\") ($myTextExpression + \".text\");\n    \n    connectAttr -f ($myTextExpression + \".text\") ($mySel[$i] + \".expression\");\n    \n    select $myTextExpression;\n    rename stringExpression1;\n    \n    select -cl;\n}")
	da_StringNodeToExpression;

runTimeCommand
	-ann "Add Locator to a Surface"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myShape[] = `listRelatives -f -s`; \nstring $myPointOnSurface = `createNode pointOnSurfaceInfo`;\n\nspaceLocator -p 0 0 0;\nrename locatorSurface1;\n\nstring $myLocator[] = `ls -sl`;\n\nconnectAttr -f ($myShape[0] + \".worldSpace[0]\") ($myPointOnSurface + \".inputSurface\");\nconnectAttr -f ($myPointOnSurface + \".position\") ($myLocator[0] + \".translate\");\n\nsetAttr ($myPointOnSurface + \".turnOnPercentage\") 1;\n\naddAttr -ln \"PositionU\" -at double -min 0 -dv 0 $myLocator[0];\nsetAttr -e -k 1 ($myLocator[0] + \".PositionU\");\n\naddAttr -ln \"PositionV\" -at double -min 0 -dv 0 $myLocator[0];\nsetAttr -e -k 1 ($myLocator[0] + \".PositionV\");\n\nexpression -n \"LocatorOnSurfaceU1\" -s ($myPointOnSurface + \".parameterU = \" + \"fmod ( \" + $myLocator[0] + \".PositionU , 1)\");\nexpression -n \"LocatorOnSurfaceV1\" -s ($myPointOnSurface + \".parameterV = \" + \"fmod ( \" + $myLocator[0] + \".PositionV , 1)\");\n\nselect $myShape[0];\nselect -add $myLocator[0];\n\nnormalConstraint -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"vector\" -worldUpVector 0 1 0;\n\nselect $myLocator[0];\n\nsetAttr -l 1 \".t\";\nsetAttr -l 1 \".r\"")
	da_LocatorOnSurface;

runTimeCommand
	-ann "Add Locator to a Curve"
	-cat"Custom Scripts.May9_Next.Rigging"
	-c ("string $myShape[] = `listRelatives -f -s`; \nstring $myPointOnCurve = `createNode pointOnCurveInfo`;\n\nspaceLocator -p 0 0 0;\nrename locatorCurve1;\n\nstring $myLocator[] = `ls -sl`;\n\nconnectAttr -f ($myShape[0] + \".worldSpace[0]\") ($myPointOnCurve + \".inputCurve\");\nconnectAttr -f ($myPointOnCurve + \".position\") ($myLocator[0] + \".translate\");\n\nsetAttr ($myPointOnCurve + \".turnOnPercentage\") 1;\n\naddAttr -ln \"Position\" -at double -min 0 -dv 0 $myLocator[0];\nsetAttr -e -k 1 ($myLocator[0] + \".Position\");\n\nexpression -n \"LocatorOnCurve1\" -s ($myPointOnCurve + \".parameter = \" + \"fmod ( \" + $myLocator[0] + \".Position , 1)\");\n\nselect $myShape[0];\nselect -add $myLocator[0];\n\ntangentConstraint -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"vector\" -worldUpVector 0 1 0;\n\nselect $myLocator[0];\n\nsetAttr -l 1 \".t\";\nsetAttr -l 1 \".r\"")
	da_LocatorOnCurve;

runTimeCommand
	-ann "Advanced Point On Curve"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl -fl`;\n\nfor ($i=0; $i < size($mySel); $i++){\n    select $mySel[$i];\n    PointOnCurve;\n    rename PointOnCurve1;\n    CenterPivot;\n}")
	da_PointOnCurve;

runTimeCommand
	-ann "Increase Locator Size"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl`;\n\nfor ($i=0; $i < size($mySel); $i++){\n    select $mySel[$i];\n    setAttr(\".localScaleX\", getAttr(\".localScaleX\") * 1.5);\n    setAttr(\".localScaleY\", getAttr(\".localScaleY\") * 1.5);\n    setAttr(\".localScaleZ\", getAttr(\".localScaleZ\") * 1.5);\n}\n\nselect $mySel")
	da_IncreaseLocatorSize;

runTimeCommand
	-ann "Decrease Locator Size"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl`;\n\nfor ($i=0; $i < size($mySel); $i++){\n    select $mySel[$i];\n    setAttr(\".localScaleX\", getAttr(\".localScaleX\") * -.75);\n    setAttr(\".localScaleY\", getAttr(\".localScaleY\") * -.75);\n    setAttr(\".localScaleZ\", getAttr(\".localScaleZ\") * -.75);\n}\n\nselect $mySel")
	da_DecreaseLocatorSize;

runTimeCommand
	-ann "Add Rivet to Curve CVs"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $curveCheck[] = `filterExpand -sm 9`;\n\nif (size($curveCheck)){\n    da_GoToCVsNURBS;\n    SelectAll;\n}\n\nstring $nucleusCheck[] = `ls -type \"nucleus\"`;\nstring $mySel[] = `ls -sl -fl`;\n\nfor ($i=0; $i < size($mySel); $i++){\n    select $mySel[$i];\n    NEmitFromObject;\n    rename curveRivet1;\n    select `listConnections -s 0 -d 1`;\n    delete;\n}\n\nif (`size($nucleusCheck)` == 0){\n    delete nucleus1;\n}")
	da_CurveCvRivet;

runTimeCommand
	-ann "Create a Rigged Culster"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myNewCluster[] = `newCluster \"-relative -envelope 1\"`;\nstring $myNewCTRLCurve[] = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1`;\n\nselect $myNewCTRLCurve[0];\nselect -add $myNewCluster[1];\n\nmatchTransform;\n\nperformFreezeTransformations(0);\n\nconnectAttr -f ($myNewCTRLCurve[0] + \".t\") ($myNewCluster[1] + \".t\");\nconnectAttr -f ($myNewCTRLCurve[0] + \".r\") ($myNewCluster[1] + \".r\");\nconnectAttr -f ($myNewCTRLCurve[0] + \".s\") ($myNewCluster[1] + \".s\");\n\nstring $myNewGroup = `group`;\n\nselect -add $myNewCTRLCurve[0];\n\nMatchPivots;\n\nselect $myNewCluster[1];\nrename \"Cluster\";\n\nda_EnableReference;\n\nselect $myNewGroup;\nrename \"RiggedCluster1\";\n\nselect $myNewCTRLCurve[0];\nrename \"ClusterCTRL\";\n\nTagAsController;")
	da_RiggedCluster;

runTimeCommand
	-ann "Set Volume Field to Cube"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $myVolumeField[] = `ls -sl -ni -typ \"volumeAxisField\"`;\nfor($i=0; $i<size($myVolumeField); $i++){\n    setAttr ($myVolumeField[$i] + \".volumeShape\") 1;\n}")
	da_VolumeFieldCube;

runTimeCommand
	-ann "Apply Volume Axis Field to Curve"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $myShape[] = `listRelatives -f -s`;\nstring $myVolumeAxisField = `createNode volumeAxisField`;\n\nconnectAttr -f ($myShape[0] + \".worldSpace\") ($myVolumeAxisField + \".inputCurve\");\nconnectAttr -f time1.outTime ($myVolumeAxisField + \".time\");\n\nsetAttr ($myVolumeAxisField + \".volumeShape\") 7;\nsetAttr ($myVolumeAxisField + \".awayFromAxis\") 0;\nsetAttr ($myVolumeAxisField + \".alongAxis\") .2;\nsetAttr ($myVolumeAxisField + \".magnitude\") 50;\nsetAttr ($myVolumeAxisField + \".trapInside\") 1;\nsetAttr ($myVolumeAxisField + \".trapEnds\") 0;")
	da_FiledCurve;

runTimeCommand
	-ann "Connect Volume Field to a Curve"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $myShape[] = `listRelatives -f -s`;\nstring $myVolumeField[] = `ls -sl -ni -typ \"volumeAxisField\"`;\n\nselect $myVolumeField[0];\nda_ResetTransform;\n\nif(size($myShape) == 1){\n\tconnectAttr -f ($myShape[0] + \".worldSpace\") ($myVolumeField[0] + \".inputCurve\");\n\n\tsetAttr ($myVolumeField[0] + \".volumeShape\") 7;\n\tsetAttr ($myVolumeField[0] + \".awayFromAxis\") 0;\n\tsetAttr ($myVolumeField[0] + \".alongAxis\") .2;\n\tsetAttr ($myVolumeField[0] + \".magnitude\") 50;\n\tsetAttr ($myVolumeField[0] + \".trapInside\") 1;\n\tsetAttr ($myVolumeField[0] + \".trapEnds\") 0;\n}else{\n\twarning \"Select one curve\";\n}\n")
	da_VolumeFieldToCurve;

runTimeCommand
	-ann "Select Object in the Same Layer"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySelectionLayers[] = `listConnections -t \"displayLayer\"`;\nstring $myActualLayers[] = `stringArrayRemoveDuplicates $mySelectionLayers`;\n\nstring $myObjectLayer[];\n\nif (size($myActualLayers)){\n    for ($i = 0; $i < size($myActualLayers); $i++){\n        layerEditorSelectObjects $myActualLayers[$i];\n        appendStringArray ( $myObjectLayer, `ls -sl`, size(`ls -sl`) );\n        select -cl;\n    }\n\nselect $myObjectLayer;\nclear $myObjectLayer;\n}else{\n    warning \"Object(s) is not into a Layer\";\n}")
	da_SelectLayerObject;

runTimeCommand
	-ann "Select Object(s) from Animation Curve(s)"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("string $myAnimCurve[] = `keyframe -q -sl -name`;\n\nif (`size($myAnimCurve)`){\n    string $myAnimObject[] = stringArrayRemoveDuplicates(`listConnections $myAnimCurve`);\n    select -r $myAnimObject;\n}else{\n    warning \"Please select at least one animation curve\";\n}")
	da_SelectFromAnimCurve;

runTimeCommand
	-ann "Display Channel Box"
	-cat "Custom Scripts.May9_Next.System"
	-c ("if(!`isChannelBoxVisible`){\n    setChannelBoxVisible(1);\n}else{\n    raiseChannelBox;\n}\n")
	da_ChannelBox;

runTimeCommand
	-ann "Connect Place2d Node to File"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $myPlace2d[] = `ls -sl -type transform -type place2dTexture`;\nstring $myFiles[] = `ls -sl -type transform -type file`;\nif (size($myPlace2d) == 0){\n    createNode place2dTexture;\n    string $myPlace2d[] = `ls -sl -type transform -type place2dTexture`;\n}\n\nif (size($myFiles) > 0){\n    for ($i=0; $i<size($myFiles); $i++) {\n        connectAttr -f ($myPlace2d[0] + \".outUV\") ($myFiles[$i] + \".uvCoord\");\n        connectAttr -f ($myPlace2d[0] + \".outUvFilterSize\") ($myFiles[$i] + \".uvFilterSize\");\n        connectAttr -f ($myPlace2d[0] + \".vertexCameraOne\") ($myFiles[$i] + \".vertexCameraOne\");\n        \n        connectAttr -f ($myPlace2d[0] + \".vertexUvOne\") ($myFiles[$i] + \".vertexUvOne\");\n        connectAttr -f ($myPlace2d[0] + \".vertexUvThree\") ($myFiles[$i] + \".vertexUvThree\");\n        connectAttr -f ($myPlace2d[0] + \".vertexUvTwo\") ($myFiles[$i] + \".vertexUvTwo\");\n        \n        connectAttr -f ($myPlace2d[0] + \".coverage\") ($myFiles[$i] + \".coverage\");\n        connectAttr -f ($myPlace2d[0] + \".mirrorU\") ($myFiles[$i] + \".mirrorU\");\n        connectAttr -f ($myPlace2d[0] + \".mirrorV\") ($myFiles[$i] + \".mirrorV\");\n        \n        connectAttr -f ($myPlace2d[0] + \".noiseUV\") ($myFiles[$i] + \".noiseUV\");\n        connectAttr -f ($myPlace2d[0] + \".offset\") ($myFiles[$i] + \".offset\");\n        connectAttr -f ($myPlace2d[0] + \".repeatUV\") ($myFiles[$i] + \".repeatUV\");\n        \n        connectAttr -f ($myPlace2d[0] + \".rotateFrame\") ($myFiles[$i] + \".rotateFrame\");\n        connectAttr -f ($myPlace2d[0] + \".rotateUV\") ($myFiles[$i] + \".rotateUV\");\n        connectAttr -f ($myPlace2d[0] + \".stagger\") ($myFiles[$i] + \".stagger\");\n        \n        connectAttr -f ($myPlace2d[0] + \".translateFrame\") ($myFiles[$i] + \".translateFrame\");\n        \n        connectAttr -f ($myPlace2d[0] + \".wrapU\") ($myFiles[$i] + \".wrapU\");\n        connectAttr -f ($myPlace2d[0] + \".wrapV\") ($myFiles[$i] + \".wrapV\");\n    }\n}else{\n    string $myPlace2d[] = `ls -sl -type transform -type place2dTexture`;\n    string $mySel[] = `ls -sl`;\n    select -d $myPlace2d[0];\n    string $myTexture[] = `ls -sl`;\n    for ($i=0; $i<size($myTexture); $i++) {\n        connectAttr -f ($myPlace2d[0] + \".outUV\") ($myTexture[$i] + \".uvCoord\");\n        connectAttr -f ($myPlace2d[0] + \".outUvFilterSize\") ($myTexture[$i] + \".uvFilterSize\");\n    }\n}")
	da_ConnectPlace2dToFile;

runTimeCommand
	-ann "Toggle Pivot Visibility"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $mySel[] = `ls -sl`;\n\nif(getAttr ($mySel[0] + \".drp\")){\n    for ($i=0; $i<size($mySel); $i++){\n    \tsetAttr ($mySel[$i] + \".drp\") 0;\n    }\n    inViewMessage -pos topCenter -msg \"Pivot Visibility Off\" -fade;\n}else{\n    for ($i=0; $i<size($mySel); $i++){\n    \tsetAttr ($mySel[$i] + \".drp\") 1;\n    }\n    inViewMessage -pos topCenter -msg \"Pivot Visibility On\" -fade;\n}")
	da_TogglePivotVisibility;

runTimeCommand
	-ann "Enable Point Light Visible"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n    setAttr ($each +\".aiRadius\") 1;\n    \n\tsetAttr ($each +\".aiCamera\") 1;\n\tsetAttr ($each +\".aiTransmission\") 1;\n}\n\ninViewMessage -pos topCenter -msg \"Light Visible On\" -fade;")
	da_AiPointLightVisible;

runTimeCommand
	-ann "Disable Point Light Visible"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n    setAttr ($each +\".aiRadius\") 0;\n    \n\tsetAttr ($each +\".aiCamera\") 0;\n\tsetAttr ($each +\".aiTransmission\") 0;\n}\n\ninViewMessage -pos topCenter -msg \"Light Visible Off\" -fade;")
	da_AiNoPointLightVisible;

runTimeCommand
	-ann "Enable Light Visible"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n\tsetAttr ($each +\".aiCamera\") 1;\n\tsetAttr ($each +\".aiTransmission\") 1;\n}\n\ninViewMessage -pos topCenter -msg \"Light Visible On\" -fade;")
	da_AiLightVisible;

runTimeCommand
	-ann "Disable Light Visible\n"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n\tsetAttr ($each +\".aiCamera\") 0;\n\tsetAttr ($each +\".aiTransmission\") 0;\n}\n\ninViewMessage -pos topCenter -msg \"Light Visible Off\" -fade;")
	da_AiNoLightVisible;

runTimeCommand
	-ann "Bake Light to Texture"
	-cat "Custom Scripts.May9_Next.Render"
	-commandLanguage "python"
	-c ("import mtoa.ui.arnoldmenu;mtoa.ui.arnoldmenu.arnoldRenderToTexture()")
	da_AiRenderToTexture;

runTimeCommand
	-ann "Custom Edit Constraint Membership Tool"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $myCurConstraint[] = `ls -sl`;\n\nnConstraintMembershipTool")
	da_EditConstraintMembershipTool;

runTimeCommand
	-ann "Complete Edit Constraint Membership Tool"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("if (`about -api` >= 20190000){\n\tnConstraintReplaceMembers;\n}else{\n\tdynamicConstraintMembership \"replace\";\n}\n\nbuildSelectMM;\nMarkingMenuPopDown;\nselect $myCurConstraint[0]")
	da_CompleteEditConstraintMembershipTool;

runTimeCommand
	-ann "Toggle Selection Highlighting"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $panel = `getPanel -wf`;\nstring $selCheck = `modelEditor -q -sel $panel`;\n\nif ($selCheck == 1){\n    modelEditor -e -sel 0 $panel;\n    inViewMessage -pos topCenter -msg \"Selection Highlighting OFF\" -fade;\n}else{\n    modelEditor -e -sel 1 $panel;\n    inViewMessage -pos topCenter -msg \"Selection Highlighting ON\" -fade;\n}")
	da_ToggleSelectionHighlighting;

runTimeCommand
	-ann "Toggle Controllers visibility"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -controllers $panel`;\n\nif ($visCheck == 1){\n    modelEditor -e -controllers 0 $panel;\n    inViewMessage -pos topCenter -msg \"Controllers visibility OFF\" -fade;\n}else{\n    modelEditor -e -controllers 1 $panel;\n    inViewMessage -pos topCenter -msg \"Controllers visibility ON\" -fade;\n}\n")
	da_ToggleControllersVis;

runTimeCommand
	-ann "Toggle Arnold Render Device"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("int $myRenderDevice = `getAttr \"defaultArnoldRenderOptions.renderDevice\"`;\n\nif ($myRenderDevice){\n    setAttr \"defaultArnoldRenderOptions.renderDevice\" 0;\n}else{\n    setAttr \"defaultArnoldRenderOptions.renderDevice\" 1;\n}")
	da_ToggleRenderDevice;

runTimeCommand
	-ann "Create AiAreaLight Light"
	-cat "Custom Scripts.May9_Next.Render"
	-cl "python"
	-c ("import mtoa.utils as mutils;mutils.createLocator(\"aiAreaLight\", asLight=True)")
	da_AiAreaLight;

runTimeCommand
	-ann "Remove Infinity from Graph Editor"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("setInfinity -pri constant;\nsetInfinity -poi constant;\n")
	da_RemoveInfinity;

runTimeCommand
	-ann "Disable Portal Light for Skydome"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n\tsetAttr ($each +\".portalMode\") 0;\n}\n\ninViewMessage -pos topCenter -msg \"Portal Mode Off\" -fade;")
	da_AiPortalModeOff;

runTimeCommand
	-ann "Interior Only Portal Light for Skydome"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n\tsetAttr ($each +\".portalMode\") 1;\n}\n\ninViewMessage -pos topCenter -msg \"Portal Mode Interior Only\" -fade;")
	da_AiPortalModeInterior;

runTimeCommand
	-ann "Interior and Exterior Portal Light for Skydome"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n\tsetAttr ($each +\".portalMode\") 2;\n}\n\ninViewMessage -pos topCenter -msg \"Portal Mode Interior and Exterior\" -fade;")
	da_AiPortalModeInteriorExterior;

runTimeCommand
	-ann "Return Selection Size"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `ls -sl`; \nint $myCurrSize = `size($mySel)`;\n\ninViewMessage -pos topCenter -msg (\"Selection Size \"+$myCurrSize) -fade;\nprint ($myCurrSize + \"\\n\");")
	da_SelectionSize;

runTimeCommand
	-ann "Custom Edit Membership Tool"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $myCurDeformer[] = `ls -sl`;\n\nEditMembershipTool;\n")
	da_EditMembershipTool;

runTimeCommand
	-ann "Complete Edit Membership Tool"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("buildSelectMM;\nMarkingMenuPopDown;\nselect $myCurDeformer[0]")
	da_CompleteEditMembershipTool;

runTimeCommand
	-ann "Enable Blue Overrides on Selected Shape\n"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myShape[] = `listRelatives -f -s`; \nfor ($each in $myShape){\n    setAttr ($each +\".overrideEnabled\") 1;\n    setAttr ($each +\".overrideColor\") 6;\n}\n")
	da_BlueOverrides;

runTimeCommand
	-ann "Batch Skin Transfert UI"
	-cat"Custom Scripts.May9_Next.Rigging"
	-c ("string $myResult = `confirmDialog -title \"Copy Skin Weight\" -message \"Before continue please check if you have select for first the weighted geometry, and the other meshe(s) are bind on same skeleton. What association did you want use?\" \n-button \"Closest Point on Surface\" -button \"Ray Cast\" -button \"Closest Component\" -button \"UV Space\" -button \"Close\" -defaultButton \"Close\" \n-cancelButton \"Close\" -dismissString \"Close\"`;\n\nif ($myResult == \"Closest Point on Surface\") {\n    da_BatchSkinTransfertCP;\n}\n    \nelse if ($myResult == \"Ray Cast\") {\n    da_BatchSkinTransfertRC;\n}\n    \nelse if ($myResult == \"Closest Component\") {\n    da_BatchSkinTransfertCC;\n}\n\nelse if ($myResult == \"UV Space\") {\n    da_BatchSkinTransfertUV;\n}")
	da_BatchSkinTransfertUI;

runTimeCommand
	-ann "Restart and Enable Interactive Playback"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("playbackOptions -e -playbackSpeed 0 -maxPlaybackSpeed 1;\nplayButtonStart;\nInteractivePlayback")
	da_InteractivePlayback;

runTimeCommand
	-ann "Toggle Emitter Manipulators"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if (`currentCtx` == \"ShowManips\"){\n    buildSelectMM;MarkingMenuPopDown;\n} else {\n    ShowManipulators;\n}")
	da_ToggleEmitterManipulators;

runTimeCommand
	-ann "Create nParticle Kill Field"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $nParticle[] = `ls -sl`;\nstring $myShape[] = `listRelatives -f -s`; \n\nturbulence -pos 0 0 0  -name \"kill_#\" -m 0.1 -att 0 -f 2 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 2 -noiseRatio 0.707  -mxd -1  -vsh cube -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5;\nstring $killField[] = `ls -sl`;\n\nfor ($i=0; $i<size($nParticle); $i++) {\n    connectDynamic -f ($killField[0]) ($nParticle[$i]);\n}\n\nstring $connections[] = `listConnections -d 1 -s 0 -p 1 $killField[0]`;\n\nfor ($i=0; $i<size($nParticle); $i++) {\n    string $exp = `dynExpression -q -s -rad ($nParticle[$i])`;\n    $exp += \"\\n//kill field: \" + $killField[0] + \"\\n\";\n    $exp += \"if (mag(\" + $connections[$i] + \") > 0) {lifespanPP = 0;}\\n\";\n    dynExpression -rad -s $exp ($nParticle[$i]);\n}\n\nfor ($each in $myShape){\n    setAttr ($each +\".lifespanMode\") 3;\n}\n\nselect $killField[0];")
	da_nParticleKill;

runTimeCommand
	-ann "Open Paint Skin Tool"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c("ArtPaintSkinWeightsTool;\nda_OpenToolSettings;\nevalDeferred \"artAttrSkinPaintModePaintSelect 1 artAttrSkinPaintCtx\";")
	da_OpenPaintSkinTool;

runTimeCommand
	-ann "Close Paint Skin Tool"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("buildSelectMM; MarkingMenuPopDown; da_BackToObjectMode;\nstring $polySel[] = `filterExpand -sm 12`;\nselect $polySel;")
	da_ClosePaintSkinTool;

runTimeCommand
	-ann "Open Tool Settings Only if is Closed"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("if (`isUIComponentVisible(\"Tool Settings\")` == 0){\n    toolPropertyWindow -inMainWindow true;\n}")
	da_OpenToolSettings;

runTimeCommand
	-ann "Toggle Undo State"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if (`undoInfo -q -st`){\n    undoInfo -st 0;\n}else{\n    undoInfo -st 1;\n}")
	da_ToggleUndoState;

runTimeCommand
	-ann "Bind Rigid by Using Skin Cluster"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $polySel[] = `filterExpand -sm 12`;\nstring $jointSel[] = `ls -sl -typ \"joint\"`;\n\nfor ($i=0; $i<size($polySel); $i++){\n    select $polySel[$i];\n    select -add $jointSel[0];\n    skinCluster -mi 1;\n}")
	da_BindRigidSkin;

runTimeCommand
	-ann "Display Hypergraph as Hierachy"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $myActualPanel = `getPanel -underPointer`;\nshowDAGLevel ($myActualPanel + \"HyperGraphEd\")")
	da_HgHierachy;

runTimeCommand
	-ann "Display Hypergraph as Connections"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $myActualPanel = `getPanel -underPointer`;\nshowDGLevel ($myActualPanel + \"HyperGraphEd\")")
	da_HgConnections;

runTimeCommand
	-ann "Define Outliner no Click Command"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $mySel[] = `ls -sl`;\nstring $myContainer[] = `ls -sl -containers`;\nstring $myNodeType[] = `da_QueryArrayNodeType`;\nselect $mySel;\n\nif ( `size($myContainer)` == 0 ){\n    outlinerEditor -e -sc 1 `getPanel -underPointer`;\n}else if ( $myNodeType[0] == \"character\" ){\n    characterEditor( true );\n}else{\n    da_EditContainer;\n}")
	da_OutlinerNoClick;

runTimeCommand
	-ann "Edit Container"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $myContainer[] = `ls -sl -containers`;\nHypergraphDGWindow;\nevalDeferred (\"select $myContainer\")")
	da_EditContainer;

runTimeCommand
	-ann "Toggle Container Status"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $myActualPanel = `getPanel -underPointer`;\nint $ToggleContainerTag = (($ToggleContainerTag + 1) % 2);\n\nif ($ToggleContainerTag){\n\thyperGraph -e -ec ($myActualPanel + \"HyperGraphEd\");\n}else{\n\thyperGraph -e -cc ($myActualPanel + \"HyperGraphEd\");\n}")
	da_ToggleContainer;

runTimeCommand
	-ann "Detach Edges"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl`;\nDetachEdgeComponent;\nselect $mySel")
	da_DetachEdge;

runTimeCommand
	-ann "Detach Vertex"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl`;\nDetachVertexComponent;\nselect $mySel")
	da_DetachVertex;

runTimeCommand
	-ann "Select Triangular Faces"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modePoly\");\npolySelectConstraint -m 3 -t 0x0008 -sz 1;// to get triangle\nstring $triangleSel[] = `ls -sl`;\npolySelectConstraint -sz off; // turn off angle constraint\nselect $triangleSel;\n\nif (size($triangleSel) > 0){\n    inViewMessage -pos topCenter -msg \"Triangle Selected\" -fade;\n}else{\n    inViewMessage -pos topCenter -msg \"There is no Triangle on Selected Mesh\" -fade;\n}")
	da_SelectTriangle;

runTimeCommand
	-ann "Select Nsided Faces"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modePoly\");\npolySelectConstraint -m 3 -t 0x0008 -sz 3;// to get triangle\nstring $nsidedSel[] = `ls -sl`;\npolySelectConstraint -sz off; // turn off angle constraint\nselect $nsidedSel;\n\nif (size($nsidedSel) > 0){\n    inViewMessage -pos topCenter -msg \"Nsided Selected\" -fade;\n}else{\n    inViewMessage -pos topCenter -msg \"There is no Nsided on Selected Mesh\" -fade;\n}")
	da_SelectNsided;

runTimeCommand
	-ann "Clean Nonmainfold Geometry"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("polyCleanupArgList 4 {\n    \"0\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1e-05\",\"0\",\"1e-05\",\"0\",\"1e-05\",\"0\",\"1\",\"0\",\"0\"\n}")
	da_CleanNonmainfold;

runTimeCommand
	-ann "Toggle Walk Tool"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`currentCtx` == \"walkContext\"){\n    da_DisableWalkTool;\n}else{\n    da_EnableWalkTool;\n}\n")
	da_ToggleWalkTool;

runTimeCommand
	-ann "Enable Walk Tool"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("WalkTool;\ninViewMessage -pos midCenter -amg \"Walk Tool is activated, press ESC to close it\" -fade;")
	da_EnableWalkTool;

runTimeCommand
	-ann "Disable Walk Tool"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("setToolTo selectSuperContext;\nsetWalkModeVisibility(0);")
	da_DisableWalkTool;

runTimeCommand
	-ann "Increase Walk Speed"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("float $myWalkSpeed = `walkCtx -q -walkSpeed walkContext`;\n\nwalkCtx -e -walkSpeed ($myWalkSpeed*2) walkContext;\n\ninViewMessage -pos topCenter -msg (\"Walk Speed: \" + $myWalkSpeed) -fade -fit 100 -fot 100 -fst 400;")
	da_IncreaseWalkSpeed;

runTimeCommand
	-ann "Reduce Walk Speed"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("float $myWalkSpeed = `walkCtx -q -walkSpeed walkContext`;\n\nwalkCtx -e -walkSpeed ($myWalkSpeed/2) walkContext;\n\ninViewMessage -pos topCenter -msg (\"Walk Speed: \" + $myWalkSpeed) -fade -fit 100 -fot 100 -fst 400;")
	da_ReduceWalkSpeed;

runTimeCommand
	-ann "Toggle Skin Paint Mode"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $currentTool = `currentCtx`;\nint $paintModeCheck = `artAttrSkinPaintCtx -q -skinPaintMode $currentTool`;\n\nif ($paintModeCheck != 0){\n\tartAttrSkinPaintModePaintSelect 0 artAttrSkinPaintCtx;\n\tsetSelectMode components Components;\n\tselectType -smp 1 -sme 0 -smf 0 -smu 0 -pv 1 -pe 0 -pf 0 -puv 0;\n\tHideManipulators;\n}else{\n\tif (size(`filterExpand -sm 31`) == 0){\n\t    da_ClosePaintSkinTool;\n\t\tda_OpenPaintSkinTool;\n\t}else{\n\t    artAttrSkinPaintModePaintSelect 1 artAttrSkinPaintCtx;\n\t}\n}")
	da_SkinPaintMode;

runTimeCommand
	-ann "Auto UV Unfolding"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $myResult = `confirmDialog -title \"Confirm\" -message \"This command automatic generate UV map and Freeze Transformation, continue?\" \n-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n-cancelButton \"No\" -dismissString \"No\"`;\nif ($myResult == \"Yes\"){\n    string $mySel[] = `ls -sl`; \n    \n    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;\n    for ($i=0; $i<size($mySel); $i++){\n        select $mySel[$i];\n        performPolyProjection Planar 0;\n\t    da_BackToObjectMode;\n        u3dAutoSeam -s 0 -p 1;\n        u3dOptimize -ite 1 -pow 1 -sa 1 -bi 0 -tf 1 -ms 1024 -rs 0;\n        u3dUnfold -ite 1 -p 0 -bi 1 -tf 1 -ms 1024 -rs 0;\n        u3dLayout -res 256 -scl 1 -spc 9.765625e-05 -mar 9.765625e-05 -box 0 1 0 1;\n    }\n\n\tselect $mySel;\n}")
	da_AutoUnfold;

runTimeCommand
	-ann "Define Rigid bind and Apply Delta Mush"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $polySel[] = `filterExpand -sm 12`;\nstring $jointSel[] = `filterExpand -sm 3`;\n\nfor ($i=0; $i<size($polySel); $i++){\n    select $polySel[$i];\n    select -add $jointSel[0];\n    skinCluster -mi 1;\n\tselect $polySel[$i];\t\n\tDeltaMush;\n}\n")
	da_DeltaSkin;

runTimeCommand
	-ann "Set Smooth UV on Selected Meshes"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySelShape[] = `ls -sl -o`;\nint $myUVSmoothMode = `getAttr ($mySelShape[0] + \".osdFvarBoundary\")`;\n\nfor ($i=0; $i<size($mySelShape); $i++) {\n    if ($myUVSmoothMode != 2){\n        setAttr ($mySelShape[$i] + \".osdFvarBoundary\") 2;\n    }else{\n        setAttr ($mySelShape[$i] + \".osdFvarBoundary\") 3;\n    }\n}")
	da_SmoothUV;

runTimeCommand
	-ann "Single Shell Mapping"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`;\n\nfor ($i=0; $i<size($mySel); $i++) {\n    select $mySel[$i];\n\tperformPolyProjectionArgList \"1\" {\"0\", \"Spherical\", \"ls -sl\", \"0\"} \"\";\n\tSelectUVBorderComponents;\n\tSewUVs;\n\tda_BackToObjectMode;\n\tu3dLayout -res 256 -scl 1 -spc 9.765625e-05 -mar 9.765625e-05 -box 0 1 0 1;\n}\n")
	da_SingleShellMapping;

runTimeCommand
	-ann "Surface Slide Toggle"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if (`xformConstraint -q -t` != \"surface\"){\n\tdR_slideSurface;\n}else{\n\tdR_slideOff;\n}")
	da_SurfaceSlideToggle;

runTimeCommand
	-ann "Edge Slide Toggle"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if (`xformConstraint -q -t` != \"edge\"){\n\tdR_slideEdge;\n}else{\n\tdR_slideOff;\n}")
	da_EdgeSlideToggle;

runTimeCommand
	-ann "Toggle Parallel Evalutaion"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $evalMode[] = `evaluationManager -q -m`;\n\nif ($evalMode[0] != \"parallel\"){\n    evaluationManager -m \"parallel\";\n    ogs -r;\n}else{\n    evaluationManager -m \"off\";\n    ogs -r;\n}")
	da_evalToggle;

if (`about -api` >= 20190000){
runTimeCommand
	-ann "Toggle Cache Playback"
	-cat "Custom Scripts.May9_Next.Toggle"
	-cl "python"
	-c ("if CachePreferenceEnabled().get_value():\n    CachePreferenceEnabled().set_value( False )\nelse:\n    CachePreferenceEnabled().set_value( True )")
	da_ToggleCachePlayback;

runTimeCommand
	-ann "Evaluation Cache HUD enable"
	-cat "Custom Scripts.May9_Next.Scene"
	-cl "python"
	-c ("from maya.plugin.evaluator.CacheUiHud import CachePreferenceHud; CachePreferenceHud().set_value( not 0 )")
	da_EvalCacheHUD;

runTimeCommand
	-ann "Evaluation Cache HUDdisable"
	-cat "Custom Scripts.May9_Next.Scene"
	-cl "python"
	-c ("from maya.plugin.evaluator.CacheUiHud import CachePreferenceHud; CachePreferenceHud().set_value( not 1 )")
	da_NoEvalCacheHUD;
}

if (`about -api` >= 20190100){
runTimeCommand
	-ann "Toggle SmoothMesh Cache"
	-cat "Custom Scripts.May9_Next.Toggle"
	-cl "python"
	-c ("if CachePreferenceCacheSmoothMeshes().get_value():\n    CachePreferenceCacheSmoothMeshes().set_value( not 1 )\nelse:\n    CachePreferenceCacheSmoothMeshes().set_value( not 0 )")
	da_ToggleSmoothMeshCache;
}

runTimeCommand
	-ann "Connect Transform Attributes"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $myResult = `confirmDialog -title \"Transform Connector\" -message \"Before continue please check if you have select for first the parent geometry.\\nWhat attribute did you want to connect?\" \n-button \"Translate\" -button \"Rotate\" -button \"Scale\" -button \"All\" -button \"Close\" -defaultButton \"Close\" \n-cancelButton \"Close\" -dismissString \"Close\"`;\n\nif ($myResult == \"Translate\") {\n    string $createConnect[] = `ls -sl`;\n    int $numObj = size($createConnect); \n    for($i=1; $i<$numObj; $i++){\n        connectAttr -f ($createConnect[0] + \".t\") ($createConnect[$i] + \".t\");\n    }\n}\n    \nelse if ($myResult == \"Rotate\") {\n    string $createConnect[] = `ls -sl`;\n    int $numObj = size($createConnect); \n    for($i=1; $i<$numObj; $i++){\n        connectAttr -f ($createConnect[0] + \".r\") ($createConnect[$i] + \".r\");\n    }\n}\n    \nelse if ($myResult == \"Scale\") {\n    string $createConnect[] = `ls -sl`;\n    int $numObj = size($createConnect); \n    for($i=1; $i<$numObj; $i++){\n        connectAttr -f ($createConnect[0] + \".s\") ($createConnect[$i] + \".s\");\n    }\n}\n\nelse if ($myResult == \"All\") {\n    string $createConnect[] = `ls -sl`;\n    int $numObj = size($createConnect); \n    for($i=1; $i<$numObj; $i++){\n        connectAttr -f ($createConnect[0] + \".t\") ($createConnect[$i] + \".t\");\n        connectAttr -f ($createConnect[0] + \".r\") ($createConnect[$i] + \".r\");\n        connectAttr -f ($createConnect[0] + \".s\") ($createConnect[$i] + \".s\");\n    }\n}")
	da_ConnectTransformUI;

runTimeCommand
	-ann "Connect Shapes UI"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $myResult = `confirmDialog -title \"Shape Connector\" -message \"Before continue please check if you have select for first the parent geometry.\" \n-button \"Connect\" -button \"Cancel\" -cancelButton \"Cancel\" -defaultButton \"Cancel\"`;\nif ($myResult == \"Connect\") {\n    string $createConnect[] = `ls -sl`;\n    int $numObj = size($createConnect); \n    for($i=1; $i<$numObj; $i++){\n        connectAttr -f ($createConnect[0] + \".outMesh\") ($createConnect[$i] + \".inMesh\");\n    }\n}")
	da_ConnectShapeUI;

runTimeCommand
	-ann "Connect Nurbs Shapes UI"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $myResult = `confirmDialog -title \"Shape Connector\" -message \"Before continue please check if you have select for first the parent geometry.\" \n-button \"Connect\" -button \"Cancel\" -cancelButton \"Cancel\" -defaultButton \"Cancel\"`;\nif ($myResult == \"Connect\") {\n    string $createConnect[] = `ls -sl`;\n    int $numObj = size($createConnect); \n    for($i=1; $i<$numObj; $i++){\n        connectAttr -f ($createConnect[0] + \".worldSpace\") ($createConnect[$i] + \".create\");\n    }\n}")
	da_ConnectNurbsShapesUI;

runTimeCommand
	-ann "Enable Red Overrides on Selected Shape"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myShape[] = `listRelatives -f -s`; \nfor ($each in $myShape){\n    setAttr ($each +\".overrideEnabled\") 1;\n    setAttr ($each +\".overrideColor\") 13;\n}\n")
	da_RedOverrides;

runTimeCommand
	-ann "Enable Green Overrides on Selected Shape"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myShape[] = `listRelatives -f -s`; \nfor ($each in $myShape){\n    setAttr ($each +\".overrideEnabled\") 1;\n    setAttr ($each +\".overrideColor\") 14;\n}")
	da_GreenOverrides;

runTimeCommand
	-ann "Disable Color Overrides on Selected Shape"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myShape[] = `listRelatives -f -s`; \nfor ($each in $myShape){\n    setAttr ($each +\".overrideEnabled\") 1;\n    setAttr ($each +\".overrideColor\") 0;\n}")
	da_NoColorOverrides;

runTimeCommand
	-ann "Enable AiMesh Light on multiple mesh"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("FreezeTransformations;\n\nstring $mySel[] = `ls -sl`; \nfor ($i=0; $i<size($mySel); $i++){\n    select $mySel[$i];\n\tda_AiMeshLight;\n\tCenterPivot;\n}")
	da_AiMeshesLight;

runTimeCommand
	-ann "Enable High Sample on Lights"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n\tsetAttr ($each +\".aiSamples\") 3;\n}\n\ninViewMessage -pos topCenter -msg \"High Quality Samples On\" -fade;")
	da_AiHighSample;

runTimeCommand
	-ann "Disable High Sample on Light"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n\tsetAttr ($each +\".aiSamples\") 1;\n}\n\ninViewMessage -pos topCenter -msg \"High Quality Samples Off\" -fade;")
	da_AiLowSample;

runTimeCommand
	-ann "Enable Warm Light"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n    setAttr ($each +\".aiUseColorTemperature\") 1;\n\tsetAttr ($each +\".aiColorTemperature\") 5500;\n}\n\ninViewMessage -pos topCenter -msg \"Warm Light Enable\" -fade;")
	da_AiWarmLight;

runTimeCommand
	-ann "Enable Neutral Light"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n    setAttr ($each +\".aiUseColorTemperature\") 1;\n\tsetAttr ($each +\".aiColorTemperature\") 6500;\n}\n\ninViewMessage -pos topCenter -msg \"Neutral Light Enable\" -fade;")
	da_AiNeutralLight;

runTimeCommand
	-ann "Enable Cold Light"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\n    setAttr ($each +\".aiUseColorTemperature\") 1;\n\tsetAttr ($each +\".aiColorTemperature\") 7500;\n}\n\ninViewMessage -pos topCenter -msg \"Cold Light Enable\" -fade;")
	da_AiColdLight;

runTimeCommand
	-ann "Enable Bounding Box"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $objectTransform[] = `ls -sl -tr`;\nfor ($each in $objectTransform){\n    setAttr ($each +\".overrideEnabled\") 1;\n    setAttr ($each +\".overrideLevelOfDetail\") 1;\n}")
	da_EnableBoundingBox;

runTimeCommand
	-ann "Disable Bounding Box"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $objectTransform[] = `ls -sl -tr`;\nfor ($each in $objectTransform){\n    setAttr ($each +\".overrideEnabled\") 0;\n    setAttr ($each +\".overrideLevelOfDetail\") 0;\n}")
	da_DisableBoundingBox;

runTimeCommand
	-ann "Create IK for selected curve"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myResult = `confirmDialog -title \"Continue?\" -message \"Before continue please check to have selected in this order:\\n- First Joint of the chain\\n- Last Joint of the chain\\n- The curve for the IK solver\" \n-button \"Continue\" -button \"Close\"  -defaultButton \"Close\" \n-cancelButton \"Close\" -dismissString \"Close\"`;\n\nif ($myResult == \"Continue\"){\n    string $mySel[] = `ls -sl`;\n\n    ikHandle -sj $mySel[0] -ee $mySel[1] -c $mySel[2] -sol ikSplineSolver -ccv 0;\n}")
	da_IkOnCurve;

runTimeCommand
	-ann "Create an IK handle on selected Joints"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myResult = `confirmDialog -title \"Continue?\" -message \"Before continue please check to have selected in this order:\\n- First Joint of the chain\\n- Last Joint of the chain\" \n-button \"Continue\" -button \"Close\"  -defaultButton \"Close\" \n-cancelButton \"Close\" -dismissString \"Close\"`;\n\nif ($myResult == \"Continue\"){\n    string $mySel[] = `ls -sl`;\n\n    ikHandle -sj $mySel[0] -ee $mySel[1] - sol ikRPsolver;\n}")
	da_IkOnJoint;

runTimeCommand
	-ann "UI Designed to Choose the Mirror Plane Cut"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myResult = `confirmDialog -title \"Mirror Cut Plane\" -message \"On which plane did you want mirror your mesh?\" \n-button \"YZ\" -button \"XZ\" -button \"XY\" -button \"-YZ\" -button \"-XZ\" -button \"-XY\" -button \"Close\" -defaultButton \"Close\" \n-cancelButton \"Close\" -dismissString \"Close\"`;\n\nif ($myResult == \"YZ\")\n    da_MirrorCutX;\n    \nelse if ($myResult == \"XZ\")\n    da_MirrorCutY;\n    \nelse if ($myResult == \"XY\")\n    da_MirrorCutZ;\n    \nelse if ($myResult == \"-YZ\")\n    da_MirrorCutXNeg;\n    \nelse if ($myResult == \"-XZ\")\n    da_MirrorCutYNeg;\n    \nelse if ($myResult == \"-XY\")\n    da_MirrorCutZNeg;")
	da_MirrorCutSelector;

runTimeCommand
	-ann "UI Designed to Choose the Duplicate Mirror Aixis"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myResult = `confirmDialog -title \"Mirror Transform\" -message \"On which axis did you want mirror your transform(s)?\" \n-button \"X\" -button \"Y\" -button \"Z\" -button \"Close\" -defaultButton \"Close\" \n-cancelButton \"Close\" -dismissString \"Close\"`;\n\nif ($myResult == \"X\")\n    da_TransformMirrorNegX;\n    \nelse if ($myResult == \"Y\")\n    da_TransformMirrorNegY;\n    \nelse if ($myResult == \"Z\")\n    da_TransformMirrorNegZ;")
	da_TransformMirrorSelector;

runTimeCommand
	-ann "Transform Mirror on Negative YZ plane"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `duplicate -rr`;\ndoGroup 0 1 1;\nstring $myBuffer[] = `ls -sl`;\nsetAttr ($myBuffer[0] + \".scaleX\") -1;\n\nselect $mySel;\nUnparent;\nGroup;\nrename \"MirroredTransform1\";\n\ndelete $myBuffer[0];\n")
	da_TransformMirrorNegX;

runTimeCommand
	-ann "Transform Mirror on Negative XZ plane"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `duplicate -rr`;\ndoGroup 0 1 1;\nstring $myBuffer[] = `ls -sl`;\nsetAttr ($myBuffer[0] + \".scaleY\") -1;\n\nselect $mySel;\nUnparent;\nGroup;\nrename \"MirroredTransform1\";\n\ndelete $myBuffer[0];\n")
	da_TransformMirrorNegY;

runTimeCommand
	-ann "Transform Mirror on Negative XY plane"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `duplicate -rr`;\ndoGroup 0 1 1;\nstring $myBuffer[] = `ls -sl`;\nsetAttr ($myBuffer[0] + \".scaleZ\") -1;\n\nselect $mySel;\nUnparent;\nGroup;\nrename \"MirroredTransform1\";\n\ndelete $myBuffer[0];\n")
	da_TransformMirrorNegZ;

runTimeCommand
	-ann "Reset Tweak Point for selected CVs"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl`;\n\nfor ($i=0; $i<size($mySel); $i++) {\n    setAttr ($mySel[$i] + \".pntx\") 0;\n    setAttr ($mySel[$i] + \".pnty\") 0;\n    setAttr ($mySel[$i] + \".pntz\") 0;\n}")
	da_ResetSelTweakPoint;

runTimeCommand
	-ann "Disable Smooth Preview"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myAllowObject[] = `filterExpand -sm 12 -sm 31 -sm 32 -sm 34 -sm 35`;\nstring $myNotAllowObject[] = `filterExpand -sm 9 -sm 10 -sm 11 -sm 28 -sm 30 -sm 36 -sm 37 -sm 38 -sm 39 -sm 73`;\n\nif (size($myAllowObject) > 0 && size($myNotAllowObject) == 0){\n    string $mySelShape[] = `ls -sl -o`;\n    int $myPolyCounts[] =  `polyEvaluate -f`;\n    for ($i=0; $i<size($mySelShape); $i++) {\n        setDisplaySmoothness 1;\n        setAttr ($mySelShape[$i] + \".useGlobalSmoothDrawType\") 1;\n        setAttr ($mySelShape[$i] + \".smoothDrawType\") 2;\n        setAttr ($mySelShape[$i] + \".showDisplacements\") 0;\n        \n        if ($myPolyCounts[$i] <= 6144) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 2;\n        } else if ($myPolyCounts[$i] <= 24576) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 1;\n        } else {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 0;\n        }\n        inViewMessage -pos topCenter -msg \"Smooth Off\" -fade;\n    }\n}else{\n    setDisplaySmoothness 1;\n\tinViewMessage -pos topCenter -msg \"Smooth Off\" -fade;\n}")
	da_SmoothPreviewOff;

runTimeCommand
	-ann "Toggle High Quality Displacement"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySelShape[] = `ls -sl -o`;\nint $myDispSetting = `getAttr ($mySelShape[0] + \".showDisplacements\")`;\nint $mySubdivMode = `getAttr ($mySelShape[0] + \".smoothDrawType\")`;\nint $myPolyCounts[] =  `polyEvaluate -f`;\n\nfor ($i=0; $i<size($mySelShape); $i++) {\n    if ($myDispSetting){\n        setDisplaySmoothness 2;\n        setAttr ($mySelShape[$i] + \".useGlobalSmoothDrawType\") 0;\n        setAttr ($mySelShape[$i] + \".smoothDrawType\") 3;\n    \tsetAttr ($mySelShape[$i] + \".showDisplacements\") 0;\n    \n        if ($myPolyCounts[$i] <= 24) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 6;\n        } else if ($myPolyCounts[$i] <= 96) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 5;\n        } else if ($myPolyCounts[$i] <= 384) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 4;\n        } else if ($myPolyCounts[$i] <= 1536) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 3;\n        } else if ($myPolyCounts[$i] <= 6144) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 2;\n        } else if ($myPolyCounts[$i] <= 24576) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 1;\n        } else {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 0;\n        }\n    \tinViewMessage -pos topCenter -msg \"High Quality Smooth On\" -fade;\n    }else{\n        setDisplaySmoothness 3;\n        setAttr ($mySelShape[$i] + \".useGlobalSmoothDrawType\") 0;\n        setAttr ($mySelShape[$i] + \".showDisplacements\") 1;\n        setAttr ($mySelShape[$i] + \".smoothDrawType\") 3;\n    \n        if ($myPolyCounts[$i] <= 24) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 6;\n        } else if ($myPolyCounts[$i] <= 96) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 5;\n        } else if ($myPolyCounts[$i] <= 384) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 4;\n        } else if ($myPolyCounts[$i] <= 1536) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 3;\n        } else if ($myPolyCounts[$i] <= 6144) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 2;\n        } else if ($myPolyCounts[$i] <= 24576) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 1;\n        } else {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 0;\n        }\n    \tinViewMessage -pos topCenter -msg \"High Quality Smooth Displacement On\" -fade;\n    }\n}")
	da_HighQualityDispMeshToggle;

runTimeCommand
	-ann "Toggle Smooth Preview"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySelShape[] = `ls -sl -o`;\nint $myDispSetting = `getAttr ($mySelShape[0] + \".showDisplacements\")`;\nint $mySubdivMode = `getAttr ($mySelShape[0] + \".smoothDrawType\")`;\nint $myPolyCounts[] =  `polyEvaluate -f`;\nint $myDisplaySmoothness[] = `displaySmoothness -q -po`;\n\nfor ($i=0; $i<size($mySelShape); $i++) {\n    if ($myDispSetting || $myDisplaySmoothness[0] == 1 || $mySubdivMode != 3){\n        setDisplaySmoothness 2;\n        setAttr ($mySelShape[$i] + \".useGlobalSmoothDrawType\") 0;\n        setAttr ($mySelShape[$i] + \".smoothDrawType\") 3;\n    \tsetAttr ($mySelShape[$i] + \".showDisplacements\") 0;\n    \n        if ($myPolyCounts[$i] <= 24) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 6;\n        } else if ($myPolyCounts[$i] <= 96) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 5;\n        } else if ($myPolyCounts[$i] <= 384) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 4;\n        } else if ($myPolyCounts[$i] <= 1536) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 3;\n        } else if ($myPolyCounts[$i] <= 6144) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 2;\n        } else if ($myPolyCounts[$i] <= 24576) {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 1;\n        } else {\n        \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 0;\n        }\n    \tinViewMessage -pos topCenter -msg \"High Quality Smooth On\" -fade;\n    }else{\n\t\tda_SmoothPreviewOff;\n    }\n}")
	da_HighQualitySmoothMeshToggle;

runTimeCommand
	-ann "Progessive High Quality Smooth Mesh"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myAllowObject[] = `filterExpand -sm 12 -sm 31 -sm 32 -sm 34 -sm 35`;\nstring $myNotAllowObject[] = `filterExpand -sm 9 -sm 10 -sm 11 -sm 28 -sm 30 -sm 36 -sm 37 -sm 38 -sm 39 -sm 73`;\n\nif (size($myAllowObject) > 0 && size($myNotAllowObject) == 0){\n    string $mySelShape[] = `ls -sl -o`;\n    int $myDispSetting = `getAttr ($mySelShape[0] + \".showDisplacements\")`;\n    int $mySubdivMode = `getAttr ($mySelShape[0] + \".smoothDrawType\")`;\n    int $myPolyCounts[] =  `polyEvaluate -f`;\n    int $myDisplaySmoothness[] = `displaySmoothness -q -po`;\n    \n    for ($i=0; $i<size($mySelShape); $i++) {\n        if ($myDispSetting || $myDisplaySmoothness[0] == 1 || $mySubdivMode != 3){\n            setDisplaySmoothness 2;\n            setAttr ($mySelShape[$i] + \".useGlobalSmoothDrawType\") 0;\n            setAttr ($mySelShape[$i] + \".smoothDrawType\") 3;\n        \tsetAttr ($mySelShape[$i] + \".showDisplacements\") 0;\n        \n            if ($myPolyCounts[$i] <= 24) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 6;\n            } else if ($myPolyCounts[$i] <= 96) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 5;\n            } else if ($myPolyCounts[$i] <= 384) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 4;\n            } else if ($myPolyCounts[$i] <= 1536) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 3;\n            } else if ($myPolyCounts[$i] <= 6144) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 2;\n            } else if ($myPolyCounts[$i] <= 24576) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 1;\n            } else {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 0;\n            }\n        \tinViewMessage -pos topCenter -msg \"High Quality Smooth On\" -fade;\n        }else{\n            setAttr ($mySelShape[$i] + \".useGlobalSmoothDrawType\") 1;\n            setAttr ($mySelShape[$i] + \".smoothDrawType\") 2;\n        \tsetAttr ($mySelShape[$i] + \".showDisplacements\") 0;\n        \n        \tif ($myPolyCounts[$i] <= 6144) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 2;\n            } else if ($myPolyCounts[$i] <= 24576) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 1;\n            } else {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 0;\n            }\n        \tinViewMessage -pos topCenter -msg \"High Quality Smooth Off\" -fade;\n        }\n    }\n}else{\n    setDisplaySmoothness 2;\n\tinViewMessage -pos topCenter -msg \"Intermediate Quality Smooth On\" -fade;\n}")
	da_HighQualitySmoothMesh;

runTimeCommand
	-ann "Progessive High Quality Smooth Mesh"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myAllowObject[] = `filterExpand -sm 12 -sm 31 -sm 32 -sm 34 -sm 35`;\nstring $myNotAllowObject[] = `filterExpand -sm 9 -sm 10 -sm 11 -sm 28 -sm 30 -sm 36 -sm 37 -sm 38 -sm 39 -sm 73`;\n\nif (size($myAllowObject) > 0 && size($myNotAllowObject) == 0){\n    string $mySelShape[] = `ls -sl -o`;\n    int $myDispSetting = `getAttr ($mySelShape[0] + \".showDisplacements\")`;\n    int $mySubdivMode = `getAttr ($mySelShape[0] + \".smoothDrawType\")`;\n    int $myPolyCounts[] =  `polyEvaluate -f`;\n    \n    for ($i=0; $i<size($mySelShape); $i++) {\n        if ($myDispSetting && $mySubdivMode == 3){\n            setAttr ($mySelShape[$i] + \".useGlobalSmoothDrawType\") 1;\n            setAttr ($mySelShape[$i] + \".showDisplacements\") 0;\n            setAttr ($mySelShape[$i] + \".smoothDrawType\") 2;\n        \n        \tif ($myPolyCounts[$i] <= 6144) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 2;\n            } else if ($myPolyCounts[$i] <= 24576) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 1;\n            } else {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 0;\n            }\n        \tinViewMessage -pos topCenter -msg \"High Quality Displacement Off\" -fade;\n        }else{\n            setDisplaySmoothness 3;\n            setAttr ($mySelShape[$i] + \".useGlobalSmoothDrawType\") 0;\n            setAttr ($mySelShape[$i] + \".showDisplacements\") 1;\n            setAttr ($mySelShape[$i] + \".smoothDrawType\") 3;\n        \n            if ($myPolyCounts[$i] <= 24) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 6;\n            } else if ($myPolyCounts[$i] <= 96) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 5;\n            } else if ($myPolyCounts[$i] <= 384) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 4;\n            } else if ($myPolyCounts[$i] <= 1536) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 3;\n            } else if ($myPolyCounts[$i] <= 6144) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 2;\n            } else if ($myPolyCounts[$i] <= 24576) {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 1;\n            } else {\n            \tsetAttr ($mySelShape[$i] + \".smoothLevel\") 0;\n            }\n        \tinViewMessage -pos topCenter -msg \"High Quality Displacement On\" -fade;\n        }\n    }\n}else{\n    setDisplaySmoothness 3;\n\tinViewMessage -pos topCenter -msg \"High Quality Smooth On\" -fade;\n}")
	da_HighQualityDispMesh;

runTimeCommand
	-ann "Pivot to Curve(s) Origin"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("for($node in `ls -sl`){\n\tfloat $p[] = `getAttr ($node + \".cv[0]\")`;\n\txform -piv $p[0] $p[1] $p[2] $node;\n}")
	da_PivotToCurvesOrigin;

runTimeCommand
	-ann "Snap Curve to Mesh"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $myPoly[] = `filterExpand -sm 12`;\nstring $myCurve[] = `filterExpand -sm 9`;\n\nfor ($i=0; $i < size($myCurve); $i++){ \n    select $myPoly[0];\n    select -add $myCurve[$i];\n    geometryConstraint -weight 1;\n    select $myCurve[$i];\n    select `listConnections -s 0 -d 1 -t \"geometryConstraint\"`;\n    delete;\n}\n")
	da_SnapCurveToMesh;

runTimeCommand
	-ann "Snap Curve to NURBS"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $myNURBS[] = `filterExpand -sm 10`;\nstring $myCurve[] = `filterExpand -sm 9`;\n\nfor ($i=0; $i < size($myCurve); $i++){ \n    select $myNURBS[0];\n    select -add $myCurve[$i];\n    geometryConstraint -weight 1;\n    select $myCurve[$i];\n    select `listConnections -s 0 -d 1 -t \"geometryConstraint\"`;\n    delete;\n}\n")
	da_SnapCurveToNurbs;

runTimeCommand
	-ann "Add Image Plane"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $myPanel = `getPanel -underPointer`;\nstring $myCamera = `modelPanel -q -cam $myPanel`;\nselect $myCamera;\nstring $myCameraShape[] = `listRelatives -f -s`;\n\nimportImagePlane { $myCameraShape[0] };")
	da_ImagesPlane;

runTimeCommand
	-ann "Add Video Plane"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $myPanel = `getPanel -underPointer`;\nstring $myCamera = `modelPanel -q -cam $myPanel`;\nselect $myCamera;\nstring $myCameraShape[] = `listRelatives -f -s`;\n\nimportMovieImagePlane { $myCameraShape[0] };")
	da_VideoImagesPlane;

runTimeCommand
	-ann "Toggle Local Tumble"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if (`tumbleCtx -q -asp tumbleContext`)\n    tumbleCtx -e -lt 1 -asp 0 tumbleContext;\nelse\n    tumbleCtx -e -lt 0 -asp 1 tumbleContext;")
	da_ToggleLocalTumble;

runTimeCommand
	-ann "Parent a Shape to a Joint(s)"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myJnt[] = `ls -sl -typ \"joint\"`;\nstring $myShape[] = `listRelatives -f -s`;\n\nfor ($i=0; $i < size($myJnt); $i++ ){ \n    parent -add -s $myShape[0] $myJnt[$i];\n}")
	da_shapeParentJoints;

runTimeCommand
	-ann "Enable Arnold Render Viewport"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $currentPanel = `getPanel -wf`;\n\nif(`modelEditor -q -rom $currentPanel` == \"arnoldViewOverride\"){\n    ActivateViewport20;\n}else{\n    setRendererAndOverrideInModelPanel $gViewport2 arnoldViewOverride $currentPanel;\n    arnoldViewOverrideOptionBox;\n}")
	da_ArnoldRenderViewport;

runTimeCommand
	-ann "Enable Air Push to nRigids"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\n\tsetAttr ($each +\".airPushDistance\") 100;\n\tsetAttr ($each +\".airPushVorticity\") 1;\n}")
	da_nRigidsAirPush;

runTimeCommand
	-ann "Disable Air Push to nRigids"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\n\tsetAttr ($each +\".airPushDistance\") 0;\n\tsetAttr ($each +\".airPushVorticity\") 0;\n}")
	da_nRigidsNoAirPush;

runTimeCommand
	-ann "Enable Wind Shadow to nRigids"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\n\tsetAttr ($each +\".windShadowDistance\") 100;\n}")
	da_nRigidsWindShadow;

runTimeCommand
	-ann "Disable Wind Shadow to nRigids"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\n\tsetAttr ($each +\".windShadowDistance\") 0;\n}")
	da_nRigidsNoWindShadow;

runTimeCommand
	-ann "Enable Primitive as Tool"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("if(`optionVar -q createPolyPrimitiveAsTool`)\ntoggleCreatePolyPrimitiveAsTool;\nif(`optionVar -q createNurbsPrimitiveAsTool`)\ntoggleCreateNurbsPrimitiveAsTool;\n\ntoggleCreatePolyPrimitiveAsTool;\ntoggleCreateNurbsPrimitiveAsTool;")
	da_PrimitiveAsTool;

runTimeCommand
	-ann "Enable Primitive as Tool"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("if(`optionVar -q createPolyPrimitiveAsTool`)\ntoggleCreatePolyPrimitiveAsTool;\nif(`optionVar -q createNurbsPrimitiveAsTool`)\ntoggleCreateNurbsPrimitiveAsTool;")
	da_NoPrimitiveAsTool;

runTimeCommand
	-ann "Toggle Primitive as Tool"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`optionVar -q createPolyPrimitiveAsTool` && `optionVar -q createNurbsPrimitiveAsTool`){\n    da_NoPrimitiveAsTool;\n}else{\n    da_PrimitiveAsTool;\n}\n")
	da_TogglePrimitiveAsTool;

runTimeCommand
	-ann "Auto Point Constraint For Controller"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl -o`;\nfor ($i=1; $i<size($mySel); $i++){\n    select $mySel[0] $mySel[$i];\n    doCreatePointConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\n}\nselect $mySel[0];\nda_FreezeDelNonDef;\nTagAsController;")
	da_CtrlPointConstraint;

runTimeCommand
	-ann "Auto Orient Constraint For Controller"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl -o`;\nif ( `size($mySel)` == 2 ){\n    MatchPivots;\n}\nfor ($i=1; $i<size($mySel); $i++){\n    select $mySel[0] $mySel[$i];\n    doCreateOrientConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\n}\nselect $mySel[0];\nda_FreezeDelNonDef;\nTagAsController;")
	da_CtrlOrientConstraint;

runTimeCommand
	-ann "Auto Parent Constraint For Controller"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl -o`;\nif ( `size($mySel)` == 2 ){\n    MatchPivots;\n}\nfor ($i=1; $i<size($mySel); $i++){\n    select $mySel[0] $mySel[$i];\n    doCreateParentConstraintArgList 1 { \"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };\n}\nselect $mySel[0];\nda_FreezeDelNonDef;\nTagAsController;")
	da_CtrlParentConstraint;

runTimeCommand
	-ann "Auto Aim Constraint For Controller"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl -o`;\nfor ($i=1; $i<size($mySel); $i++){\n    select $mySel[0] $mySel[$i];\n    doCreateAimConstraintArgList 1 { \"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"0\",\"0\",\"1\",\"0\",\"1\",\"vector\",\"\",\"0\",\"0\",\"0\",\"\",\"1\" };\n}\nselect $mySel[0];\nda_FreezeDelNonDef;\nTagAsController;")
	da_CtrlAimConstraint;

runTimeCommand
	-ann "Auto Pole Vector Constraint For Controller"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl -o`;\nfor ($i=1; $i<size($mySel); $i++){\n    select $mySel[0] $mySel[$i];\n    poleVectorConstraint -weight 1;\n}\nselect $mySel[0];\nda_FreezeDelNonDef;\nTagAsController;")
	da_CtrlPoleVectorConstraint;

runTimeCommand
	-ann "Enter in CVs mode for NURBS"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl`;\nfor ($allMySel in $mySel)\n\tdoMenuNURBComponentSelection($allMySel, \"controlVertex\");")
	da_GoToCVsNURBS;

runTimeCommand
	-ann "Convert Curve to Poly Tubes"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("//Main Procedure\nstring $renderCurve[] = `ls -sl`;\nResetTemplateBrush;\nselect $renderCurve;\nAttachBrushToCurves;\nstring $renderCurveRelatives[] = `listRelatives $renderCurve`;\nstring $renderStroke[] = `listConnections -t stroke -sh 1 -d 1 -s 0 $renderCurveRelatives`;\nselect $renderStroke;\ndoPaintEffectsToPoly( 1,0,1,1,100000);\nhyperShade -assign initialShadingGroup;\n\n//CTRL Procedure\nstring $renderBrush[] = `listConnections -t brush $renderStroke`;\nstring $locatorCTRL[] = `CreateLocator`;\nrename $locatorCTRL polyCurveCTRL1;\nstring $showCTLR[] = `ls -sl`;\naddAttr -ln \"Radius\"  -at double  -min 0.001 -dv 0.5 $showCTLR;\naddAttr -ln \"Clipping\"  -at double  -min 0 -max 1 -dv 1 $showCTLR;\naddAttr -ln \"Section\"  -at long  -min 3 -max 12 -dv 4 $showCTLR;\naddAttr -ln \"Density\"  -at double -min 0.001 -max 20 -dv 1 $showCTLR;\naddAttr -ln \"PolyLimit\"  -at long  -min 1000 -max 1000000 -dv 100000 $showCTLR;\naddAttr -ln \"HardEdges\"  -at bool;\nsetAttr -e-keyable true ($showCTLR[0] + \".Radius\");\nsetAttr -e-keyable true ($showCTLR[0] + \".Clipping\");\nsetAttr -e-keyable true ($showCTLR[0] + \".Section\");\nsetAttr -e-keyable true ($showCTLR[0] + \".Density\");\nsetAttr -e-keyable true ($showCTLR[0] + \".PolyLimit\");\nsetAttr -e-keyable true ($showCTLR[0] + \".HardEdges\");\nint $numObj = size($renderBrush);\nfor($i=0; $i<$numObj; $i++) connectAttr($locatorCTRL[0] + \".Radius\", $renderBrush[$i] + \".brushWidth\");\nfor($i=0; $i<$numObj; $i++) connectAttr($locatorCTRL[0] + \".Section\", $renderBrush[$i] + \".tubeSections\");\nint $numObj2 = size($renderStroke);\nfor($i=0; $i<$numObj2; $i++) connectAttr($locatorCTRL[0] + \".Clipping\", $renderStroke[$i] + \".maxClip\");\nfor($i=0; $i<$numObj2; $i++) connectAttr($locatorCTRL[0] + \".Density\", $renderStroke[$i] + \".sampleDensity\");\nfor($i=0; $i<$numObj2; $i++) connectAttr($locatorCTRL[0] + \".PolyLimit\", $renderStroke[$i] + \".meshPolyLimit\");\nfor($i=0; $i<$numObj2; $i++) connectAttr($locatorCTRL[0] + \".HardEdges\", $renderStroke[$i] + \".meshHardEdges\");\n\n//Rig Procedure\nstring $renderMesh[] = `listConnections -t mesh $renderStroke`;\nselect $renderMesh;\npickWalk -d up;\nstring $groupMesh[] = `ls -sl`;\nparent $groupMesh $showCTLR;\nparent $renderStroke $showCTLR;\nselect $showCTLR;\n\n//Clean Rig\nsetAttr -e-keyable false -l true ($showCTLR[0] + \".tx\");\nsetAttr -e-keyable false -l true ($showCTLR[0] + \".ty\");\nsetAttr -e-keyable false -l true ($showCTLR[0] + \".tz\");\nsetAttr -e-keyable false -l true ($showCTLR[0] + \".rx\");\nsetAttr -e-keyable false -l true ($showCTLR[0] + \".ry\");\nsetAttr -e-keyable false -l true ($showCTLR[0] + \".rz\");\nsetAttr -e-keyable false -l true ($showCTLR[0] + \".sx\");\nsetAttr -e-keyable false -l true ($showCTLR[0] + \".sy\");\nsetAttr -e-keyable false -l true ($showCTLR[0] + \".sz\");")
	da_curveToPoly;

runTimeCommand
	-ann "Part of Interactive Booleans"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myBoolOperators[] = `ls -sl`;\nstring $myBool[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myBool;\nfor ($i=0; $i<size($myBool); $i++) {\n\tsetAttr ($myBool[1] + \".intermediateObject\") 0;\n\tsetAttr ($myBool[1] + \".primaryVisibility\") 0;\n\tsetAttr ($myBool[1] + \".overrideEnabled\") 1;\n\tsetAttr ($myBool[1] + \".overrideShading\") 0;\n\tsetAttr ($myBool[1] + \".visibility\") 1;\n\tsetAttr ($myBool[1] + \".castsShadows\") 0;\n\tsetAttr ($myBool[1] + \".receiveShadows\") 0;\n\tsetAttr ($myBool[1] + \".motionBlur\") 0;\n\tsetAttr ($myBool[1] + \".smoothShading\") 0;\n\tsetAttr ($myBool[1] + \".visibleInReflections\") 0;\n\tsetAttr ($myBool[1] + \".visibleInRefractions\") 0;\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInDiffuseReflection\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInSpecularReflection\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInDiffuseTransmission\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInSpecularTransmission\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInVolume\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiSelfShadows\") 0`);\n}\n\nshowHidden -a;\nselect $myBoolOperators;")
	da_wireframeTemplateA;

runTimeCommand
	-ann "Part of Interactive Booleans"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myBoolOperators[] = `ls -sl`;\nstring $myBool[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myBool;\nfor ($i=0; $i<size($myBool); $i++) {\n\tsetAttr ($myBool[0] + \".intermediateObject\") 0;\n\tsetAttr ($myBool[0] + \".primaryVisibility\") 0;\n\tsetAttr ($myBool[0] + \".overrideEnabled\") 1;\n\tsetAttr ($myBool[0] + \".overrideShading\") 0;\n\tsetAttr ($myBool[0] + \".visibility\") 1;\n\tsetAttr ($myBool[0] + \".castsShadows\") 0;\n\tsetAttr ($myBool[0] + \".receiveShadows\") 0;\n\tsetAttr ($myBool[0] + \".motionBlur\") 0;\n\tsetAttr ($myBool[0] + \".smoothShading\") 0;\n\tsetAttr ($myBool[0] + \".visibleInReflections\") 0;\n\tsetAttr ($myBool[0] + \".visibleInRefractions\") 0;\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInDiffuseReflection\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInSpecularReflection\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInDiffuseTransmission\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInSpecularTransmission\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInVolume\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiSelfShadows\") 0`);\n}\n\nshowHidden -a;\nselect $myBoolOperators;")
	da_wireframeTemplateB;

runTimeCommand
	-ann "Interactive Bollean Union"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myBoolOp[] = `polyCBoolOp -op 1 -ch 1 -pcr 0 -cls 1`;\npolyMergeVertex  -d 0.001 -am 1 -ch 1 polySurface1;\nselect $myBoolOp[1];\n\nstring $myBoolOperators[] = `ls -sl`;\nstring $myBool[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myBool;\nfor ($i=0; $i<size($myBool); $i++) {\n\tsetAttr ($myBool[$i] + \".intermediateObject\") 0;\n\tsetAttr ($myBool[$i] + \".primaryVisibility\") 0;\n\tsetAttr ($myBool[$i] + \".overrideEnabled\") 1;\n\tsetAttr ($myBool[$i] + \".overrideShading\") 0;\n\tsetAttr ($myBool[$i] + \".visibility\") 1;\n\tsetAttr ($myBool[$i] + \".castsShadows\") 0;\n\tsetAttr ($myBool[$i] + \".receiveShadows\") 0;\n\tsetAttr ($myBool[$i] + \".motionBlur\") 0;\n\tsetAttr ($myBool[$i] + \".smoothShading\") 0;\n\tsetAttr ($myBool[$i] + \".visibleInReflections\") 0;\n\tsetAttr ($myBool[$i] + \".visibleInRefractions\") 0;\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInDiffuseReflection\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInSpecularReflection\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInDiffuseTransmission\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInSpecularTransmission\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInVolume\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiSelfShadows\") 0`);\n}\n\nshowHidden -a;\nselect $myBoolOperators;\n\nstring $myBoolShape[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myBoolShape;\n\nPickWalkUp;\nPickWalkUp;\nstring $myBoolTransform[] = `ls -sl`;\nselect $myBool;\nUnparent;\ndelete $myBoolTransform;\ngroup;\nrename boolensSource1;\nselect $myBoolOperators;\n\nShowManipulators;")
	da_interactiveUnion;

runTimeCommand
	-ann "Interactive Bollean Difference"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myBoolOp[] = `polyCBoolOp -op 2 -ch 1 -pcr 0 -cls 1`;\npolyMergeVertex  -d 0.001 -am 1 -ch 1 polySurface1;\nselect $myBoolOp[1];\n\nstring $myBoolOperators[] = `ls -sl`;\nstring $myBool[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myBool;\nfor ($i=0; $i<size($myBool); $i++) {\n\tsetAttr ($myBool[$i] + \".intermediateObject\") 0;\n\tsetAttr ($myBool[$i] + \".primaryVisibility\") 0;\n\tsetAttr ($myBool[$i] + \".overrideEnabled\") 1;\n\tsetAttr ($myBool[$i] + \".overrideShading\") 0;\n\tsetAttr ($myBool[$i] + \".visibility\") 1;\n\tsetAttr ($myBool[$i] + \".castsShadows\") 0;\n\tsetAttr ($myBool[$i] + \".receiveShadows\") 0;\n\tsetAttr ($myBool[$i] + \".motionBlur\") 0;\n\tsetAttr ($myBool[$i] + \".smoothShading\") 0;\n\tsetAttr ($myBool[$i] + \".visibleInReflections\") 0;\n\tsetAttr ($myBool[$i] + \".visibleInRefractions\") 0;\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInDiffuseReflection\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInSpecularReflection\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInDiffuseTransmission\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInSpecularTransmission\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInVolume\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiSelfShadows\") 0`);\n}\n\nshowHidden -a;\nselect $myBoolOperators;\n\nstring $myBoolShape[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myBoolShape;\n\nPickWalkUp;\nPickWalkUp;\nstring $myBoolTransform[] = `ls -sl`;\nselect $myBool;\nUnparent;\ndelete $myBoolTransform;\ngroup;\nrename boolensSource1;\nselect $myBoolOperators;\n\nShowManipulators;")
	da_interactiveDifference;

runTimeCommand
	-ann "Interactive Bollean Intersection"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myBoolOp[] = `polyCBoolOp -op 3 -ch 1 -pcr 0 -cls 1`;\npolyMergeVertex  -d 0.001 -am 1 -ch 1 polySurface1;\nselect $myBoolOp[1];\n\nstring $myBoolOperators[] = `ls -sl`;\nstring $myBool[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myBool;\nfor ($i=0; $i<size($myBool); $i++) {\n\tsetAttr ($myBool[$i] + \".intermediateObject\") 0;\n\tsetAttr ($myBool[$i] + \".primaryVisibility\") 0;\n\tsetAttr ($myBool[$i] + \".overrideEnabled\") 1;\n\tsetAttr ($myBool[$i] + \".overrideShading\") 0;\n\tsetAttr ($myBool[$i] + \".visibility\") 1;\n\tsetAttr ($myBool[$i] + \".castsShadows\") 0;\n\tsetAttr ($myBool[$i] + \".receiveShadows\") 0;\n\tsetAttr ($myBool[$i] + \".motionBlur\") 0;\n\tsetAttr ($myBool[$i] + \".smoothShading\") 0;\n\tsetAttr ($myBool[$i] + \".visibleInReflections\") 0;\n\tsetAttr ($myBool[$i] + \".visibleInRefractions\") 0;\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInDiffuseReflection\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInSpecularReflection\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInDiffuseTransmission\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInSpecularTransmission\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiVisibleInVolume\") 0`);\n\tcatchQuiet (`setAttr ($myBool[0] + \".aiSelfShadows\") 0`);\n}\n\nshowHidden -a;\nselect $myBoolOperators;\n\nstring $myBoolShape[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myBoolShape;\n\nPickWalkUp;\nPickWalkUp;\nstring $myBoolTransform[] = `ls -sl`;\nselect $myBool;\nUnparent;\ndelete $myBoolTransform;\ngroup;\nrename boolensSource1;\nselect $myBoolOperators;\n\nShowManipulators;")
	da_interactiveIntersection;

runTimeCommand
	-ann "Toggle Perps to Ortho"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $curPanel;\nstring $curCam;\nint $orthoValue;\nfloat $camRot[];\nfloat $camRotTemp;\nint $intOfTemp;\nfloat $rotOver;\nfloat $camRotFixed[2];\n\n$curPanel = `getPanel -wf`;\n$curCam = `modelPanel -q -cam $curPanel`;\n$orthoValue = `camera -q -o $curCam`;\n\nif ($orthoValue == 1){\n\tsetAttr ($curCam +\".orthographic\") 0;\n\tda_PasteCameraPosition;\n\tviewFit -f 0.5;\n\n\tinViewMessage -pos topCenter -msg \"Perspective View\" -fade;\n\t\n} else {\n\n\tda_CopyCameraPosition;\n\n\t$camRot = `camera -q -rot $curCam`;\n\n\tfor ($i=0; $i < 2; $i++){\n\t\n\t\t$camRotTemp = $camRot[$i] / 360;\n\t\t$intOfTemp = (int)$camRotTemp;\n\t\t$rotOver = 360 * $intOfTemp;\n\t\t$camRotFixed[$i] = $camRot[$i] - $rotOver;\n\t}\n\n\tfor ($i=0; $i < 2; $i++){\n\t\tif ($camRotFixed[$i] < 0)\n\t\t\t$camRotFixed[$i] += 360;\n\t}\n\n\tif ($camRotFixed[0] >= 45 && $camRotFixed[0] < 135){\n\t\tviewSet -bo;\n\t\tviewFit -f 0.5;\n\t\tinViewMessage -pos topCenter -msg \"Bottom position - Orthographic View\" -fade;\n\t}\n\n\telse if ($camRotFixed[0] >= 225 && $camRotFixed[0] < 315){\n\t\tviewSet -t;\n\t\tviewFit -f 0.5;\n\t\tinViewMessage -pos topCenter -msg \"Top position - Orthographic View\" -fade;\n\t}\n\n\telse if ($camRotFixed[1] < 45){\n\t\tviewSet -f;\n\t\tviewFit -f 0.5;\n\t\tinViewMessage -pos topCenter -msg \"Front position - Orthographic View\" -fade;\n\t}\n\n\telse if ($camRotFixed[1] >= 315 ){\n\t\tviewSet -f;\n\t\tviewFit -f 0.5;\n\t\tinViewMessage -pos topCenter -msg \"Front position - Orthographic View\" -fade;\n\t}\n\n\telse if ($camRotFixed[1] >= 45 && $camRotFixed[1] < 135)\n\t{\n\t\tviewSet -rs;\n\t\tviewFit -f 0.5;\n\t\tinViewMessage -pos topCenter -msg \"Right position - Orthographic View\" -fade;\n\t}\n\n\telse if ($camRotFixed[1] >= 135 && $camRotFixed[1] < 225)\n\t{\n\t\tviewSet -b;\n\t\tviewFit -f 0.5;\n\t\tinViewMessage -pos topCenter -msg \"Back position - Orthographic View\" -fade;\n\t}\n\n\telse if ($camRotFixed[1] >= 225 && $camRotFixed[1] < 315)\n\t{\n\t\tviewSet -ls;\n\t\tviewFit -f 0.5;\n\t\tinViewMessage -pos topCenter -msg \"Left position - Orthographic View\" -fade;\n\t}\n}")
	da_perspToggle;

runTimeCommand
	-ann "Shell Modifier"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myTransform[] = `ls -sl -typ \"transform\"`;\nstring $myShape[] = `listRelatives -f -s`;\ncatchQuiet (`duplicate`);\nstring $myShell[] = `listRelatives -f -s`;\nconnectAttr -f ($myShape[0] + \".outMesh\") ($myShell[0] + \".inMesh\");\n\nstring $myShellTransform[] = `listRelatives -p $myShell`;\nselect $myShellTransform;\nda_ResetTweakPoint;\n\npolyNormal -normalMode 0 -userNormalMode 0 -ch 1 $myShell;\npolyExtrudeFacet -tk 1;\nselect $myShell;\nstring $myPolyExtrudeFace[] = `listConnections -s 1 -d 0 -t \"polyExtrudeFace\"`;\npolyBevel3 -f 0.1 -oaf 1 -af 1 -d 1 -m 0 -mia 0 -c 1 -sg 1 -ws 1 -sa 30 -sn 1 -mv 1 -mvt 0.0001 -ma 180 -at 180 -ch 1;\nstring $myPolyBevel[] = `listConnections -s 1 -d 0 -t \"polyBevel3\"`;\n\nsetAttr ($myShell[0] +\".overrideEnabled\") 1;\nsetAttr ($myShell[0] +\".overrideDisplayType\") 2;\n\nsetAttr ($myShape[0] + \".primaryVisibility\") 0;\nsetAttr ($myShape[0] + \".overrideEnabled\") 1;\nsetAttr ($myShape[0] + \".overrideShading\") 0;\nsetAttr ($myShape[0] + \".visibility\") 1;\nsetAttr ($myShape[0] + \".castsShadows\") 0;\nsetAttr ($myShape[0] + \".receiveShadows\") 0;\nsetAttr ($myShape[0] + \".motionBlur\") 0;\nsetAttr ($myShape[0] + \".smoothShading\") 0;\nsetAttr ($myShape[0] + \".visibleInReflections\") 0;\nsetAttr ($myShape[0] + \".visibleInRefractions\") 0;\n\naddAttr -ln \"Thickness\"  -at double  -min 0.001 -dv 1 $myTransform;\naddAttr -ln \"Bevel\"  -at \"enum\" -en \"On:Off:\" $myTransform;\naddAttr -ln \"Chamfer\"  -at bool $myTransform;\naddAttr -ln \"Offset\"  -at double  -min 0.001 -dv 0.1 $myTransform;\naddAttr -ln \"Segments\"  -at long  -min 1 -dv 1 $myTransform;\nsetAttr -e-keyable true ($myTransform[0] + \".Thickness\");\nsetAttr -e-keyable true ($myTransform[0] + \".Bevel\");\nsetAttr -e-keyable true ($myTransform[0] + \".Chamfer\") 1;\nsetAttr -e-keyable true ($myTransform[0] + \".Offset\");\nsetAttr -e-keyable true ($myTransform[0] + \".Segments\");\n\nconnectAttr -f ($myTransform[0] + \".Thickness\") ($myPolyExtrudeFace[0] + \".thickness\");\nconnectAttr -f ($myTransform[0] + \".Offset\") ($myPolyBevel[0] + \".offset\");\nconnectAttr -f ($myTransform[0] + \".Segments\") ($myPolyBevel[0] + \".segments\");\nconnectAttr -f ($myTransform[0] + \".Chamfer\") ($myPolyBevel[0] + \".chamfer\");\nconnectAttr -f ($myTransform[0] + \".Bevel\") ($myPolyBevel[0] + \".nodeState\");\n\nselect $myShell;\npickWalk -d up;\nrename da_shell1;\n\nselect $myTransform;\nrename da_shellBase1;")
	da_shell;

runTimeCommand
	-ann "Part of Shell Modifier"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("da_BackToObjectMode;\n\nstring $myTransform[] = `ls -sl -typ \"transform\"`;\nstring $myShape[] = `listRelatives -f -s`;\n\nsetAttr ($myShape[0] + \".primaryVisibility\") 1;\nsetAttr ($myShape[0] + \".overrideEnabled\") 0;\nsetAttr ($myShape[0] + \".overrideShading\") 1;\nsetAttr ($myShape[0] + \".visibility\") 1;\nsetAttr ($myShape[0] + \".castsShadows\") 1;\nsetAttr ($myShape[0] + \".receiveShadows\") 1;\nsetAttr ($myShape[0] + \".motionBlur\") 1;\nsetAttr ($myShape[0] + \".smoothShading\") 1;\nsetAttr ($myShape[0] + \".visibleInReflections\") 1;\nsetAttr ($myShape[0] + \".visibleInRefractions\") 1;\n\nstring $myPolyBevel[] = `listConnections -s 0 -d 1 -t \"polyBevel3\"`;\nselect $myPolyBevel[0];\nstring $myShell[] = `listConnections -sh 1 -s 0 -d 1`;\n\nsetAttr ($myShell[0] +\".overrideEnabled\") 1;\nsetAttr ($myShell[0] +\".overrideDisplayType\") 0;\n\ndeleteAttr ($myTransform[0] + \".Thickness\");\ndeleteAttr ($myTransform[0] + \".Bevel\");\ndeleteAttr ($myTransform[0] + \".Chamfer\");\ndeleteAttr ($myTransform[0] + \".Offset\");\ndeleteAttr ($myTransform[0] + \".Segments\");\n\nselect $myShape;\npickWalk -d up;\nrename da_exShellBase1;\n\nselect $myShell;\npickWalk -d up;\nrename da_extractShell1;\nda_ClearFreeze;")
	da_shellDetach;

runTimeCommand
	-ann "Part of Shell Modifier"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myTransform[] = `ls -sl -typ \"transform\"`;\nstring $myPolyBevel[] = `listConnections -s 0 -d 1 -t \"polyBevel3\"`;\nselect $myPolyBevel[0];\nstring $myShell[] = `listConnections -sh 1 -s 0 -d 1`;\n\nselect $myShell;\nHighQualityDisplay;\n\nselect $myTransform;")
	da_shellSubdiv;

runTimeCommand
	-ann "Part of Shell Modifier"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myTransform[] = `ls -sl -typ \"transform\"`;\nstring $myPolyBevel[] = `listConnections -s 0 -d 1 -t \"polyBevel3\"`;\nselect $myPolyBevel[0];\nstring $myShell[] = `listConnections -sh 1 -s 0 -d 1`;\n\nselect $myShell;\nLowQualityDisplay;\n\nselect $myTransform;")
	da_shellNoSubdiv;

runTimeCommand
	-ann "XGen Tools Management"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $CheckTool = `currentCtx`;\n\nif ($CheckTool == \"xgmDensityBrushTool\")\n\txgmDensityBrushContext -e -bst 0 `currentCtx`;\n\nelse if ($CheckTool == \"xgmPlaceBrushTool\")\n\txgmPlaceBrushContext -e -bst 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmLengthBrushTool\")\n\txgmLengthBrushContext -e -bst 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmCutBrushTool\")\n\txgmCutBrushContext -e -bst 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmWidthBrushTool\")\n\txgmWidthBrushContext -e -bst 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmDirectionBrushTool\")\n\txgmDirectionBrushContext -e -bst 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmCombBrushTool\")\n\txgmCombBrushContext -e -bst 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmGrabBrushTool\")\n\txgmGrabBrushContext -e -bst 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmSmoothBrushTool\")\n\txgmSmoothBrushContext -e -bst 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmNoiseBrushTool\")\n\txgmNoiseBrushContext -e -bst 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmClumpBrushTool\")\n\txgmClumpBrushContext -e -bst 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmPartBrushTool\")\n\txgmPartBrushContext -e -bst 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmFreezeBrushTool\")\n\txgmFreezeBrushContext -e -bst 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmSelectBrushTool\")\n\txgmSelectBrushContext -e -bst 0 `currentCtx`;\n\t\nelse\n\tprint \"Brush not supported\";")
	da_XGenBrushMangement_MirrorOff;

runTimeCommand
	-ann "XGen Tools Management"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $CheckTool = `currentCtx`;\n\nif ($CheckTool == \"xgmDensityBrushTool\")\n\txgmDensityBrushContext -e -bst 1 `currentCtx`;\n\nelse if ($CheckTool == \"xgmPlaceBrushTool\")\n\txgmPlaceBrushContext -e -bst 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmLengthBrushTool\")\n\txgmLengthBrushContext -e -bst 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmCutBrushTool\")\n\txgmCutBrushContext -e -bst 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmWidthBrushTool\")\n\txgmWidthBrushContext -e -bst 1 `currentCtx`;\n\nelse if ($CheckTool == \"xgmDirectionBrushTool\")\n\txgmDirectionBrushContext -e -bst 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmCombBrushTool\")\n\txgmCombBrushContext -e -bst 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmGrabBrushTool\")\n\txgmGrabBrushContext -e -bst 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmSmoothBrushTool\")\n\txgmSmoothBrushContext -e -bst 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmNoiseBrushTool\")\n\txgmNoiseBrushContext -e -bst 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmClumpBrushTool\")\n\txgmClumpBrushContext -e -bst 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmPartBrushTool\")\n\txgmPartBrushContext -e -bst 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmFreezeBrushTool\")\n\txgmFreezeBrushContext -e -bst 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmSelectBrushTool\")\n\txgmSelectBrushContext -e -bst 1 `currentCtx`;\n\t\nelse\n\tprint \"Brush not supported\";")
	da_XGenBrushMangement_MirrorX;

runTimeCommand
	-ann "XGen Tools Management"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $CheckTool = `currentCtx`;\n\nif ($CheckTool == \"xgmDensityBrushTool\")\n\txgmDensityBrushContext -e -bst 2 `currentCtx`;\n\nelse if ($CheckTool == \"xgmPlaceBrushTool\")\n\txgmPlaceBrushContext -e -bst 2 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmLengthBrushTool\")\n\txgmLengthBrushContext -e -bst 2 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmCutBrushTool\")\n\txgmCutBrushContext -e -bst 2 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmWidthBrushTool\")\n\txgmWidthBrushContext -e -bst 2 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmDirectionBrushTool\")\n\txgmDirectionBrushContext -e -bst 2 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmCombBrushTool\")\n\txgmCombBrushContext -e -bst 2 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmGrabBrushTool\")\n\txgmGrabBrushContext -e -bst 2 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmSmoothBrushTool\")\n\txgmSmoothBrushContext -e -bst 2 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmNoiseBrushTool\")\n\txgmNoiseBrushContext -e -bst 2 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmClumpBrushTool\")\n\txgmClumpBrushContext -e -bst 2 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmPartBrushTool\")\n\txgmPartBrushContext -e -bst 2 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmFreezeBrushTool\")\n\txgmFreezeBrushContext -e -bst 2 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmSelectBrushTool\")\n\txgmSelectBrushContext -e -bst 2 `currentCtx`;\n\t\nelse\n\tprint \"Brush not supported\";")
	da_XGenBrushMangement_MirrorY;

runTimeCommand
	-ann "XGen Tools Management"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $CheckTool = `currentCtx`;\n\nif ($CheckTool == \"xgmDensityBrushTool\")\n\txgmDensityBrushContext -e -bst 3 `currentCtx`;\n\nelse if ($CheckTool == \"xgmPlaceBrushTool\")\n\txgmPlaceBrushContext -e -bst 3 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmLengthBrushTool\")\n\txgmLengthBrushContext -e -bst 3 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmCutBrushTool\")\n\txgmCutBrushContext -e -bst 3 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmWidthBrushTool\")\n\txgmWidthBrushContext -e -bst 3 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmDirectionBrushTool\")\n\txgmDirectionBrushContext -e -bst 3 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmCombBrushTool\")\n\txgmCombBrushContext -e -bst 3 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmGrabBrushTool\")\n\txgmGrabBrushContext -e -bst 3 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmSmoothBrushTool\")\n\txgmSmoothBrushContext -e -bst 3 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmNoiseBrushTool\")\n\txgmNoiseBrushContext -e -bst 3 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmClumpBrushTool\")\n\txgmClumpBrushContext -e -bst 3 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmPartBrushTool\")\n\txgmPartBrushContext -e -bst 3 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmFreezeBrushTool\")\n\txgmFreezeBrushContext -e -bst 3 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmSelectBrushTool\")\n\txgmSelectBrushContext -e -bst 3 `currentCtx`;\n\t\nelse\n\tprint \"Brush not supported\";")
	da_XGenBrushMangement_MirrorZ;

runTimeCommand
	-ann "XGen Tools Management"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $CheckTool = `currentCtx`;\n\nif ($CheckTool == \"xgmDensityBrushTool\")\n\txgmDensityBrushContext -e -ec 1`currentCtx`;\n\nelse if ($CheckTool == \"xgmPlaceBrushTool\")\n\txgmPlaceBrushContext -e -ec 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmLengthBrushTool\")\n\txgmLengthBrushContext -e -ec 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmCutBrushTool\")\n\txgmCutBrushContext -e -ec 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmWidthBrushTool\")\n\txgmWidthBrushContext -e -ec 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmDirectionBrushTool\")\n\txgmDirectionBrushContext -e -ec 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmCombBrushTool\")\n\txgmCombBrushContext -e -ec 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmGrabBrushTool\")\n\txgmGrabBrushContext -e -ec 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmSmoothBrushTool\")\n\txgmSmoothBrushContext -e -ec 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmNoiseBrushTool\")\n\txgmNoiseBrushContext -e -ec 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmClumpBrushTool\")\n\txgmClumpBrushContext -e -ec 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmPartBrushTool\")\n\txgmPartBrushContext -e -ec 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmFreezeBrushTool\")\n\txgmFreezeBrushContext -e -ec 1 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmSelectBrushTool\")\n\txgmSelectBrushContext -e -ec 1 `currentCtx`;\n\t\nelse\n\tprint \"Brush not supported\";")
	da_XGenBrushMangement_CollisionOn;

runTimeCommand
	-ann "XGen Tools Management"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $CheckTool = `currentCtx`;\n\nif ($CheckTool == \"xgmDensityBrushTool\")\n\txgmDensityBrushContext -e -ec 0`currentCtx`;\n\nelse if ($CheckTool == \"xgmPlaceBrushTool\")\n\txgmPlaceBrushContext -e -ec 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmLengthBrushTool\")\n\txgmLengthBrushContext -e -ec 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmCutBrushTool\")\n\txgmCutBrushContext -e -ec 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmWidthBrushTool\")\n\txgmWidthBrushContext -e -ec 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmDirectionBrushTool\")\n\txgmDirectionBrushContext -e -ec 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmCombBrushTool\")\n\txgmCombBrushContext -e -ec 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmGrabBrushTool\")\n\txgmGrabBrushContext -e -ec 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmSmoothBrushTool\")\n\txgmSmoothBrushContext -e -ec 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmNoiseBrushTool\")\n\txgmNoiseBrushContext -e -ec 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmClumpBrushTool\")\n\txgmClumpBrushContext -e -ec 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmPartBrushTool\")\n\txgmPartBrushContext -e -ec 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmFreezeBrushTool\")\n\txgmFreezeBrushContext -e -ec 0 `currentCtx`;\n\t\nelse if ($CheckTool == \"xgmSelectBrushTool\")\n\txgmSelectBrushContext -e -ec 0 `currentCtx`;\n\t\nelse\n\tprint \"Brush not supported\";")
	da_XGenBrushMangement_CollisionOff;

runTimeCommand
	-ann "Apply a Follicle to all Selected Faces"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $nucleusCheck[] = `ls -type \"nucleus\"`;\ncreateHair 8 8 3 0 0 0 0 5 0 2 1 2;\nstring $startSelect[] = `ls -sl`;\nconvertHairSelection( \"hairSystems\" );\nstring $hsys[] = `ls -sl`;\n\nconvertHairSelection( \"follicles\" );\nstring $follicles[] = `ls -sl`;\nUnparent;\nGroup;\nrename \"FacesFollicles1\";\nconvertHairSelection( \"startCurves\" );\nstring $startCurves[] = `ls -sl`;\nselect -r $follicles;\nconvertHairSelection( \"restCurves\" );\nstring $restCurves[] = `ls -sl`;\nselect -r $follicles;\nconvertHairSelection( \"current\" );\nstring $current[] = `ls -sl`;\nselect -r $follicles;\nconvertHairSelection( \"constraints\" );\nstring $constraints[] = `ls -sl`;\nclear $follicles;\nstring $hsysGroups[];\nint $i, $j = 0;\nfor( $i = 0; $i < size( $hsys ); $i++ ){\n\tstring $tforms[] = listTransforms( $hsys[$i] );\n\tif( size( $tforms ) > 0 ){\n\t\t$hsysGroups[$j] = $tforms[0];\n\t\t$j++;\n\t}\n\tstring $groups[] = getHairSystemGroups( $hsys[$i], false );\n\tif( $groups[0] != \"\" ){\n\t\t$hsysGroups[$j] = $groups[0];\n\t\t$j++;\n\t}\n\tif( $groups[1] != \"\" ){\n\t\t$hsysGroups[$j] = $groups[1];\n\t\t$j++;\n\t}\n}\n\nif(`pluginInfo -q -l Fur`) {\t\n\tfor( $i = 0; $i < size( $hsys ); $i++ ){\n\t\tstring $curveAttractorSet[] = `listConnections -shapes true -type \"FurCurveAttractors\" $hsys[$i]`;\n\t\tif(size($curveAttractorSet) == 1)\n\t\t\tHfDeleteCAS $curveAttractorSet[0];\n\t}\n}\n\nstring $all[];\nappendStringArray( $all, $hsys, size($hsys));\nappendStringArray( $all, $startCurves, size($startCurves));\nappendStringArray( $all, $restCurves, size($restCurves));\nappendStringArray( $all, $current, size($current));\nappendStringArray( $all, $constraints, size($constraints));\nappendStringArray( $all, $hsysGroups, size($hsysGroups));\ndelete $all;\nif (`size($nucleusCheck)` == 0){\n    delete nucleus1;\n}\nselect -r;")
	da_FacesFollicles;

runTimeCommand
	-ann "Create a Compass"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("circle -c 0 0 0 -nr 0 1 0 -sw 180 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\nstring $myVectorDir1[] = `ls -sl`;\nsetAttr ($myVectorDir1[0] + \".sx\") -2;\nsetAttr ($myVectorDir1[0] + \".sz\") 0.02;\nda_ClearFreeze;\n\nduplicate;\nstring $myVectorDir2[] = `ls -sl`;\nsetAttr ($myVectorDir2[0] + \".rx\") 90;\nda_ClearFreeze;\n\ncircle -c 0 0 0 -nr 0 1 0 -sw 360 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;\nstring $myVectorDir3[] = `ls -sl`;\nsetAttr ($myVectorDir3[0] + \".rz\") 90;\nsetAttr ($myVectorDir3[0] + \".sx\") 0.02;\nsetAttr ($myVectorDir3[0] + \".sy\") 0.02;\nsetAttr ($myVectorDir3[0] + \".sz\") 0.02;\nda_ClearFreeze;\n\nselect $myVectorDir1[0] $myVectorDir2[0] $myVectorDir3[0];\nda_CombineCurves;\nxform -ws -a -rp 0 0 0;\nrename CompassVector1;\nstring $myCompassVector[] = `ls -sl`;\nsetAttr ($myCompassVector[0] + \".overrideEnabled\") 1;\nsetAttr ($myCompassVector[0] + \".overrideColor\") 4;\n\nstring $myVectorProduct = `createNode vectorProduct`;\nsetAttr ($myVectorProduct + \".operation\") 3;\nsetAttr ($myVectorProduct + \".input1X\") 1;\n\t\nstring $myMultiplyDivide = `createNode multiplyDivide`;\n\nconnectAttr ($myCompassVector[0] + \".worldMatrix[0]\", $myVectorProduct + \".matrix\");\n\naddAttr -ln \"VectorX\" -at double $myCompassVector[0];\naddAttr -ln \"VectorY\" -at double $myCompassVector[0];\naddAttr -ln \"VectorZ\" -at double $myCompassVector[0];\naddAttr -ln \"Magnitude\" -at double $myCompassVector[0];\nsetAttr -e -k 1 ($myCompassVector[0] + \".VectorX\");\nsetAttr -e -k 1 ($myCompassVector[0] + \".VectorY\");\nsetAttr -e -k 1 ($myCompassVector[0] + \".VectorZ\");\nsetAttr -e -k 1 ($myCompassVector[0] + \".Magnitude\" ) 1;\nsetAttr -l 1 ($myCompassVector[0] + \".sx\");\nsetAttr -l 1 ($myCompassVector[0] + \".sy\");\nsetAttr -l 1 ($myCompassVector[0] + \".sz\");\n\t\n\t\nconnectAttr($myVectorProduct + \".output.outputX\", $myMultiplyDivide + \".input1.input1X\");\nconnectAttr($myVectorProduct + \".output.outputY\", $myMultiplyDivide + \".input1.input1Y\");\nconnectAttr($myVectorProduct + \".output.outputZ\", $myMultiplyDivide + \".input1.input1Z\");\n\t\nconnectAttr($myMultiplyDivide + \".output.outputX\", $myCompassVector[0] + \".VectorX\");\nconnectAttr($myMultiplyDivide + \".output.outputY\", $myCompassVector[0] + \".VectorY\");\nconnectAttr($myMultiplyDivide + \".output.outputZ\", $myCompassVector[0] + \".VectorZ\");\n\t\nconnectAttr($myCompassVector[0] + \".Magnitude\", $myMultiplyDivide + \".input2.input2X\");\nconnectAttr($myCompassVector[0] + \".Magnitude\", $myMultiplyDivide + \".input2.input2Y\");\nconnectAttr($myCompassVector[0] + \".Magnitude\", $myMultiplyDivide + \".input2.input2Z\");\n\nselect $myCompassVector[0];")
	da_Compass;

runTimeCommand
	-ann "Toggle Anti-Alias"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`getAttr \"hardwareRenderingGlobals.multiSampleEnable\"`){\n\tsetAttr \"hardwareRenderingGlobals.multiSampleEnable\" 0;\n}else{\n    setAttr \"hardwareRenderingGlobals.multiSampleEnable\" 1;\n}")
	da_AntiAliasToggle;

runTimeCommand
	-ann "Toggle Joint to Local Rotation Axies"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("if(`selectMode -q -component`){\n\tchangeSelectMode -object;\n}else{\n    changeSelectMode -component;\n\tsetComponentPickMask \"Other\" 1;\n}")
	da_JointMode;

runTimeCommand
	-ann "Toggle Motion Blur"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`getAttr \"hardwareRenderingGlobals.motionBlurEnable\"`){\n\tsetAttr \"hardwareRenderingGlobals.motionBlurEnable\" 0;\n}else{\n    setAttr \"hardwareRenderingGlobals.motionBlurEnable\" 1;\n}")
	da_motionBlurEnableToggle;

runTimeCommand
	-ann "Toggle Ambient Occulison"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`getAttr \"hardwareRenderingGlobals.ssaoEnable\"`){\n\tsetAttr \"hardwareRenderingGlobals.ssaoEnable\" 0;\n}else{\n    setAttr \"hardwareRenderingGlobals.ssaoEnable\" 1;\n}")
	da_ToggleAO;

runTimeCommand
	-ann "Toggle Playback Mode"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`playbackOptions -q -maxPlaybackSpeed`){\n\tplaybackOptions -e -playbackSpeed 0 -maxPlaybackSpeed 0;\n}else{\n    playbackOptions -e -playbackSpeed 0 -maxPlaybackSpeed 1;\n}")
	da_maxPlaybackSpeedToggle;

runTimeCommand
	-ann "Toggle Stepped Preview"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`playbackOptions -q -blockingAnim`){\n\tplaybackOptions -e -blockingAnim 0;\n}else{\n    playbackOptions -e -blockingAnim 1;\n}")
	da_steppedPreview;

runTimeCommand
	-ann "Toggle Title Bar"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`window -q -titleBar MayaWindow`){\n\twindow -e -titleBar 0 MayaWindow;\n}else{\n    window -e -titleBar 1 MayaWindow;\n}")
	da_TitleBarToggle;

runTimeCommand
	-ann "Flood Current Sculpt Brush"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myCurrentTool = `currentCtx`;\nfloat $myStrengthValue = `sculptMeshCacheCtx -q -strength $myCurrentTool`;\nsculptMeshCacheCtx -e -flood $myStrengthValue $myCurrentTool;")
	da_SculptFlood;

runTimeCommand
	-ann "Make Pivot Keyable"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myTransform[] = `ls -sl -type \"transform\"`;\n\nfor ($each in $myTransform){\n    setAttr -k on ($each + \".rotatePivotX\");\n    setAttr -k on ($each + \".rotatePivotY\");\n    setAttr -k on ($each + \".rotatePivotZ\");\n    \n    setAttr -k on ($each + \".rotatePivotTranslateX\");\n    setAttr -k on ($each + \".rotatePivotTranslateY\");\n    setAttr -k on ($each + \".rotatePivotTranslateZ\");    \n}")
	da_pivotKeyable;

runTimeCommand
	-ann "Skip to Next Keyframe"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("int $currentTime = `currentTime -q`;\nkeyframe -t `currentTime -q` -e -r -tc 1;\nNextFrame;")
	da_moveKeyframeToNext;

runTimeCommand
	-ann "Skip to Previous Keyframe"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("int $currentTime = `currentTime -q`;\nkeyframe -t `currentTime -q` -e -r -tc -1;\nPreviousFrame;")
	da_moveKeyframeToPrev;

runTimeCommand
	-ann "Round Keyframe of the Actual Selection(s)"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("string $animCurves[] = `keyframe -q -name`;\nfor ($animCurve in $animCurves){\n\tfloat $thisKeys[] = `keyframe -q -sl $animCurve`;\n\tif (!size($thisKeys))\n\t\t$thisKeys = `keyframe -q $animCurve`;\n\tfor ($keys in $thisKeys)\n\t{\n\t\tif (`fmod $keys 1` != 0)\n\t\t\tkeyframe -e -t $keys -iub true -a -o over -timeChange (da_round($keys)) $animCurve;\n\t}\n}")
	da_roundKeyframe;

runTimeCommand
	-ann "Toggle Weighted Tangents"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("int $weightedTangentsCheck[] = `keyTangent -q -weightedTangents`;\nint $weightedTangentsSum = 0;\n\nfor ($each in $weightedTangentsCheck)\n\t$weightedTangentsSum += $each;\n\nif($weightedTangentsSum){\n\tkeyTangent -e -weightedTangents 0;\n}else{\n    keyTangent -e -weightedTangents 1;\n}")
	da_weightedTangents;

runTimeCommand
	-ann "Toggle Lock Tangents"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("int $breakTangentsCheck[] = `keyTangent -q -lock`;\nint $breakTangentsSum = 0;\n\nfor ($each in $breakTangentsCheck)\n\t$breakTangentsSum += $each;\n\nif($breakTangentsSum){\n\tkeyTangent -e -lock 0;\n}else{\n    keyTangent -e -lock 1;\n}")
	da_breakTangents;

runTimeCommand
	-ann "Insert a Keyframe at Current Frame"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("string $curves[] = `keyframe -q -selected -name`;\nint $i;\nfor ($i = 0; $i < size($curves); $i++){\n\t\tfloat $curTime = `animCurveEditor -keyingTime $curves[$i] -q graphEditor1GraphEd`;\n\t\tif ( size($curves) ) setKeyframe -time $curTime -insert $curves[$i];\n}")
	da_InseritKeyframe;

runTimeCommand
	-ann "Match Normals Between Meshes"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myResult = `confirmDialog -title \"Confirm\" -message \"Before continue make sure the source mesh is selected first, do you continue?\" \n-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n-cancelButton \"No\" -dismissString \"No\"`;\nif ($myResult == \"Yes\") {\n    string $mySel[] = `ls -sl`;\n    for($i=1; $i < size($mySel); $i++) transferAttributes -pos 0 -nml 1 -uvs 0 -col 0 -spa 4 -sm 3 -clb 1 $mySel[0] $mySel[$i];\n}")
	da_MatchNormals;

runTimeCommand
	-ann "Match UV Between Meshes"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $myResult = `confirmDialog -title \"Confirm\" -message \"Before continue make sure the source mesh is selected first, do you continue?\"  \n-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n-cancelButton \"No\" -dismissString \"No\"`;\nif ($myResult == \"Yes\") {\n    string $mySel[] = `ls -sl`;\n    for($i=1; $i < size($mySel); $i++) transferAttributes -pos 0 -nml 0 -uvs 2 -col 0 -spa 4 -sm 3 -clb 1 $mySel[0] $mySel[$i];\n}")
	da_MatchUV;

runTimeCommand
	-ann "Select Current UV Shell form Face Selection"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("ConvertSelectionToUVs;\nSelectUVShell;\nConvertSelectionToFaces;")
	da_SelectShellFromFaces;

runTimeCommand
	-ann "Display Local Axis"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `ls -sl`;\nint $numObj = size($mySel);\nfor($i=0; $i<$numObj; $i++) setAttr ($mySel[$i] + \".displayLocalAxis\") 1;")
	da_ShowLocalAxis;

runTimeCommand
	-ann "Hide Local Axis"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `ls -sl`;\nint $numObj = size($mySel);\nfor($i=0; $i<$numObj; $i++) setAttr ($mySel[$i] + \".displayLocalAxis\") 0;")
	da_HideLocalAxis;

runTimeCommand
	-ann "Freeze Transformations and Delete Non Deformable History"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl`;\nstring $myQueryArrayNodeType[] = `da_QueryArrayNodeType`;\n\nselect $mySel;\n\nswitch ($myQueryArrayNodeType[0]){\n    case \"joint\": makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1; break;\n    case \"locator\": makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1; break;\n    default:\n        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;\n        performBakeNonDefHistory false; break;\n}")
	da_FreezeDelNonDef;

runTimeCommand
	-ann "Make Current Emitter(s) Directional"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\nsetAttr ($each +\".emitterType\") 0;")
	da_EmitterDirectional;

runTimeCommand
	-ann "Make Current Emitter(s) Omni"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\nsetAttr ($each +\".emitterType\") 1;")
	da_EmitterOmni;

runTimeCommand
	-ann "Make Current Emitter(s) Volumetric"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\nsetAttr ($each +\".emitterType\") 4;")
	da_EmitterVolume;

runTimeCommand
	-ann "Apply Compass to Emitter"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $myEmitter[] = `ls -sl`;\nda_Compass;\nstring $myDirection[] = `ls -sl`;\n\nfor ($each in $myEmitter){\n\tconnectAttr($myDirection[0] + \".VectorX\", $each + \".directionX\");\n\tconnectAttr($myDirection[0] + \".VectorY\", $each + \".directionY\");\n\tconnectAttr($myDirection[0] + \".VectorZ\", $each + \".directionZ\");\n}")
	da_EmitterCompass;

runTimeCommand
	-ann "Apply Compass to Nuclues Local Force"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $myNcloth[] = `ls -sl`;\n\nda_Compass;\nstring $myDirection[] = `ls -sl`;\n\nfor ($each in $myNcloth){\n\tconnectAttr($myDirection[0] + \".VectorX\", $each + \".localForce.localForceX\");\n\tconnectAttr($myDirection[0] + \".VectorY\", $each + \".localForce.localForceY\");\n\tconnectAttr($myDirection[0] + \".VectorZ\", $each + \".localForce.localForceZ\");\n}")
	da_nClothForceCompass;

runTimeCommand
	-ann "Apply Compass to Nuclues Wind"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $myNcloth[] = `ls -sl`;\n\nda_Compass;\nstring $myDirection[] = `ls -sl`;\n\nfor ($each in $myNcloth){\n\tconnectAttr($myDirection[0] + \".VectorX\", $each + \".localWind.localWindX\");\n\tconnectAttr($myDirection[0] + \".VectorY\", $each + \".localWind.localWindY\");\n\tconnectAttr($myDirection[0] + \".VectorZ\", $each + \".localWind.localWindZ\");\n}")
	da_nClothWindCompass;

runTimeCommand
	-ann "Map Per Face UV"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $myResult = `confirmDialog -title \"Confirm\" -message \"This command create a per face UV shell and Freeze Transformation, continue?\" \n-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n-cancelButton \"No\" -dismissString \"No\"`;\nif ($myResult == \"Yes\"){\n    string $mySel[] = `ls -sl`;\n    $mySelSize = size($mySel);\n    for($i=0; $i<$mySelSize; $i++){\n        select $mySel[$i];\n    \tFreezeTransformations;\n    \tpolyAutoProjection -lm 0 -pb 0 -ibd 1 -cm 0 -l 2 -sc 1 -o 1 -p 6 -ps 0.2 -ws 0;\n    \tdR_DoCmd(\"modeEdge\");\n    \tSelectAll;\n    \tCutUVs;\n    \tu3dOptimize -ite 1 -pow 1 -sa 1 -bi 0 -tf 1 -ms 1024 -rs 0;\n    \tConvertSelectionToUVs;\n    \tuvTkDoSetTexelDensity;\n    \tperformStackSimilarShells 0;\n        UVOrientShells;\n    \tu3dLayout -res 256 -scl 1 -spc 9.765625e-05 -mar 9.765625e-05 -box 0 1 0 1;\n    \tdR_modeObject;\n    }\n}")
	da_MapFacesUV;

runTimeCommand
	-ann "Map Per Face UV on Selected Face(s)"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $myResult = `confirmDialog -title \"Confirm\" -message \"This command create a per face UV shell and Freeze Transformation, continue?\" \n-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n-cancelButton \"No\" -dismissString \"No\"`;\nif ($myResult == \"Yes\"){\n\tstring $myFaces[] = `ls -sl`;\n\tda_BackToObjectMode;\n\tFreezeTransformations;\n\tdR_DoCmd(\"modePoly\");\n\tselect $myFaces;\n\tpolyAutoProjection -lm 0 -pb 0 -ibd 1 -cm 0 -l 2 -sc 1 -o 1 -p 6 -ps 0.2 -ws 0;\n\tConvertSelectionToEdges;\n\tCutUVs;\n\tselect $myFaces;\n\tu3dOptimize -ite 1 -pow 1 -sa 1 -bi 0 -tf 1 -ms 1024 -rs 0;\n\tConvertSelectionToUVs;\n\tuvTkDoGetTexelDensity;\n\tuvTkDoSetTexelDensity;\n\tperformStackSimilarShells 0;\n\tUVOrientShells;\n\tu3dLayout -res 256 -scl 1 -spc 9.765625e-05 -mar 9.765625e-05 -box 0 1 0 1;\n\tdR_modeObject;\n}")
	da_MapFacesFacesUV;

runTimeCommand
	-ann "Create AiVolumes"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("python(\"import mtoa.ui.arnoldmenu as arnoldmenu;arnoldmenu.createVolume()\");\nPickWalkUp;\n\nstring $mySelShape[] = `listRelatives -f -s`;\nstring $shadingEngine = `createNode shadingEngine -n aiVolumeShapeSG1`;\nstring $myStandardVolume = `createNode aiStandardVolume`;\n\nconnectAttr -f ($mySelShape[0] + \".instObjGroups[0]\") ($shadingEngine + \".dagSetMembers[0]\");\nconnectAttr -f ($myStandardVolume + \".outColor\") ($shadingEngine + \".volumeShader\");\n\nselect $mySelShape[0];\nPickWalkUp;")
	da_AiVolumes;

runTimeCommand
	-ann "Edit AiVolume Shader"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySelShape[] = `listRelatives -f -s`;\nselect $mySelShape[0];\nstring $myShadingEngine[] = `listConnections -s 0 -d 1 -t \"shadingEngine\"`;\nselect -r -ne $myShadingEngine[0];\nstring $myAiStandardVolume[] = `listConnections -s 1 -d 0 -t \"aiStandardVolume\"`;\nselect -r -ne $myAiStandardVolume[0];\nAttributeEditor;")
	da_AiVolumeShader;

runTimeCommand
	-ann "Edit AiVolume Shapes"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySelShape[] = `listRelatives -f -s`;\nselect $mySelShape[0];\nAttributeEditor;")
	da_AiVolumeShapes;

runTimeCommand
	-ann "Start IPR of Current Renderer"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("if (`getAttr defaultRenderGlobals.currentRenderer` == \"arnold\"){\n\tpython(\"import mtoa.ui.arnoldmenu as arnoldmenu; arnoldmenu.arnoldMtoARenderView()\");\n}\nelse if (`getAttr defaultRenderGlobals.currentRenderer` == \"mayaSoftware\"){\n\tRenderViewWindow;\n\tIPRRenderIntoNewWindow;\n\trenderWindowCheckAndRenderRegion 1 0 0 1;\n}else{ \n\tRenderViewWindow;\n}\n\ninViewMessage -pos topCenter -msg \"Starting Render\" -fade;")
	da_RenderViews;

runTimeCommand
	-ann "Add Image Plane to Selected Camera"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $myCameraShape[] = `listRelatives -f -s`;\n\nimportImagePlane { $myCameraShape[0] };")
	da_CameraImagesPlane;

runTimeCommand
	-ann "Add Video Plane to Selected Camera"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $myCameraShape[] = `listRelatives -f -s`;\n\nimportMovieImagePlane { $myCameraShape[0] };")
	da_CameraVideoImagesPlane;

runTimeCommand
	-ann "Delete Mental Ray Nodes"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("if (catchQuiet( `unknownPlugin -q -v \"Mayatomr\"`)) {\n\tinViewMessage -pos topCenter -msg \"No Mental Ray nodes detected\" -fade;\n}else{\n\tstring $myResult = `confirmDialog -title \"Confirm\" -message \"Did you want delete all Mental Ray Nodes?\" \n\t-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n\t-cancelButton \"No\" -dismissString \"No\"`;\n\n\tif ($myResult == \"Yes\") {\n    \tcatchQuiet (`delete miDefaultOptions`);\n    \tcatchQuiet (`delete miContourPreset`);\n    \tcatchQuiet (`delete Draft`);\n    \tcatchQuiet (`delete DraftMotionBlur`);\n    \tcatchQuiet (`delete DraftRapidMotion`);\n    \tcatchQuiet (`delete Preview`);\n    \tcatchQuiet (`delete PreviewMotionblur`);\n    \tcatchQuiet (`delete PreviewRapidMotion`);\n    \tcatchQuiet (`delete PreviewCaustics`);\n    \tcatchQuiet (`delete PreviewGlobalIllum`);\n    \tcatchQuiet (`delete PreviewFinalGather`);\n    \tcatchQuiet (`delete Production`);\n    \tcatchQuiet (`delete ProductionMotionblur`);\n    \tcatchQuiet (`delete ProductionRapidMotion`);\n    \tcatchQuiet (`delete ProductionFineTrace`);\n    \tcatchQuiet (`delete ProductionRapidFur`);\n    \tcatchQuiet (`delete ProductionRapidHair`);\n    \n    \tcatchQuiet (`delete miDefaultFramebuffer`);\n    \tcatchQuiet (`delete mentalrayItemsList`);\n    \n    \tcatchQuiet (`delete \"mapViz*\"`);\n    \tcatchQuiet (`delete \"mentalrayIblShape*\"`);\n\n\t\tcatchQuiet( `unknownPlugin -remove \"Mayatomr\"`);\n    \t\n    \tinViewMessage -pos topCenter -msg \"Mental Ray nodes deleted\" -fade;\n    }\n}")
	da_RemoveMrNodes;

runTimeCommand
	-ann "Toggle UV Toolkit"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("int $ToolkitReady  = `isUVToolkitReady`;\nif(! `workspaceControl -ex UVToolkitDockControl`){\n    if(! $ToolkitReady)\n        catchQuiet (`toggleUVToolkit`);\n}else{\n    if(`workspaceControl -q -vis UVToolkitDockControl` == 1){\n        if(`workspaceControl -q -r UVToolkitDockControl` == 0)\n        workspaceControl -e -clp 0 UVToolkitDockControl;\n        else\n            if(`workspaceControl -q -clp UVToolkitDockControl` == 0)\n                workspaceControl -e -clp 1 UVToolkitDockControl;\n            else\n                workspaceControl -e -clp 0 UVToolkitDockControl;\n    }else{\n        if(! $ToolkitReady)\n            catchQuiet (`toggleUVToolkit`);\n    }\n}")
	da_OpenUvTool;

runTimeCommand
	-ann "Expose Rotation Order"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myTransform[] = `ls -sl -tr`;\nfor ($each in $myTransform)\n    setAttr -k on  ($each + \".rotateOrder\");")
	da_ExposeRotationOrder;

runTimeCommand
	-ann "Toggle Transparent Shadows"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`getAttr \"hardwareRenderingGlobals.transparentShadow\"`){\n\tsetAttr \"hardwareRenderingGlobals.transparentShadow\" 0;\n}else{\n    setAttr \"hardwareRenderingGlobals.transparentShadow\" 1;\n}")
	da_TransparentShadowsToggle;

runTimeCommand
	-ann "Creates Animation Keys on Selected or Already Animated Channels"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("channelBoxCommand -key;\n\nstring $myAnimCurves[] = `listConnections -t animCurve -c 1 -scn 1`;\n\nif (size($myAnimCurves) == 0){\n    setKeyframe;    \n}else{\n\tfor ($any in $myAnimCurves){\n    \t    setKeyframe $any;\n\t}\n}")
	da_KeyKeyedOnly;

runTimeCommand
	-ann "Add Custom Fluid Kill Field"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("FluidEmitter;\nstring $mySel[] = `ls -sl`;\nsetAttr -e ($mySel[0] + \".emitterType\") 4;\nsetAttr -e ($mySel[0] + \".densityMethod\") 2;\nsetAttr -e ($mySel[0] + \".fluidDensityEmission\") .00001;\nsetAttr -e ($mySel[0] + \".fluidDropoff\") .00001;")
	da_FluidKillFields;

runTimeCommand
	-ann "Convert curve to nHair"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("makeCurvesDynamic 2 { \"1\", \"0\", \"1\", \"0\", \"1\"};\nstring $myHairSystemShape[] = `ls -sl`;\nsetAttr -e ($myHairSystemShape[0] + \".hairsPerClump\") 10;\nsetAttr -e ($myHairSystemShape[0] + \".clumpWidth\") .3;")
	da_CurveToNHairs;

runTimeCommand
	-ann "Convert nParticles to Metaballs"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $particleGroupSel[] = `ls -sl`;\nstring $particleGroupShape[] = `listRelatives -f -s`;\nselect $particleGroupSel[0];\nda_SelectParticle;\nSelectAll;\nstring $particleSel[] = `ls -sl -fl`;\nfor ($i=0; $i<`size$particleSel`; $i++)\n{\n\tselect $particleSel[$i];\n\tCreateCluster;\n}\n\nselect $particleGroupSel;\ndoParticleToPoly;\nstring $myMetaPoly[] = `ls -sl`;\n\nstring $objectTransform[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nsetAttr ($objectTransform[0] +\".overrideEnabled\") 1;\nsetAttr ($objectTransform[0] +\".overrideDisplayType\") 2;\n\nHighQualityDisplay;\n\naddAttr -ln \"Threshold\"  -at double  -min 0 -dv 0.6 $objectTransform;\naddAttr -ln \"Radius\"  -at double  -min 0 -dv 7 $objectTransform;\naddAttr -ln \"Ignore_Gravity\"  -at bool -dv 1 $objectTransform;\naddAttr -ln \"Self_Collide\"  -at bool -dv 0 $objectTransform;\naddAttr -ln \"Collide_Radius\"  -at double  -min 0.01 -dv 3 $objectTransform;\naddAttr -ln \"Self_Collide_Radius\"  -at double  -min 0.01 -dv 1 $objectTransform;\nsetAttr -e-keyable true ($objectTransform[0] + \".Threshold\");\nsetAttr -e-keyable true ($objectTransform[0] + \".Radius\");\nsetAttr -e-keyable true ($objectTransform[0] + \".Ignore_Gravity\");\nsetAttr -e-keyable true ($objectTransform[0] + \".Self_Collide\");\nsetAttr -e-keyable true ($objectTransform[0] + \".Collide_Radius\");\nsetAttr -e-keyable true ($objectTransform[0] + \".Self_Collide_Radius\");\n\nstring $myShapeConnection[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myShapeConnection;\nsetAttr -e ($myShapeConnection[0] + \".meshTriangleSize\") .2;\nsetAttr -e ($myShapeConnection[0] + \".maxTriangleResolution\") 100;\nsetAttr -e ($myShapeConnection[0] + \".meshSmoothingIterations\") 5;\n\nconnectAttr($objectTransform[0] + \".Threshold\", $myShapeConnection[0] + \".threshold\");\nconnectAttr($objectTransform[0] + \".Radius\", $myShapeConnection[0] + \".blobbyRadiusScale\");\nconnectAttr($objectTransform[0] + \".Ignore_Gravity\", $particleGroupShape[0] + \".ignoreSolverGravity\");\nconnectAttr($objectTransform[0] + \".Self_Collide\", $particleGroupShape[0] + \".selfCollide\");\nconnectAttr($objectTransform[0] + \".Collide_Radius\", $particleGroupShape[0] + \".collideWidthScale\");\nconnectAttr($objectTransform[0] + \".Self_Collide_Radius\", $particleGroupShape[0] + \".selfCollideWidthScale\");\n\nselect $myMetaPoly;\nrename \"pMetaBall1\"")
	da_MetaBalls;

runTimeCommand
	-ann "Convert Edges to Loops and to Curves"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("resetPolySelectConstraint;\nstring $myResult = `confirmDialog -title \"To Loops to Curves\" -message \"Before continue make sure to have seleted only one edge for loop. Continue?\" \n\t-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n\t-cancelButton \"No\" -dismissString \"No\"`;\n\n\tif ($myResult == \"Yes\") {\n        string $edgeSel[] = `ls -sl -fl`;\n        \n        for ($i=0; $i<`size$edgeSel`; $i++)\n        {\n        \tselect $edgeSel[$i];\n        \tSelectEdgeLoopSp;\n        \tpolyToCurve -form 2 -degree 3;\n        }\n}")
	da_EdgesToLoopToCurve;

runTimeCommand
	-ann "Reset All Transformations"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `ls -sl`;\n\nfor ($each in $mySel){\n    catchQuiet(`setAttr ($each + \".tx\") 0`);\n    catchQuiet(`setAttr ($each + \".ty\") 0`);\n    catchQuiet(`setAttr ($each + \".tz\") 0`);\n\n    catchQuiet(`setAttr ($each + \".rx\") 0`);\n    catchQuiet(`setAttr ($each + \".ry\") 0`);\n    catchQuiet(`setAttr ($each + \".rz\") 0`);\n\n    catchQuiet(`setAttr ($each + \".sx\") 1`);\n    catchQuiet(`setAttr ($each + \".sy\") 1`);\n    catchQuiet(`setAttr ($each + \".sz\") 1`);\n}")
	da_ResetTransform;

runTimeCommand
	-ann "Unlock Selected Node(s)"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $mySel[] = `ls -sl`;\nfor ($allMySel in $mySel) \n{\n\tlockNode -lock off $allMySel;\n}")
	da_UnLock;

runTimeCommand
	-ann "Lock Selected Node(s)"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $mySel[] = `ls -sl`;\nfor ($allMySel in $mySel) \n{\n\tlockNode -lock on $allMySel;\n}")
	da_Lock;

runTimeCommand
	-ann "Go to CVs Mode"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("changeSelectMode -component;\nsetComponentPickMask \"Point\" true;")
	da_GoToCvsMode;

runTimeCommand
	-ann "Cleare History end Freeze Transformation"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("delete -ch;\nFreezeTransformations;")
	da_ClearFreeze;

runTimeCommand
	-ann "Color Management On"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("colorManagementPrefs -e -cme 1;")
	da_ColorManagementOn;

runTimeCommand
	-ann "Color Management Off"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("colorManagementPrefs -e -cme 0;")
	da_ColorManagementOff;

runTimeCommand
	-ann "Enable Outliner in layout"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("ToggleOutliner")
	da_LayoutOutliner;

runTimeCommand
	-ann "Open AE to Last Operation"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $myListHistory[] = `listHistory`; \nif( size($myListHistory)>1 ){\n    AttributeEditor;\n    evalDeferred (\"showEditorExact($myListHistory[1])\");\n}else{\n\tAttributeEditor;\n}")
	da_LastOpInStack;

runTimeCommand
	-ann "Recreate the persp camera if needed"
	-cat "Custom Scripts.May9_Next.System"
	-c ("da_DisableWalkTool;\nstring $camera = findStartUpCamera( \"persp\" );\nstring $camera2[] = `camera -n persp -hc \"viewSet -p %camera\"`;\n\ncamera -e -sc 0 $camera; delete \"persp\";\nrename $camera2[0] \"persp\";\ncamera -e -sc 1 \"persp\";\nviewSet -h")
	da_ClearPersp;

runTimeCommand
	-ann "Toggle Component Object Mode"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("toggleSelMode; \nselectType -smp 0 -sme 0 -smf 0 -smu 0 -pv 0 -pe 0 -pf 0 -puv 0 -meshComponents 1;")
	da_ToggleComponentMode;

runTimeCommand
	-ann "Toggle UV and Object Mode"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("$mySel=`ls -sl -fl`;\n\nif (size(`filterExpand -sm 24 $mySel`)!=0 || size(`filterExpand -sm 73 $mySel`)!=0)\n    dR_modeObject;\nelse\n    dR_modeUV;\n")
	da_ToggleUV;

runTimeCommand
	-ann "Toggle Color Management On and Off"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("int $cmStatus = `colorManagementPrefs -q -cme`;\n\nif ($cmStatus == 0)\n{\n\tda_ColorManagementOn;\n\tinViewMessage -pos topCenter -msg \"Color Management on\" -fade;\n}\nelse\n{\n\tda_ColorManagementOff;\n\tinViewMessage -pos topCenter -msg \"Color Management off\" -fade;\n}")
	da_ToggleColorManagement;

runTimeCommand
	-ann "Toggle Ramp Visibility in Paint Skin Tool"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $currentTool = `currentCtx`;\nint $rampTypeCheck = `artAttrCtx -q -useColorRamp $currentTool`;\n\nif ($rampTypeCheck == 1){\n\tartAttrCtx -e -useColorRamp 0 $currentTool;\n}else{\n\tartAttrCtx -e -useColorRamp 1 $currentTool;\n}")
	da_ToggleRampSkin;

runTimeCommand
	-ann "Toggle Xray Joints in Paint Skin Tool"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $currentTool = `currentCtx`;\nint $xrayCheck = `artAttrSkinPaintCtx -q -xrayJoints $currentTool`;\n\nif ($xrayCheck == 1){\n\tartAttrSkinPaintCtx -e -xrayJoints 0 $currentTool;\n}else{\n\tartAttrSkinPaintCtx -e -xrayJoints 1 $currentTool;\n}")
	da_ToggleXRayJointsSkin;

runTimeCommand
	-ann "Toggle Wireframe on Saded"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $selectedPanel = `getPanel -wf`;\nint $shadedWireState = `modelEditor -q -wos $selectedPanel`;\nif(`modelEditor -ex $selectedPanel`)\n{\n    setWireframeOnShadedOption (!$shadedWireState) $selectedPanel;\n}")
	da_ToggleWireOnShade;

runTimeCommand
	-ann "Expand Shade Network"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("hyperShadePanelGraphCommand(\"hyperShadePanel1\", \"showUpAndDownstream\")")
	da_ExpandShade;

runTimeCommand
	-ann "Create a Flatten Surface From Curves"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("bevelPlus -po 1 -ns 1 -cap 2 -pom 2 -ed 0 -ch 1;\npolyMergeVertex  -d 0.0001 -am 1 -ch 1;\nSelectToggleMode;\ntoggleSelMode;")
	da_FlattenSurface;

runTimeCommand
	-ann "Revert the current scene at last save"
	-cat "Custom Scripts.May9_Next.System"
	-c ("string $test = `file -q -sn`;\n\nif (size($test)){\n\tstring $myResult = `confirmDialog -title \"Confirm\" -message \"Reset to Saved?\" \n\t-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n\t-cancelButton \"No\" -dismissString \"No\"`;\n\n\tif ($myResult == \"Yes\") {\n\tstring $currentScenePath = `file -q -sn`;\n\tfile -f -open $currentScenePath;\n\tinViewMessage -pos topCenter -msg \"Revert to Saved\" -fade;\n\t}\n\telse inViewMessage -pos topCenter -msg \"Revert cancelled\" -fade;\n}\n\nelse{\n\tconfirmDialog -title \"Untitled scene\" -message \"Is not possible revert untitled scene.\"\n\t-button \"OK\" -defaultButton \"OK\";\n}")
	da_RevertToSave;

runTimeCommand
	-ann "Add Divisions to Polygonal Object"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl`;\nTriangulate;\npolyQuad  -a 47 -kgb 0 -ktb 0 -khe 0 -ws 0 -ch 1;\nselect $mySel")
	da_PolyDivision;

runTimeCommand
	-ann "Select Object by Material"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("hyperShade -objects \"\"")
	da_SelectObjectMaterial;

runTimeCommand
	-ann "Select Current Camera"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $camera;\nstring $panel = `getPanel -wf`;\nif ( \"modelPanel\" == `getPanel -to $panel` )\n  {\n    $camera = `modelEditor -q -camera $panel`;\n  }\nselect $camera;")
	da_SelectCamera;

runTimeCommand
	-ann "Look Through Selected"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("$currentPanel = `getPanel -withFocus`; \n$panelType = `getPanel -to $currentPanel`;\n$selObj = `ls -sl -l`;\nif ($panelType == \"modelPanel\")\n{\nlookThru $currentPanel $selObj;\n}")
	da_LookThruSelected;

runTimeCommand
	-ann "Enable Bifrost Continuous Emission"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("PickWalkLeft;\nstring $objectShape[] = `listRelatives -f -s`;\nstring $myShaderGroup[] = `listConnections -type \"bifrostContainer\"`;\nif ( size($myShaderGroup) == 7){\n    setAttr ($myShaderGroup[6] + \".bifrostContinuousEmission\") 1;\n} else {\n    setAttr ($myShaderGroup[5] + \".bifrostContinuousEmission\") 1;\n}\n\ninViewMessage -pos topCenter -msg \"Continuous emission enable on selected emitter(s)\" -fade;")
	da_BifrostContinuousEmission;

runTimeCommand
	-ann "Disable Bifrost Continuous Emission"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("PickWalkLeft;\nstring $objectShape[] = `listRelatives -f -s`;\nstring $myShaderGroup[] = `listConnections -type \"bifrostContainer\"`;\nif ( size($myShaderGroup) == 7){\n    setAttr ($myShaderGroup[6] + \".bifrostContinuousEmission\") 0;\n} else {\n    setAttr ($myShaderGroup[5] + \".bifrostContinuousEmission\") 0;\n}\n\ninViewMessage -pos topCenter -msg \"Continuous emission disabled on selected emitter(s)\" -fade;")
	da_BifrostNoContinuousEmission;

runTimeCommand
	-ann "Enable Bifrost Mesh"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nsetAttr ($mySel[0] + \".meshingEnable\") 1;\n\ninViewMessage -pos topCenter -msg \"Bifrost mesh enable on selected simulation\" -fade;")
	da_BifrostMesh;

runTimeCommand
	-ann "Disable Bifrost Mesh"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nsetAttr ($mySel[0] + \".meshingEnable\") 0;\n\ninViewMessage -pos topCenter -msg \"Bifrost mesh disable on selected simulation\" -fade;")
	da_BifrostNoMesh;

runTimeCommand
	-ann "Enable Bifrost Gravity"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("PickWalkLeft;\n\nstring $mySel[] = `ls -sl`;\nstring $myEmitter[] = `listConnections $mySel`;\n\nsetAttr ($myEmitter[1] + \".gravityMagnitude\") 9.8;\n\ninViewMessage -pos topCenter -msg \"Bifrost gravity set at 9.8 on selected simulation\" -fade;")
	da_BifrostGravity;

runTimeCommand
	-ann "Disable Bifrost Gravity"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("PickWalkLeft;\n\nstring $mySel[] = `ls -sl`;\nstring $myEmitter[] = `listConnections $mySel`;\n\nsetAttr ($myEmitter[1] + \".gravityMagnitude\") 0;\n\ninViewMessage -pos topCenter -msg \"Bifrost gravity disable on selected simulation\" -fade;")
	da_BifrostNoGravity;

runTimeCommand
	-ann "List Input Operations on Object"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `ls -sl`; \ndetachHistoryTable $mySel[0] 0 input \"\";\nselect $mySel;")
	da_ListInputOperations;

runTimeCommand
	-ann "nParticle Ignore Nucleous Gravity Solver"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".ignoreSolverGravity\") 1;\n}\ninViewMessage -pos topCenter -msg \"nParticle ignore Nucleous gravity solver\" -fade;")
	da_nParticleNoGravity;

runTimeCommand
	-ann "nParticle use Nucleous gravity solver"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".ignoreSolverGravity\") 0;\n}\ninViewMessage -pos topCenter -msg \"nParticle use Nucleous gravity solver\" -fade;")
	da_nParticleGravity;

runTimeCommand
	-ann "nParticle not Self Collide"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".selfCollide\") 0;\n}\ninViewMessage -pos topCenter -msg \"nParticle not Self Collide\" -fade;")
	da_nParticleNoSelfCollide;

runTimeCommand
	-ann "nParticle Self Collide"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".selfCollide\") 1;\n}\ninViewMessage -pos topCenter -msg \"nParticle Self Collide\" -fade;")
	da_nParticleSelfCollide;

runTimeCommand
	-ann "Enable Surface Snap on Selected Brush"
	-cat "Custom Scripts.May9_Next.PaintFX"
	-c ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".surfaceSnap\") 1;\n}\ninViewMessage -pos topCenter -msg \"Surface Snap On\" -fade;")
	da_BrushSurfaceSnap;

runTimeCommand
	-ann "Disable Surface Snap on Selected Brush"
	-cat "Custom Scripts.May9_Next.PaintFX"
	-c ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".surfaceSnap\") 0;\n}\ninViewMessage -pos topCenter -msg \"Surface Snap Off\" -fade;")
	da_BrushNoSurfaceSnap;

runTimeCommand
	-ann "Enable Surface Collide Outside on Selected Brush"
	-cat "Custom Scripts.May9_Next.PaintFX"
	-c ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".surfaceCollide\") 1;\nsetAttr ($each +\".collideMethod\") 0;\n}\ninViewMessage -pos topCenter -msg \"Surface Collide Outside On\" -fade;")
	da_BrushSurfaceCollideOutside;

runTimeCommand
	-ann "Enable Surface Collide Inside on Selected Brush"
	-cat "Custom Scripts.May9_Next.PaintFX"
	-c ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".surfaceCollide\") 1;\nsetAttr ($each +\".collideMethod\") 1;\n}\ninViewMessage -pos topCenter -msg \"Surface Collide Inside On\" -fade;")
	da_BrushSurfaceCollideInside;

runTimeCommand
	-ann "Enable Surface Collide Both on Selected Brush"
	-cat "Custom Scripts.May9_Next.PaintFX"
	-c ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".surfaceCollide\") 1;\nsetAttr ($each +\".collideMethod\") 2;\n}\ninViewMessage -pos topCenter -msg \"Surface Collide Both On\" -fade;")
	da_BrushSurfaceCollideBoth;

runTimeCommand
	-ann "Disable Surface Collide on Selected Brush"
	-cat "Custom Scripts.May9_Next.PaintFX"
	-c ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".surfaceCollide\") 0;\n}\ninViewMessage -pos topCenter -msg \"Surface Collide Off\" -fade;")
	da_BrushNoSurfaceCollide;

runTimeCommand
	-ann "Enable Occupy Attraction on Selected Brush"
	-cat "Custom Scripts.May9_Next.PaintFX"
	-c ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".occupyAttraction\") 2;\nsetAttr ($each +\".occupyBranchTermination\") 1;\n}\ninViewMessage -pos topCenter -msg \"Occupy Attraction On\" -fade;")
	da_BrushOccupyAttraction;

runTimeCommand
	-ann "Disable Occupy Attraction on Selected Brush"
	-cat "Custom Scripts.May9_Next.PaintFX"
	-c ("//Select Stroke\nstring $his[] = `listHistory -leaf true`; \nselect($his[1]);\n//Apply attribute to selection\nstring $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".occupyAttraction\") 0;\nsetAttr ($each +\".occupyBranchTermination\") 0;\n}\ninViewMessage -pos topCenter -msg \"Occupy Attraction Off\" -fade;")
	da_BrushNoOccupyAttraction;

runTimeCommand
	-ann "Enable Occupy Volume on Line Modifier"
	-cat "Custom Scripts.May9_Next.PaintFX"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".shape\") 1;\nsetAttr ($each +\".widthScale\") 1;\nsetAttr ($each +\".occupyAttraction\") 5;\nsetAttr ($each +\".occupyBranchTermination\") 1;\n}\ninViewMessage -pos topCenter -msg \"Occupy Volume On\" -fade;")
	da_ModifierOccupyVolume;

runTimeCommand
	-ann "Enable Occupy Volume on Line Modifier"
	-cat "Custom Scripts.May9_Next.PaintFX"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n{\nsetAttr ($each +\".occupyAttraction\") 0;\nsetAttr ($each +\".occupyBranchTermination\") 0;\n}\ninViewMessage -pos topCenter -msg \"Occupy Volume Off\" -fade;")
	da_ModifierNoOccupyVolume;

runTimeCommand
	-ann "Parent and Position"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `ls -sl`;\nif ( `size($mySel)` > 1 ){\n    Parent;\n    string $myChild[] = `ls -sl`;\n    for ($each in $myChild){\n        setAttr ($each +\".translate\") -type \"double3\" 0 0 0;\n        setAttr ($each +\".rotate\") -type \"double3\" 0 0 0;\n    }\n}else{\n    confirmDialog -title \"Select at least two transform\" -message \"Please check if you have select at least two transform nodes.\"\n\t-button \"OK\" -defaultButton \"OK\";\n}")
	da_ParentAndPosition;

runTimeCommand
	-ann "Reset Tweak Points to Zero"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("da_BackToObjectMode;\nstring $mySel[] = `listRelatives -f -s`;\nfor ($each in $mySel){\n    $indices = `getAttr -mi ($each + \".pnts\")`;\n    for ($i in $indices){\n    \tsetAttr($each + \".pnts[\" + $i + \"]\", 0,0,0);\n    }\n}")
	da_ResetTweakPoint;

runTimeCommand
	-ann "Enable Follicle Braid"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 1;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 1;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 1;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 1;\n    }\n    select $mySel;\n}")
	da_FollicleBraid;

runTimeCommand
	-ann "Disable Follicle Braid"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 0;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 0;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 0;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".braid\") 0;\n    }\n    select $mySel;\n}")
	da_FollicleNoBraid;

runTimeCommand
	-ann "Switch Manipulator Modes for Componets"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $ToolCheck = (`currentCtx`);\n    \nint $MoveCheck = (`manipMoveContext -q -mode Move`);\nint $RotateCheck = (`manipRotateContext -q -mode Rotate`);\nint $ScaleCheck = (`manipScaleContext -q -mode Scale`);\n\nif (`about -api` >= 20180000){    \n    if ($MoveCheck != 2 && $ToolCheck == \"moveSuperContext\"){\n        manipMoveContext -e -mode 2 Move;\n    }else{\n        manipMoveContext -e -mode 10 Move;\n    }\n\n    if ($RotateCheck != 1 && $ToolCheck == \"RotateSuperContext\"){\n        manipRotateContext -e -mode 1 Rotate;\n    }else{\n        manipRotateContext -e -mode 10 Rotate;\n    }\n\n    if ($ScaleCheck != 2 && $ToolCheck == \"scaleSuperContext\"){\n        manipScaleContext -e -mode 2 Scale;\n    }else{\n        manipScaleContext -e -mode 10 Scale;\n    }\n}else{    \n    if ($MoveCheck != 2 && $ToolCheck == \"moveSuperContext\"){\n        manipMoveContext -e -mode 2 Move;\n    }else{\n        manipMoveContext -e -mode 9 Move;\n    }\n\n    if ($RotateCheck != 1 && $ToolCheck == \"RotateSuperContext\"){\n        manipRotateContext -e -mode 1 Rotate;\n    }else{\n        manipRotateContext -e -mode 9 Rotate;\n    }\n\n    if ($ScaleCheck != 2 && $ToolCheck == \"scaleSuperContext\"){\n        manipScaleContext -e -mode 2 Scale;\n    }else{\n        manipScaleContext -e -mode 9 Scale;\n    }\n}\n\ninViewMessage -pos topCenter -msg \"Manipulator Axis Change\" -fade -fit 100 -fot 100 -fst 400;")
	da_ManipToggleComp;

runTimeCommand
	-ann "Switch Manipulator Modes for Transform"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $ToolCheck = (`currentCtx`);\n\nint $MoveCheck = (`manipMoveContext -q -mode Move`);\nint $RotateCheck = (`manipRotateContext -q -mode Rotate`);\nint $ScaleCheck = (`manipScaleContext -q -mode Scale`);\n\nif ($MoveCheck != 2 && $ToolCheck == \"moveSuperContext\"){\n    manipMoveContext -e -mode 2 Move;\n}else{\n    manipMoveContext -e -mode 0 Move;\n}\n\nif ($RotateCheck != 1 && $ToolCheck == \"RotateSuperContext\"){\n    manipRotateContext -e -mode 1 Rotate;\n}else{\n    manipRotateContext -e -mode 0 Rotate;\n}\n\nif ($ScaleCheck != 2 && $ToolCheck == \"scaleSuperContext\"){\n    manipScaleContext -e -mode 2 Scale;\n}else{\n    manipScaleContext -e -mode 0 Scale;\n}\n\ninViewMessage -pos topCenter -msg \"Manipulator Axis Change\" -fade -fit 100 -fot 100 -fst 400;")
	da_ManipToggleTrans;

runTimeCommand
	-ann "Switch Manipulator Modes"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $mySel[] = `ls -sl`;\n\nif(`size($mySel)` > 0){\n    if(`nodeType $mySel[0]` == \"transform\"){ \n        da_ManipToggleTrans;\n    }else{\n        da_ManipToggleComp;\n    }\n}else{\n    inViewMessage -pos topCenter -amg \"Select some component or object\" -fade;\n}")
	da_ManipToggle;

runTimeCommand
	-ann "UV Selection on Selected Objects"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("dR_DoCmd(\"modeUV\");\nSelectAll;")
	da_SelectUV;

runTimeCommand
	-ann "Particle Selection on Selected Simulation"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("$myParticleSel = `ls -sl -l`;\nint $numObj = size($myParticleSel);\nfor($i=0; $i<$numObj; $i++) doMenuComponentSelection($myParticleSel[$i], \"particle\");")
	da_SelectParticle;

runTimeCommand
	-ann "Multi Component Selection on Selected Polygons"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `filterExpand -ex true -selectionMask 12`;\nint $numObj = size($mySel);\nfor($i=0; $i<$numObj; $i++) doMenuComponentSelection($mySel[$i], \"meshComponents\");")
	da_SelectMulti;

runTimeCommand
	-ann "Control Vertex Selection on Selected Curves"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `filterExpand -ex true -selectionMask 9`;\nint $numObj = size($mySel);\nfor($i=0; $i<$numObj; $i++) doMenuComponentSelection($mySel[$i], \"controlVertex\");")
	da_SelectCV;

runTimeCommand
	-ann "Lattice Point Selection on Selected Lattice"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `filterExpand -ex true -selectionMask 6`;\nint $numObj = size($mySel);\nfor($i=0; $i<$numObj; $i++) doMenuComponentSelection($mySel[$i], \"latticePoint\");")
	da_SelectLattice;

runTimeCommand
	-ann "Revert Selection to Componento Mode"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("$hilite = `ls -hilite`; \n$obj = `ls -dag -sl`; \nsetSelectMode(\"objects\", \"Objects\"); \nselect -r $obj $hilite; ")
	da_BackToObjectMode;

runTimeCommand
	-ann "Bevel Curve(s) for Text"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("bevelPlus -constructionHistory true  -normalsOutwards true  -range false  -polygon 1 -tolerance 0.01 -numberOfSides 4 -js true  -width 0.01 -depth 0.01 -extrudeDepth 0.1 -capSides 4 -bevelInside 0 -outerStyle 0 -innerStyle 0 -polyOutMethod 2 -polyOutCount 200 -polyOutExtrusionType 3 -polyOutExtrusionSamples 4 -polyOutCurveType 3 -polyOutCurveSamples 15 -polyOutUseChordHeightRatio 0;")
	da_BevelPlusForText;

runTimeCommand
	-ann "Enable Time Dragger in Smooth Mode"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("storeLastAction( \"restoreLastContext \" + `currentCtx` );setToolTo TimeDragger;timeControl -e -snap false $gPlayBackSlider;")
	da_TimeDraggerSmooth;

runTimeCommand
	-ann "Enable Time Dragger in Smooth Mode"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("invokeLastAction;\ntimeControl -e -snap true $gPlayBackSlider;\nint $n = `currentTime -query`;\ncurrentTime -edit $n;")
	da_TimeDraggerNoSmooth;

runTimeCommand
	-ann "Frame Only Selected Object into a Hierarchy"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("PickWalkDown;\nfitPanel -selected;\nPickWalkUp")
	da_FrameOnlySelected;

runTimeCommand
	-ann "Simple UV Based Deformer"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("transferAttributes -transferPositions 1 -transferNormals 0 -transferUVs 2 -transferColors 2 -sampleSpace 3 -sourceUvSpace \"map1\" -targetUvSpace \"map1\" -searchMethod 3-flipUVs 0 -colorBorders 1;\nCenterPivot\n")
	da_DeformerUV;

runTimeCommand
	-ann "Toggle Nurbs Curves Visibility"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -nurbsCurves $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -nurbsCurves 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Curves visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -nurbsCurves 1 $panel;\n    inViewMessage -pos topCenter -msg \"Curves visibility ON\" -fade;\n}")
	da_ToggleNurbsCurvesVis;

runTimeCommand
	-ann "Toggle Nurbs Visibility"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -nurbsSurfaces $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -nurbsSurfaces 0 $panel;modelEditor -e -hos 0 $panel;\n\tinViewMessage -pos topCenter -msg \"NURBS visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -nurbsSurfaces 1 $panel;modelEditor -e -hos 1 $panel;\n    inViewMessage -pos topCenter -msg \"NURBS visibility ON\" -fade;\n}")
	da_ToggleNurbsVis;

runTimeCommand
	-ann "Toggle Subdiv Visibility"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -subdivSurfaces $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -subdivSurfaces 0 $panel;modelEditor -e -hos 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Subdivision Surfaces visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -subdivSurfaces 1 $panel;modelEditor -e -hos 1 $panel;\n    inViewMessage -pos topCenter -msg \"Subdivision Surfaces visibility ON\" -fade;\n}")
	da_ToggleSubVis;

runTimeCommand
	-ann "Toggle Poly Visibility"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -polymeshes $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -polymeshes 0 $panel;modelEditor -e -hos 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Polygons visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -polymeshes 1 $panel;modelEditor -e -hos 1 $panel;\n    inViewMessage -pos topCenter -msg \"Polygons visibility ON\" -fade;\n}")
	da_TogglePolyVis;

runTimeCommand
	-ann "Toggle Light Visibility"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -lights $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -lights 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Light visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -lights 1 $panel;\n    inViewMessage -pos topCenter -msg \"Light visibility ON\" -fade;\n}")
	da_ToggleLightVis;

runTimeCommand
	-ann "Toggle Joint Visibility"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -joints $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -joints 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Joints visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -joints 1 $panel;\n    inViewMessage -pos topCenter -msg \"Joints visibility ON\" -fade;\n}")
	da_ToggleJointVis;

runTimeCommand
	-ann "Toggle IK Handles Visibility"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -ikHandles $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -ikHandles 0 $panel;\n\tinViewMessage -pos topCenter -msg \"IK Handles visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -ikHandles 1 $panel;\n    inViewMessage -pos topCenter -msg \"IK Handles visibility ON\" -fade;\n}")
	da_ToggleIkVis;

runTimeCommand
	-ann "Toggle Deformers Visibility"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -deformers $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -deformers 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Deformers visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -deformers 1 $panel;\n    inViewMessage -pos topCenter -msg \"Deformers visibility ON\" -fade;\n}")
	da_ToggleDefVis;

runTimeCommand
	-ann "Toggle Locator Visibility"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $panel = `getPanel -wf`;\nstring $visCheck = `modelEditor -q -locators $panel`;\n\nif ($visCheck == 1)\n{\n\tmodelEditor -e -locators 0 $panel;\n\tinViewMessage -pos topCenter -msg \"Locator Handles visibility OFF\" -fade;\n}\nelse\n{\n    modelEditor -e -locators 1 $panel;\n    inViewMessage -pos topCenter -msg \"Locator Handles visibility ON\" -fade;\n}")
	da_ToggleLocVis;

runTimeCommand
	-ann "Enable Double Side on Selected"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`;\nstring $myShape[] = `listRelatives -f -s $mySel`;\nfor ($i=0; $i<size($mySel); $i++) {\n\tsetAttr ($myShape[$i] + \".doubleSided\") 1;\n}")
	da_DoubleSideOn;

runTimeCommand
	-ann "Disable Double Side on Selected"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`;\nstring $myShape[] = `listRelatives -f -s $mySel`;\nfor ($i=0; $i<size($mySel); $i++) {\n\tsetAttr ($myShape[$i] + \".doubleSided\") 0;\n}")
	da_DoubleSideOff;

runTimeCommand
	-ann "Open light List Panel UI"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("if (`about -api` >= 20190100){\n\tcallPython \"maya.app.renderSetup.lightEditor.views.editorUI\" \"createLightEditorWindow\" {};\n}else{\n\tcallPython \"maya.app.renderSetup.views.lightEditor.editor\" \"openEditorUI\" {};\n}")
	da_LightList;

runTimeCommand
	-ann "Show HG Connection of a node(s)"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $mySel[] = `ls -sl`;\nstring $myActualPanel = `getPanel -underPointer`;\nstring $myNodeType[] = `da_QueryArrayNodeType`;\nselect $mySel;\n\nif ( $myNodeType[0] == \"character\" ){\n    characterEditor( true );\n}else{\n\tshowDGLevel ($myActualPanel + \"HyperGraphEd\");\n}")
	da_HgConnectionLevel;

runTimeCommand
	-ann "Save Current Render as Image"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("renderWindowMenuCommand saveImage renderView")
	da_SaveRenderImage;

runTimeCommand
	-ann "Create Transform nConstraint"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("performCreateDynamicConstraint 0 \"transform\";")
	da_NconstraintTransform;

runTimeCommand
	-ann "Edit Current Deformer"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("string $currentTool = `currentCtx`;\n\nif ($currentTool == \"ShowManips\"){\n    buildSelectMM;MarkingMenuPopDown;;\n}else{\n    ShowManipulators;\n}")
	da_EditDeformer;

runTimeCommand
	-ann "Enable Legacy Subdiv in Poly Mode"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl -o`;\nsubdGivenIntoPolyMode $mySel[0] 1 0 0 0;\ninViewMessage -pos topCenter -msg \"Poly Mode\" -fade;")
	da_LegacySubdivPolyMode;

runTimeCommand
	-ann "Enable Legacy Subdiv in Standard Mode"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl -o`;\nsubdGivenIntoHierMode $mySel[0];\ninViewMessage -pos topCenter -msg \"Subd Mode\" -fade;")
	da_LegacySubdivStandardMode;

runTimeCommand
	-ann "Toggle Legacy Subdiv Mode"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("int $LegacySubdivTag = (($LegacySubdivTag + 1) % 2);\n\nif ($LegacySubdivTag)\n{\n\tda_LegacySubdivPolyMode;\n}\nelse\n{\n    da_LegacySubdivStandardMode;\n}")
	da_LegacySubdivToggle;

runTimeCommand
	-ann "Enable Physically Based"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".spaceScale\") 0.010;\n}\ninViewMessage -pos topCenter -msg \"Physically Based Enable\" -fade;")
	da_NucleusPhysicallyBasedOn;

runTimeCommand
	-ann "Disable Physically Based"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".spaceScale\") 1;\n}\ninViewMessage -pos topCenter -msg \"Physically Based Enable\" -fade;")
	da_NucleusPhysicallyBasedOff;

runTimeCommand
	-ann "Go from Create Node to Mesh Node"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `ls -sl`;\nstring $myShape[] = `listRelatives -f -s $mySel`;\nselect $myShape;\nPickWalkUp")
	da_GoToMesh;

runTimeCommand
	-ann "Open Arnold TX Manager"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("if (`pluginInfo -q -loaded mtoa` == 0)\n\tprint \"Load Arnold before continue\";\nelse\n\tpython( \"import mtoa.ui.arnoldmenu as arnoldmenu; arnoldmenu.arnoldTxManager()\" );")
	da_TxManager;

runTimeCommand
	-ann "Enable Arnold Light Normalization"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n\tsetAttr ($each +\".aiNormalize\") 1;\n\ninViewMessage -pos topCenter -msg \"Light Normalization On\" -fade;")
	da_AiLightNormalize;

runTimeCommand
	-ann "Disable Arnold Light Normalization"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n\tsetAttr ($each +\".aiNormalize\") 0;\n\ninViewMessage -pos topCenter -msg \"Light Normalization Off\" -fade;")
	da_AiNoLightNormalize;

runTimeCommand
	-ann "Create AiPhotometric Light"
	-cat "Custom Scripts.May9_Next.Render"
	-cl "python"
	-c ("import mtoa.utils as mutils; mutils.createLocator(\"aiPhotometricLight\", asLight=True)")
	da_AiPhotometric;

runTimeCommand
	-ann "Create AiSkyDome Light"
	-cat "Custom Scripts.May9_Next.Render"
	-cl "python"
	-c ("import mtoa.utils as mutils; mutils.createLocator(\"aiSkyDomeLight\", asLight=True)")
	da_AiSkyDome;

runTimeCommand
	-ann "Create ai Mesh Light"
	-cat "Custom Scripts.May9_Next.Render"
	-cl "python"
	-c ("import mtoa.utils as mutils; mutils.createMeshLight()")
	da_AiMeshLight;

runTimeCommand
	-ann "Create a MASH Network for Voxelize a Mash"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $mySel[] = `ls -sl`;\nif ( `size($mySel)` == 2 ){\n    string $myResult = `confirmDialog -title \"Confirm\" -message \"Make sure you have selected before the filler mesh, do you continue?\" \n\t-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n\t-cancelButton \"No\" -dismissString \"No\"`;\n\tif ($myResult == \"Yes\") {\n        select $mySel[0];\n        MASHnewNetwork(\"MASH#\");\n        string $myMashNerwork[] = `listConnections -s true -d false`;\n        \n        // Create connection and set MASH to Voxelize\n        connectAttr ($mySel[1] + \".worldMesh[0]\", $myMashNerwork[0] + \".inputMesh\");\n        \n        setAttr ($myMashNerwork[0] + \".arrangement\") 4;\n        setAttr ($myMashNerwork[0] + \".meshType\") 6;\n        setAttr ($myMashNerwork[0] + \".voxelMode\") 2;\n        \n        // Set hidden order and open Attribute Editor wondow\n        hide $mySel[1];\n        showHidden $mySel[0];\n        \n        select $myMashNerwork[0];\n        \n        openAEWindow;\n    }\n}else{\n    string $myResult = `confirmDialog -title \"Warning\" -message \"Please select only two meshes, first the filler than the volume.\" \n\t-button \"Ok\" -defaultButton \"Ok\" \n\t-cancelButton \"Ok\" -dismissString \"Ok\"`;\n}")
	da_MashVoxelizer;

runTimeCommand
	-ann "Toggle Tool Settings"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("ToggleToolSettings")
	da_ToolSettings;

runTimeCommand
	-ann "Open Bifrost Ocean Simulation"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-cl "python"
	-c ("import boss.BossEditor as be\nbe.BossEditor()")
	da_OpenBossEditor;

runTimeCommand
	-ann "Raise Modeling Toolkit UI"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("showModelingToolkit")
	da_ModelingToolkit;

runTimeCommand
	-ann "Open Color Editor UI"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("colorEditor")
	da_OpenColorEditor;

runTimeCommand
	-ann "Display Joints As Bone"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl`;\nfor ($i=0; $i<size($mySel); $i++) {\n\tsetAttr ($mySel[$i] + \".drawStyle\") 0;\n}\ninViewMessage -pos topCenter -msg \"Display Joints As Bone\" -fade;")
	da_JointsAsBone;

runTimeCommand
	-ann "Display Joints As None"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl`;\nfor ($i=0; $i<size($mySel); $i++) {\n\tsetAttr ($mySel[$i] + \".drawStyle\") 2;\n}\ninViewMessage -pos topCenter -msg \"Display Joints As None\" -fade;")
	da_JointsAsNone;

runTimeCommand
	-ann "Go to Front Camera"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("setNamedPanelLayout \"Four View\";\nstring $destinationPanel = `getPanel -wl \"Front View\"`;\ndoSwitchPanes(1, {\"single\", $destinationPanel});\ninViewMessage -pos topCenter -msg \"Front View\" -fade;")
	da_GoToFront;

runTimeCommand
	-ann "Go to Side Camera"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("setNamedPanelLayout \"Four View\";\nstring $destinationPanel = `getPanel -wl \"Side View\"`;\ndoSwitchPanes(1, {\"single\", $destinationPanel});\ninViewMessage -pos topCenter -msg \"Side View\" -fade;")
	da_GoToSide;

runTimeCommand
	-ann "Go to Top Camera"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("setNamedPanelLayout \"Four View\";\nstring $destinationPanel = `getPanel -wl \"Top View\"`;\ndoSwitchPanes(1, {\"single\", $destinationPanel});\ninViewMessage -pos topCenter -msg \"Top View\" -fade;")
	da_GoToTop;

runTimeCommand
	-ann "Go to Persp Camera"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("setNamedPanelLayout \"Four View\";\nstring $destinationPanel = `getPanel -wl \"Persp View\"`;\ndoSwitchPanes(1, {\"single\", $destinationPanel});\ninViewMessage -pos topCenter -msg \"Persp View\" -fade;")
	da_GoToPersp;

runTimeCommand
	-ann "Open Tool Property Window"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("toolPropertyWindow -inMainWindow true")
	da_ToolProperty;

runTimeCommand
	-ann "Convet Polygons to NURBS surface"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("doSubdivCreate( \"2\", { \"1\",\"1\",\"10000\",\"128\"} );\ndoSubdivToNurbs( {\"1\",\"1\",\"0\"} );\nhyperShade -assign initialShadingGroup;")
	da_PolyToNurbs;

runTimeCommand
	-ann "Connect a Mesh to Membrane Collide"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mesh[] = `ls -sl -ni -typ \"mesh\"`;\nstring $membrane[] = `ls -sl -ni -typ \"membrane\"`;\n\nconnectAttr -f ($mesh[0] + \".worldMesh\") ($membrane[0] + \".collideMesh\");")
	da_MembraneCollider;

runTimeCommand
	-ann "Set nHair Point Lock to Base"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 1;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 1;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 1;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 1;\n    }\n    select $mySel;\n}")
	da_HairLockBase;

runTimeCommand
	-ann "Set nHair Point Lock to Both Ends"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 3;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 3;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 3;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 3;\n    }\n    select $mySel;\n}")
	da_HairLockBothEnds;

runTimeCommand
	-ann "Set nHair Point Lock to No Attach"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 0;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 0;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 0;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 0;\n    }\n    select $mySel;\n}")
	da_HairNoLock;

runTimeCommand
	-ann "Set nHair Simulation Method to Dynamic"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 2;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 2;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 2;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 2;\n    }\n    select $mySel;\n}")
	da_HairDynamic;

runTimeCommand
	-ann "Set nHair Simulation Method to Passive"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 1;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 1;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 1;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 1;\n    }\n    select $mySel;\n}")
	da_HairPassive;

runTimeCommand
	-ann "Set nHair Simulation Method to Static"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 0;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 0;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 0;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".simulationMethod\") 0;\n    }\n    select $mySel;\n}")
	da_HairStatic;

runTimeCommand
	-ann "Enable Locator(s) Shape(s) Visibility"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `listRelatives -f -s`;\nfor ($i=0; $i<size($mySel); $i++)\n\tsetAttr ($mySel[$i] + \".visibility\") 1;\n\ninViewMessage -pos topCenter -msg \"Locator Shape Visibility On\" -fade;")
	da_LocatorVisibility;

runTimeCommand
	-ann "Disable Locator(s) Shape(s) Visibility"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `listRelatives -f -s`;\nfor ($i=0; $i<size($mySel); $i++)\n\tsetAttr ($mySel[$i] + \".visibility\") 0;\n\ninViewMessage -pos topCenter -msg \"Locator Shape Visibility Off\" -fade;")
	da_LocatorNoVisibility;

runTimeCommand
	-ann "Set IK Preferred Angle"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myIK[] = `ls -sl`;\nfor ($i=0; $i<size($myIK); $i++) {\n\tjoint -e -spa -ch $myIK[$i];\n}\n")
	da_SetIKPerfAngle;

runTimeCommand
	-ann "Assume IK Preferred Angle"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myIK[] = `ls -sl`;\nfor ($i=0; $i<size($myIK); $i++) {\n\tjoint -e -apa -ch $myIK[$i];\n}")
	da_AssumeIKPrefAngle;

runTimeCommand
	-ann "Set Muscle Bone as Fat"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl`;\nfor ($i=0; $i<size($mySel); $i++) {\n\tsetAttr ($mySel[$i] + \".draw\") 1;\n}\ninViewMessage -pos topCenter -msg \"Display Muscle Bone as Fat\" -fade;")
	da_BoneAsFat;

runTimeCommand
	-ann "Set Muscle Bone as Off"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $mySel[] = `ls -sl`;\nfor ($i=0; $i<size($mySel); $i++) {\n\tsetAttr ($mySel[$i] + \".draw\") 0;\n}\ninViewMessage -pos topCenter -msg \"Display Muscle Bone as Off\" -fade;")
	da_BoneAsOff;

runTimeCommand
	-ann "Select Right Angle Edges"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -a on -ab 80 100;// to get edges with angle between\nstring $rightAngleSel[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\nselect $rightAngleSel;")
	da_EdgeRightAngle;

runTimeCommand
	-ann "Select Straight Angle Edges"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -a on -ab 0 80;// to get edges with angle between\nstring $straightAngleSel[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\nselect $straightAngleSel;")
	da_EdgeStraightAngle;

runTimeCommand
	-ann "Select Acute Angle Edges"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -a on -ab 100 180;// to get edges with angle between\nstring $acuteAngleSel[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\nselect $acuteAngleSel;")
	da_EdgeAcuteAngle;

runTimeCommand
	-ann "Select Border Edges"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -w 1;\nstring $borderSel[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\npolySelectConstraint -m 3 -t 0x8000 -w 0;\nselect $borderSel;")
	da_EdgeBorder;

runTimeCommand
	-ann "Select Inside Edge"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -w 2;\nstring $insideSel[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\npolySelectConstraint -m 3 -t 0x8000 -w 0;\nselect $insideSel;")
	da_EdgeInside;

runTimeCommand
	-ann "Select Hard Edges"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -sm 1;\nstring $hardEdge[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\npolySelectConstraint -m 3 -t 0x8000 -sm 0;\nselect $hardEdge;")
	da_EdgeHard;

runTimeCommand
	-ann "Select Soft Edge"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("dR_DoCmd(\"modeObject\");\ndR_DoCmd(\"modeEdge\");\npolySelectConstraint -m 3 -t 0x8000 -sm 2;\nstring $softEdge[] = `ls -sl`;\npolySelectConstraint -a off; // turn off angle constraint\npolySelectConstraint -m 3 -t 0x8000 -sm 0;\nselect $softEdge;")
	da_EdgeSoft;

runTimeCommand
	-ann "Move Objects to World Center"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\n\tmove -rpr 0 0 0 $each;\n}\nFreezeTransformations")
	da_ZeroTransfomations;

runTimeCommand
	-ann "Connect Shapes"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $createConnect[] = `ls -sl`;\nint $numObj = size($createConnect); \nfor($i=1; $i<$numObj; $i++){\n    connectAttr -f ($createConnect[0] + \".outMesh\") ($createConnect[$i] + \".inMesh\");\n}")
	da_ConnectShapes;

runTimeCommand
	-ann "Auto Connect a Collider from Viewport"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\n\nstring $myShapeConnection[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myShapeConnection;\n\nstring $myMembrane[] = `ls -sl -ni -typ \"membrane\"`;\nselect $myMembrane;\n\nconnectAttr -f ($objectShape[1] + \".worldMesh\") ($myMembrane[0] + \".collideMesh\");")
	da_Auto_MembraneCollider;

runTimeCommand
	-ann "Select Assigned Shader from Selection"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("AttributeEditor;\nevalDeferred (\"hyperShade -smn\");")
	da_SelectAssignedShader;

runTimeCommand
	-ann "Enable Reference Mode for Object Transform"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $objectTransform[] = `ls -sl -tr`;\nfor ($each in $objectTransform){\n    setAttr ($each +\".overrideEnabled\") 1;\n    setAttr ($each +\".overrideDisplayType\") 2;\n}")
	da_EnableReference;

runTimeCommand
	-ann "Disable Reference Mode for Object Transform"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $objectTransform[] = `ls -sl -tr`;\nfor ($each in $objectTransform){\n    setAttr ($each +\".overrideEnabled\") 1;\n    setAttr ($each +\".overrideDisplayType\") 0;\n}")
	da_DisableReference;

runTimeCommand
	-ann "Toggle Wireframe when Scupt"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $currentTool = `currentCtx`;\nint $wireframeCheck = `sculptMeshCacheCtx -q -displayWireframe $currentTool`;\n\nif ($wireframeCheck == 1){\n    sculptMeshCacheCtx -e -displayWireframe 0 $currentTool;\n} else {\n    sculptMeshCacheCtx -e -displayWireframe 1 $currentTool;\n}")
	da_ToggleSculptWireframe;

runTimeCommand
	-ann "Enable Portal Light Filter on Selected Area Lights"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `listRelatives -f -s`;\nfor ($each in $mySel)\n    setAttr ($each +\".aiUserOptions\") -type \"string\" \"declare portal constant BOOL portal true\";\n    \ninViewMessage -pos topCenter -msg \"Portal Light On\" -fade;")
	da_AiPortalLight;

runTimeCommand
	-ann "Disable Portal Light Filter on Selected Area Lights"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `listRelatives -f -s`;\nfor ($each in $mySel)\n    setAttr ($each +\".aiUserOptions\") -type \"string\" \"declare portal constant BOOL portal false\";\n\ninViewMessage -pos topCenter -msg \"Portal Light Off\" -fade;")
	da_AiNoPortalLight;

runTimeCommand
	-ann "Connect Selected Mesh as nCloth Input Mesh"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("string $myMesh[] = `ls -sl -ni -typ \"mesh\"`;\nstring $mynCloth[] = `ls -sl -ni -typ \"nCloth\"`;\n\nconnectAttr -f ($myMesh[0] + \".worldMesh\") ($mynCloth[0] + \".inputMesh\");\nconnectAttr -f ($myMesh[0] + \".worldMesh\") ($mynCloth[0] + \".restShapeMesh\");")
	da_ClothInputMesh;

runTimeCommand
	-ann "Create nCloth as Deformer by Using an Attract Mesh"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("string $attractMesh[] = `ls -sl -ni -typ \"transform\"`;\nduplicate;\nstring $restMesh[] = `ls -sl`;\nduplicate;\nstring $nClothMesh[] = `ls -sl`;\ndoCreateNCloth 0;\nstring $nClothShape[] = `ls -sl`;\n\nsetAttr ($nClothShape[0] +\".inputMeshAttract\") 1;\nsetAttr ($nClothShape[0] +\".selfCollideWidthScale\") .24;\n\nconnectAttr -f ($attractMesh[0] + \".worldMesh\") ($nClothShape[0] + \".inputMesh\");\nconnectAttr -f ($restMesh[0] + \".worldMesh\") ($nClothShape[0] + \".restShapeMesh\");\nconnectAttr -f ($attractMesh[0] + \".outMesh\") ($restMesh[0] + \".inMesh\");\n\nselect $attractMesh[0];\nhide $attractMesh[0];\nselect $attractMesh[0];\nrename ( $attractMesh[0] + \"_attract1\" );\n\nselect $restMesh[0];\nhide $restMesh[0];\nselect $restMesh[0];\nrename ( $restMesh[0] + \"_rest1\" );\n\nselect $nClothMesh[0];\nrename ( $nClothMesh[0] + \"_nCloth1\" );")
	da_ClothAsDeformer;

runTimeCommand
	-ann "Copy Selection in Temp Variable"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $May9_Clipboard[] = `ls -sl`;\ninViewMessage -pos topCenter -msg \"Selection Copied\" -fade;")
	da_CopySelection;

runTimeCommand
	-ann "Paste Selection from Temp Variable"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("select $May9_Clipboard;\ninViewMessage -pos topCenter -msg \"Selection Pasted\" -fade;")
	da_PasteSelection;

runTimeCommand
	-ann "Toggle Wireframe when Paint Skin"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $currentTool = `currentCtx`;\nint $wireframeCheck = `artAttrSkinPaintCtx -q -showactive $currentTool`;\n\nif ($wireframeCheck == 1){\n\tartAttrSkinPaintCtx -e -showactive 0 $currentTool;\n}else{\n\tartAttrSkinPaintCtx -e -showactive 1 $currentTool;\n}")
	da_ToggleSkinWireframe;

runTimeCommand
	-ann "Enable Plane"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".usePlane\") 1;\n}\ninViewMessage -pos topCenter -msg \"Nucleus Plane Enable\" -fade;")
	da_NucleusPlaneOn;

runTimeCommand
	-ann "Disable Plane"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".usePlane\") 0;\n}\ninViewMessage -pos topCenter -msg \"Nucleus Plane Disable\" -fade;")
	da_NucleusPlaneOff;

runTimeCommand
	-ann "Enable High Precision"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\nsetAttr ($each +\".subSteps\") 32;\nsetAttr ($each +\".maxCollisionIterations\") 24;\n}\ninViewMessage -pos topCenter -msg \"Nucleus High Precision Enable\" -fade;")
	da_NucleusHqOn;

runTimeCommand
	-ann "Disable High Precision"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\nsetAttr ($each +\".subSteps\") 3;\nsetAttr ($each +\".maxCollisionIterations\") 4;\n}\ninViewMessage -pos topCenter -msg \"Nucleus High Precision Disable\" -fade;")
	da_NucleusHqOff;

runTimeCommand
	-ann "Enable Gravity"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".gravityDirectionY\") -1;\n}\ninViewMessage -pos topCenter -msg \"Nucleus Gravity Enable\" -fade;")
	da_NucleusGravityOn;

runTimeCommand
	-ann "Disable Gravity"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".gravityDirectionY\") 0;\n}\ninViewMessage -pos topCenter -msg \"Nucleus Gravity Disable\" -fade;")
	da_NucleusGravityOff;

runTimeCommand
	-ann "Connect Poly Create Node to Mesh"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $createConnect[] = `ls -sl`;\nint $numObj = size($createConnect); \nfor($i=1; $i<$numObj; $i++){\n\tconnectAttr -f ($createConnect[0] + \".output\") ($createConnect[$i] + \".inMesh\");\n}")
	da_ConnectCereation;

runTimeCommand
	-ann "Create Ai LightPortal"
	-cat "Custom Scripts.May9_Next.Render"
	-cl "python"
	-c ("import mtoa.ui.arnoldmenu as arnoldmenu; arnoldmenu.doCreateLightPortal()")
	da_AiLightPortal;

runTimeCommand
	-ann "Toggle Playback Animation"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("play -state (!`play -q -state`);")
	da_TogglePlayback;

runTimeCommand
	-ann "Toggle Modeling Toolkit"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`workspaceControl -q -r NEXDockControl`){\n    if(!`isChannelBoxVisible`){\n        setChannelBoxVisible(1);\n    }else{\n        raiseChannelBox;\n    }\n    }else{\n        da_ModelingToolkit;\n    }")
	da_ToggleModelingTool;

runTimeCommand
	-ann "Mirror Cut on X Plane"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl -tr`;\nhyperShade -smn \"\";\nstring $objShade[] = `ls -sl -mat`;\n\nselect -r $mySel[0];\npolyMirrorCut 1 1 0.001;\nstring $cuttingPlane[] = `ls -sl`;\n\nstring $myPlane[] = `ls -sl -dag -leaf`;\n\nfor ($each_Py in $myPlane)\n{\n\tsetAttr ($each_Py + \".overrideEnabled\") 1 ;\n\tsetAttr ($each_Py + \".overrideRGBColors\") 1 ;\n\tsetAttr ($each_Py + \".overrideColorRGB\") 0.672 0.074 0.074;\n}\n\nstring $get[] = `listConnections -d on`;\nselect -add $get;\nstring $nodes[] = `listHistory  -pdo true -f true`;\nstring $List[] = stringArrayRemoveDuplicates($nodes);\nint $i;\nfor ($i=0; $i < size($List); $i++ ) \n{ \nif ( gmatch($List[$i], \"polyMergeVert*\")) \n\tselect -r $List[$i];\n}\n\nstring $getShape[] = `listConnections -s on`;\nselect -r $getShape[0];\n\nhyperShade -a $objShade;\nselect -r $cuttingPlane;\nMoveTool; ")
	da_MirrorCutX;

runTimeCommand
	-ann "Mirror Cut on Y Plane"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl -tr`;\nhyperShade -smn \"\";\nstring $objShade[] = `ls -sl -mat`;\n\nselect -r $mySel[0];\npolyMirrorCut 2 1 0.001;\nstring $cuttingPlane[] = `ls -sl`;\n\nstring $myPlane[] = `ls -sl -dag -leaf`;\n\nfor ($each_Py in $myPlane)\n{\n\tsetAttr ($each_Py + \".overrideEnabled\") 1 ;\n\tsetAttr ($each_Py + \".overrideRGBColors\") 1 ;\n\tsetAttr ($each_Py + \".overrideColorRGB\") 0.672 0.074 0.074;\n}\n\nstring $get[] = `listConnections -d on`;\nselect -add $get;\nstring $nodes[] = `listHistory  -pdo true -f true`;\nstring $List[] = stringArrayRemoveDuplicates($nodes);\nint $i;\nfor ($i=0; $i < size($List); $i++ ) \n{ \nif ( gmatch($List[$i], \"polyMergeVert*\")) \n\tselect -r $List[$i];\n}\n\nstring $getShape[] = `listConnections -s on`;\nselect -r $getShape[0];\n\nhyperShade -a $objShade;\nselect -r $cuttingPlane;\nMoveTool; ")
	da_MirrorCutY;

runTimeCommand
	-ann "Mirror Cut on X Plane"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl -tr`;\nhyperShade -smn \"\";\nstring $objShade[] = `ls -sl -mat`;\n\nselect -r $mySel[0];\npolyMirrorCut 0 1 0.001;\nstring $cuttingPlane[] = `ls -sl`;\n\nstring $myPlane[] = `ls -sl -dag -leaf`;\n\nfor ($each_Py in $myPlane)\n{\n\tsetAttr ($each_Py + \".overrideEnabled\") 1 ;\n\tsetAttr ($each_Py + \".overrideRGBColors\") 1 ;\n\tsetAttr ($each_Py + \".overrideColorRGB\") 0.672 0.074 0.074;\n}\n\nstring $get[] = `listConnections -d on`;\nselect -add $get;\nstring $nodes[] = `listHistory  -pdo true -f true`;\nstring $List[] = stringArrayRemoveDuplicates($nodes);\nint $i;\nfor ($i=0; $i < size($List); $i++ ) \n{ \nif ( gmatch($List[$i], \"polyMergeVert*\")) \n\tselect -r $List[$i];\n}\n\nstring $getShape[] = `listConnections -s on`;\nselect -r $getShape[0];\n\nhyperShade -a $objShade;\nselect -r $cuttingPlane;\nMoveTool; ")
	da_MirrorCutZ;

runTimeCommand
	-ann "Mirror Cut on Negative X Plane"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl -tr`;\nhyperShade -smn \"\";\nstring $objShade[] = `ls -sl -mat`;\n\nselect -r $mySel[0];\npolyMirrorCut 0 1 0.001;\nstring $mirrorCutMirrors[] = `ls -sl`; \nsetAttr ($mirrorCutMirrors[0] + \".rotateY\") -90; \nstring $cuttingPlane[] = `ls -sl`;\n\nstring $myPlane[] = `ls -sl -dag -leaf`;\n\nfor ($each_Py in $myPlane)\n{\n\tsetAttr ($each_Py + \".overrideEnabled\") 1 ;\n\tsetAttr ($each_Py + \".overrideRGBColors\") 1 ;\n\tsetAttr ($each_Py + \".overrideColorRGB\") 0.672 0.074 0.074;\n}\n\nstring $get[] = `listConnections -d on`;\nselect -add $get;\nstring $nodes[] = `listHistory  -pdo true -f true`;\nstring $List[] = stringArrayRemoveDuplicates($nodes);\nint $i;\nfor ($i=0; $i < size($List); $i++ ) \n{ \nif ( gmatch($List[$i], \"polyMergeVert*\")) \n\tselect -r $List[$i];\n}\n\nstring $getShape[] = `listConnections -s on`;\nselect -r $getShape[0];\n\nhyperShade -a $objShade;\nselect -r $cuttingPlane;\nMoveTool; ")
	da_MirrorCutXNeg;

runTimeCommand
	-ann "Mirror Cut on Negative Y Plane"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl -tr`;\nhyperShade -smn \"\";\nstring $objShade[] = `ls -sl -mat`;\n\nselect -r $mySel[0];\npolyMirrorCut 0 1 0.001;\nstring $mirrorCutMirrors[] = `ls -sl`; \nsetAttr ($mirrorCutMirrors[0] + \".rotateX\") 90; \nstring $cuttingPlane[] = `ls -sl`;\n\nstring $myPlane[] = `ls -sl -dag -leaf`;\n\nfor ($each_Py in $myPlane)\n{\n\tsetAttr ($each_Py + \".overrideEnabled\") 1 ;\n\tsetAttr ($each_Py + \".overrideRGBColors\") 1 ;\n\tsetAttr ($each_Py + \".overrideColorRGB\") 0.672 0.074 0.074;\n}\n\nstring $get[] = `listConnections -d on`;\nselect -add $get;\nstring $nodes[] = `listHistory  -pdo true -f true`;\nstring $List[] = stringArrayRemoveDuplicates($nodes);\nint $i;\nfor ($i=0; $i < size($List); $i++ ) \n{ \nif ( gmatch($List[$i], \"polyMergeVert*\")) \n\tselect -r $List[$i];\n}\n\nstring $getShape[] = `listConnections -s on`;\nselect -r $getShape[0];\n\nhyperShade -a $objShade;\nselect -r $cuttingPlane;\nMoveTool; ")
	da_MirrorCutYNeg;

runTimeCommand
	-ann "Mirror Cut on Negative Z Plane"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl -tr`;\nhyperShade -smn \"\";\nstring $objShade[] = `ls -sl -mat`;\n\nselect -r $mySel[0];\npolyMirrorCut 0 1 0.001;\nstring $mirrorCutMirrors[] = `ls -sl`; \nsetAttr ($mirrorCutMirrors[0] + \".rotateY\") -180; \nstring $cuttingPlane[] = `ls -sl`;\n\nstring $myPlane[] = `ls -sl -dag -leaf`;\n\nfor ($each_Py in $myPlane)\n{\n\tsetAttr ($each_Py + \".overrideEnabled\") 1 ;\n\tsetAttr ($each_Py + \".overrideRGBColors\") 1 ;\n\tsetAttr ($each_Py + \".overrideColorRGB\") 0.672 0.074 0.074;\n}\n\nstring $get[] = `listConnections -d on`;\nselect -add $get;\nstring $nodes[] = `listHistory  -pdo true -f true`;\nstring $List[] = stringArrayRemoveDuplicates($nodes);\nint $i;\nfor ($i=0; $i < size($List); $i++ ) \n{ \nif ( gmatch($List[$i], \"polyMergeVert*\")) \n\tselect -r $List[$i];\n}\n\nstring $getShape[] = `listConnections -s on`;\nselect -r $getShape[0];\n\nhyperShade -a $objShade;\nselect -r $cuttingPlane;\nMoveTool; ")
	da_MirrorCutZNeg;

runTimeCommand
	-ann "Boolean Full Intersect"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl`;\nif ( `size($mySel)` == 2 ){\n    string $myBackup[] = `ls -sl`;\n    duplicate;\n    string $mySel[] = `ls -sl`;\n    duplicate;\n    string $myDuplicateSel[] = `ls -sl`;\n    select $mySel;\n    polyCBoolOp -op 2 -ch 1 -preserveColor 0 -classification 1;\n    delete -ch;\n    CenterPivot;\n    string $firstBool[] = `ls -sl`;\n    select $myDuplicateSel;\n    polyCBoolOp -op 3 -ch 1 -preserveColor 0 -classification 1;\n    delete -ch;\n    CenterPivot;\n    string $secondBool[] = `ls -sl`;\n    select -clear;\n    select $myBackup;\n    Group;\n    rename \"intersectBackup1\";\n    hide;\n    select $firstBool;\n    select -add $secondBool;\n    string $boolPiece[] = `ls -sl`;\n    for($x=0;$x<size($boolPiece);$x++)\n        rename $boolPiece[$x] (\"boolPiece1\");\n}\nelse{\n    string $myResult = `confirmDialog -title \"Confirm\" -message \"Only the first selected object can have multiple intersections, continue?\" \n\t-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n\t-cancelButton \"No\" -dismissString \"No\"`;\n\n\tif ($myResult == \"Yes\") {\n        string $myBackup[] = `ls -sl`;\n        duplicate;\n        string $mySel[] = `ls -sl`;\n        duplicate;\n        string $myDuplicateSel[] = `ls -sl`;\n        select $mySel;\n        polyCBoolOp -op 2 -ch 1 -preserveColor 0 -classification 1;\n        delete -ch;\n        CenterPivot;\n        string $firstBool[] = `ls -sl`;\n        select $myDuplicateSel;\n        polyCBoolOp -op 3 -ch 1 -preserveColor 0 -classification 1;\n        CenterPivot;\n        string $secondBool[] = `ls -sl`;\n        select -clear;\n        select $secondBool;\n        performPolyShellSeparate;\n        delete -ch;\n        string $secondBool[] = `ls -sl`;\n        CenterPivot;\n        pickWalk -d up;\n        string $tempGRP[] = `ls -sl`;\n        select $secondBool;\n        Unparent;\n        select $tempGRP;\n        delete;\n        select $myBackup;\n        Group;\n        rename \"intersectBackup1\";\n        hide;\n        select $firstBool;\n        select -add $secondBool;\n        string $boolPiece[] = `ls -sl`;\n        for($x=0;$x<size($boolPiece);$x++)\n            rename $boolPiece[$x] (\"boolPiece1\");\n\t}\n}")
	da_BooleanFullIntersect;

runTimeCommand
	-ann "Cut a Mesh by Using a Poly Plane"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl`;\nif ( `size($mySel)` == 2 ){\n    string $myResult = `confirmDialog -title \"Select the Plane Cut operation\" -message \"Please check if you have select first the geometry then the cut plane. Did you want single o double cut plane?\" \n\t-button \"Single\" -button \"Double\" -button \"Cancel\" -cancelButton \"Cancel\" -defaultButton \"Cancel\"`;\n\tif ($myResult == \"Single\") {\n        string $myBakup[] = `ls -sl`;\n        duplicate;\n        string $mySel[] = `ls -sl`;\n        select $myBakup;\n        Group;\n        rename \"singlePlaneBackup1\";\n        string $myBakupGRP[] = `ls -sl`;\n        select $mySel;\n        Group;\n        rename \"singlePlaneCut1\";\n        select $mySel[0];\n        duplicate;\n        string $myDuplicateSel[] = `ls -sl`;\n        select $mySel;\n        PolygonBooleanDifference;\n        string $firstCut[] = `ls -sl`;\n        da_wireframeTemplateA;\n        select $mySel[1];\n        pickWalk -d down;\n        string $mySelShape[] = `listRelatives -f -s`;\n        string $mySelShapeUUID[] = `ls -uuid $mySelShape[0]`;\n        select -add $myDuplicateSel;\n        PolygonBooleanIntersection;\n        string $secondtCut[] = `ls -sl`;\n        da_wireframeTemplateB;\n        select $myBakup[1];\n        string $myBakupShape[] = `listRelatives -f -s`;\n        select `ls $mySelShapeUUID[0]`;\n        string $myInitialSelShape[] = `ls -sl -l`;\n        \n        connectAttr -f ($myBakupShape[0] + \".outMesh\") ($myInitialSelShape[0] + \".inMesh\");\n        \n        string $myCutPlane[] = `listRelatives -p $myInitialSelShape`;\n        select $myCutPlane;\n        da_ResetTweakPoint;\n        \n        select $myBakupGRP;\n        hide;\n        select $secondtCut;\n        move -r -os -y -.005;\n        select $firstCut;\n        move -r -os -y .005;\n        select -add $secondtCut;\n        string $cutPiece[] = `ls -sl`;\n        for($x=0;$x<size($cutPiece);$x++)\n            rename $cutPiece[$x] (\"cutPiece1\");\n        \n        select -clear;\n    }\n    if ($myResult == \"Double\") {\n        string $myBakup[] = `ls -sl`;\n        duplicate;\n        string $mySel[] = `ls -sl`;\n        select $myBakup;\n        Group;\n        rename \"doublePlaneBackup1\";\n        string $myBakupGRP[] = `ls -sl`;\n        select $mySel;\n        Group;\n        rename \"doublePlaneCut1\";\n        select $mySel;\n        duplicate;\n        string $myDuplicateSel[] = `ls -sl`;\n        select $mySel;\n        PolygonBooleanDifference;\n        string $firstCut[] = `ls -sl`;\n        da_wireframeTemplateA;\n        select $myDuplicateSel;\n        PolygonBooleanIntersection;\n        string $secondtCut[] = `ls -sl`;\n        da_wireframeTemplateA;\n        select $mySel[1];\n        pickWalk -d down;\n        string $mySelShape[] = `listRelatives -f -s`;\n        select $myDuplicateSel[1];\n        pickWalk -d down;\n        string $myDuplicateSellShape[] = `listRelatives -f -s`;\n        select $myBakup[1];\n        string $myBakupShape[] = `listRelatives -f -s`;\n        connectAttr -f ($myBakupShape[0] + \".outMesh\") ($mySelShape[0] + \".inMesh\");\n        connectAttr -f ($myBakupShape[0] + \".outMesh\") ($myDuplicateSellShape[0] + \".inMesh\");\n        \n        string $myCutPlane[] = `listRelatives -p $mySelShape`;\n        string $myDuplicateCutPlane[] = `listRelatives -p $myDuplicateSellShape`;\n        \n        select $myCutPlane;\n        move -r -os -y .0025;\n        select $myDuplicateCutPlane;\n        move -r -os -y -.0025;\n        select -add $myCutPlane;\n        da_ResetTweakPoint;\n        \n        select $myBakupGRP;\n        hide;\n        select $firstCut;\n        select -add $secondtCut;\n        string $cutPiece[] = `ls -sl`;\n        for($x=0;$x<size($cutPiece);$x++)\n            rename $cutPiece[$x] (\"cutPiece1\");\n        \n        select -clear;\n    }\n}else{\n    string $myResult = `confirmDialog -title \"Warning\" -message \"Please select only two meshes, first the geometry then the cut plane and retry.\" \n\t-button \"Ok\" -defaultButton \"Ok\" \n\t-cancelButton \"Ok\" -dismissString \"Ok\"`;\n}")
	da_PlaneCutter;

runTimeCommand
	-ann "Convert NURBS to Mesh"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl`;\nstring $mySelShape[] = `listRelatives -f -s`;\nfor ($each in $mySel)\n    nurbsToPoly -mnd 1  -ch 1 -f 3 -pt 1 -pc 200 -chr 0.9 -ft 0.01 -mel 0.001 -d 0.1 -ut 1 -un 3 -vt 1 -vn 3 -uch 0 -ucr 0 -cht 0.2 -es 0 -ntr 0 -mrt 0 -uss 1 $each;\nselect $mySelShape;\nstring $myTassellate[] = `listConnections -type \"nurbsTessellate\"`;\nselect $myTassellate;\nstring $myPolyShape[] = `listConnections -type \"mesh\"`;\nselect $myPolyShape;\nsetDisplaySmoothness 3;\nstring $myMesh[] = `ls -sl`;\nselect $mySel;\nhide;\nselect $myMesh;\nCenterPivot;")
	da_NurbsToMesh;

runTimeCommand
	-ann "Enable Fluid Auto Resize"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".autoResize\") 1;\n}\ninViewMessage -pos topCenter -msg \"Fluid Auto Resize Enable\" -fade;")
	da_FluidAutoResizeOn;

runTimeCommand
	-ann "Disable Fluid Auto Resize"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel){\nsetAttr ($each +\".autoResize\") 0;\n}\ninViewMessage -pos topCenter -msg \"Fluid Auto Resize Disable\" -fade;")
	da_FluidAutoResizeOff;

runTimeCommand
	-ann "Connect Nurbs Create Node to Shape"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $createConnect[] = `ls -sl`;\nint $numObj = size($createConnect); \nfor($i=1; $i<$numObj; $i++){\n\tconnectAttr -f ($createConnect[0] + \".outputSurface\") ($createConnect[$i] + \".create\");\n}")
	da_NurbsConnectCreation;

runTimeCommand
	-ann "Connect Curve Create Node to Shape"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $createConnect[] = `ls -sl`;\nint $numObj = size($createConnect); \nfor($i=1; $i<$numObj; $i++){\n\tconnectAttr -f ($createConnect[0] + \".outputCurve\") ($createConnect[$i] + \".create\");\n}")
	da_CurveConnectCreation;

runTimeCommand
	-ann "Connect Nurbs Shapes"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $createConnect[] = `ls -sl`;\nint $numObj = size($createConnect); \nfor($i=1; $i<$numObj; $i++){\n    connectAttr -f ($createConnect[0] + \".worldSpace\") ($createConnect[$i] + \".create\");\n}")
	da_ConnectNurbsShapes;

runTimeCommand
	-ann "Toggle Channel Box"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`workspaceControl -q -vis ChannelBoxLayerEditor` == 1){\n    if(`workspaceControl -q -r ChannelBoxLayerEditor` == 0)\n    workspaceControl -e -clp 0 ChannelBoxLayerEditor;\n    else\n        if(`workspaceControl -q -clp ChannelBoxLayerEditor` == 0)\n            workspaceControl -e -clp 1 ChannelBoxLayerEditor;\n        else\n            workspaceControl -e -clp 0 ChannelBoxLayerEditor;\n}else{\n    setChannelsLayersVisible(true); raiseChannelsLayers;\n}")
	da_ToggleChannelLayer;

runTimeCommand
	-ann "Toggle Modeling Tool Kit"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`workspaceControl -q -vis NEXDockControl` == 1){\n    if(`workspaceControl -q -r NEXDockControl` == 0)\n    workspaceControl -e -clp 0 NEXDockControl;\n    else\n        if(`workspaceControl -q -clp NEXDockControl` == 0)\n            workspaceControl -e -clp 1 NEXDockControl;\n        else\n            workspaceControl -e -clp 0 NEXDockControl;\n}else{\n    showModelingToolkit;\n}")
	da_ToggleMTK;

runTimeCommand
	-ann "Toggle Attribute Editor"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`workspaceControl -q -vis AttributeEditor` == 1){\n    if(`workspaceControl -q -r AttributeEditor` == 0)\n    workspaceControl -e -clp 0 AttributeEditor;\n    else\n        if(`workspaceControl -q -clp AttributeEditor` == 0)\n            workspaceControl -e -clp 1 AttributeEditor;\n        else\n            workspaceControl -e -clp 0 AttributeEditor;\n}else{\n    AttributeEditor;\n}")
	da_ToggleAttribute;

runTimeCommand
	-ann "Toggle Outline"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`workspaceControl -q -vis Outliner` == 1){\n    if(`workspaceControl -q -r Outliner` == 0)\n    workspaceControl -e -clp 0 Outliner;\n    else\n        if(`workspaceControl -q -clp Outliner` == 0)\n            workspaceControl -e -clp 1 Outliner;\n        else\n            workspaceControl -e -clp 0 Outliner;   \n}else{\n    OutlinerWindow;\n}")
	da_ToggleOutline;

runTimeCommand
	-ann "Toggle Tool Settings"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`workspaceControl -q -vis da_ToolSettings` == 1){\n    if(`workspaceControl -q -r da_ToolSettings` == 0)\n    workspaceControl -e -clp 0 da_ToolSettings;\n    else\n        if(`workspaceControl -q -clp da_ToolSettings` == 0)\n            workspaceControl -e -clp 1 da_ToolSettings;\n        else\n            workspaceControl -e -clp 0 da_ToolSettings;   \n}else{\n    ToolSettingsWindow;\n}")
	da_ToggleToolSetting;

runTimeCommand
	-ann "Disable Slide on Selected Constraint"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".connectionUpdate\") 0;\nsetAttr ($each +\".strength\") 20;\nsetAttr ($each +\".tangentStrength\") 10;\nsetAttr ($each +\".friction\") 0;\nsetAttr ($each +\".localCollide\") 0;\n}\ninViewMessage -pos topCenter -msg \"Disable Slide on Selected Constraint\" -fade;")
	da_SlideConstraintOff;

runTimeCommand
	-ann "Enable Slide on Selected Constraint"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n{\nsetAttr ($each +\".connectionUpdate\") 1;\nsetAttr ($each +\".strength\") 0.02;\nsetAttr ($each +\".tangentStrength\") 0.2;\nsetAttr ($each +\".friction\") 0.1;\nsetAttr ($each +\".localCollide\") 1;\n}\ninViewMessage -pos topCenter -msg \"Enable Slide on Selected Constraint\" -fade;")
	da_SlideConstraintOn;

runTimeCommand
	-ann "Enable Hair Self Collision"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myHairSystem[] = `listConnections -s 0 -d 1 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".selfCollide\") 1;\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    setAttr ($objectShape[0] + \".selfCollide\") 1;\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".selfCollide\") 1;\n    select $mySel;\n}")
	da_nHairSelfCollideOn;

runTimeCommand
	-ann "Disable nHair Self Collision"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myHairSystem[] = `listConnections -s 0 -d 1 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".selfCollide\") 0;\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    setAttr ($objectShape[0] + \".selfCollide\") 0;\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".selfCollide\") 0;\n    select $mySel;\n}")
	da_nHairSelfCollideOff;

runTimeCommand
	-ann "Disable nHair Collision"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myHairSystem[] = `listConnections -s 0 -d 1 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".collide\") 0;\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    setAttr ($objectShape[0] + \".collide\") 0;\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".collide\") 0;\n    select $mySel;\n}")
	da_nHairColllideOff;

runTimeCommand
	-ann "Enable nHair Collision"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myHairSystem[] = `listConnections -s 0 -d 1 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".collide\") 1;\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    setAttr ($objectShape[0] + \".collide\") 1;\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    setAttr ($myHairSystem[0] + \".collide\") 1;\n    select $mySel;\n}")
	da_nHairCollideOn;

runTimeCommand
	-ann "Set nHair Point Lock to Tip"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\nstring $follicleCheck[] = `ls -sl -ni -typ \"follicle\"`;\nstring $hairSystemCheck[] = `ls -sl -ni -typ \"hairSystem\"`;\nstring $pfxHairCheck[] = `ls -sl -ni -typ \"pfxHair\"`;\nstring $curveCheck[] = `ls -sl -ni -typ \"nurbsCurve\"`;\n\n//if is selected the follicle\nif ($follicleCheck[0] != \"\"){ \n    string $myFollcie[] = `ls -sl`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 2;\n    }\n    select $mySel;\n}\n//if is selected the hair system\nif ($hairSystemCheck[0] != \"\"){ \n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 2;\n    }\n    select $mySel;\n}\n//if is selected the pfxHair\nif ($pfxHairCheck[0] != \"\"){\n    string $myHairSystem[] = `listConnections -s 1 -d 0 -sh 1 -t \"hairSystem\"`;\n    select $myHairSystem;\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 2;\n    }\n    select $mySel;\n}\n//if is selected the nurbsCurve\nif ($curveCheck[0] != \"\"){\n    string $myFollcie[] = `listConnections -s 1 -d 0 -sh 1 -t \"follicle\"`;\n    \n    for ($each in $myFollcie){\n        setAttr ($each + \".pointLock\") 2;\n    }\n    select $mySel;\n}")
	da_nHairLockTip;

runTimeCommand
	-ann "Batch Skin Transfert by UV"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $select[] = `ls -sl`;\nint $numObj = size($select); \nfor($i=1; $i<$numObj; $i++){\n    select $select[0];\n    select -add $select[$i];\n\tcopySkinWeights  -noMirror -surfaceAssociation closestPoint -uvSpace map1 map1 -influenceAssociation closestJoint;\n}")
	da_BatchSkinTransfertUV;

runTimeCommand
	-ann "Batch Skin Transfert by Closest Point"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $select[] = `ls -sl`;\nint $numObj = size($select); \nfor($i=1; $i<$numObj; $i++){\n    select $select[0];\n    select -add $select[$i];\n\tcopySkinWeights  -noMirror -surfaceAssociation closestPoint -influenceAssociation closestJoint;\n}")
	da_BatchSkinTransfertCP;

runTimeCommand
	-ann "Batch Skin Transfert by Ray Cast"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $select[] = `ls -sl`;\nint $numObj = size($select); \nfor($i=1; $i<$numObj; $i++){\n    select $select[0];\n    select -add $select[$i];\n\tcopySkinWeights  -noMirror -surfaceAssociation rayCast -influenceAssociation closestJoint;\n}")
	da_BatchSkinTransfertRC;

runTimeCommand
	-ann "Batch Skin Transfert by Closest Component"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $select[] = `ls -sl`;\nint $numObj = size($select); \nfor($i=1; $i<$numObj; $i++){\n    select $select[0];\n    select -add $select[$i];\n\tcopySkinWeights  -noMirror -surfaceAssociation closestComponent -influenceAssociation closestJoint;\n}")
	da_BatchSkinTransfertCC;

runTimeCommand
	-ann "Enable Poly Shade"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `listRelatives -f -s`; \nfor ($each in $mySel){\n    setAttr ($each + \".primaryVisibility\") 1;\n    setAttr ($each + \".overrideEnabled\") 0;\n    setAttr ($each + \".overrideShading\") 1;\n    setAttr ($each + \".castsShadows\") 1;\n    setAttr ($each + \".receiveShadows\") 1;\n    setAttr ($each + \".motionBlur\") 1;\n    setAttr ($each + \".smoothShading\") 1;\n    setAttr ($each + \".visibleInReflections\") 1;\n    setAttr ($each + \".visibleInRefractions\") 1;\n}")
	da_PolyShade;

runTimeCommand
	-ann "Disable Poly Shade"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `listRelatives -f -s`; \nfor ($each in $mySel){\n    setAttr ($each + \".primaryVisibility\") 0;\n    setAttr ($each + \".overrideEnabled\") 1;\n    setAttr ($each + \".overrideShading\") 0;\n    setAttr ($each + \".castsShadows\") 0;\n    setAttr ($each + \".receiveShadows\") 0;\n    setAttr ($each + \".motionBlur\") 0;\n    setAttr ($each + \".smoothShading\") 0;\n    setAttr ($each + \".visibleInReflections\") 0;\n    setAttr ($each + \".visibleInRefractions\") 0;\n}")
	da_PolyNoShade;

runTimeCommand
	-ann "Toggle UV Borders Based on Panel"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("int $borders[] = `polyOptions -q -displayMapBorder`;\nfloat $borderWidth[] = `optionVar -q displayPolyBorderEdgeSize`;\npolyOptions -displayMapBorder (!$borders[0]) -sizeBorder $borderWidth[1];")
	da_ToggleUVBorders;

runTimeCommand
	-ann "Toggle resolution gate"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $currPanel = `getPanel -up`;\nstring $currCam = `modelEditor -q -cam $currPanel`;\nstring $ResolutionGateState = `camera -q -dr $currCam`;\n\nif ($ResolutionGateState == 0)\n    camera -e -dr on -ovr 1.3 $currCam;\nelse\n    camera -e -dr off -ovr 1.0 $currCam;")
	da_ToggleResolutionGate;

runTimeCommand
	-ann "Camera Bookmark"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $panel = `getPanel -wf`;\n$camera = `modelEditor -q -camera $panel`;\ncameraBookmarkEditor $camera;")
	da_CameraBookmark;

runTimeCommand
	-ann "Reset Position and Orientation of Pivot"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $objs[] = `ls -sl -type transform -type geometryShape`;\nif (size($objs) > 0) {\n\txform -cp;\n}\nmanipPivot -rp -ro; ")
	da_ResetPivot;

runTimeCommand
	-ann "Enable Medium Precision for Nucleus"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel){\nsetAttr ($each +\".subSteps\") 18;\nsetAttr ($each +\".maxCollisionIterations\") 4;\n}\ninViewMessage -pos topCenter -msg \"Nucleus Medium Precision Enable\" -fade;")
	da_NucleusMedium;

runTimeCommand
	-ann "Force Nucleus in Parallel Mode"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("evaluator -en off -name dynamics -c \"disablingNodes=unsupported\";\nevaluator -en off -name dynamics -c \"handledNodes=dynamics\";\nevaluator -en off -name dynamics -c \"action=evaluate\";\ninViewMessage -pos topCenter -msg \"Nucleus Override ON, this Disable Maya Fluids\" -fade;\n")
	da_NucleusParallelOn;

runTimeCommand
	-ann "Disable Nucleus in Parallel Mode"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("evaluator -en on -name dynamics -c \"disablingNodes=legacy2016\";\nevaluator -en on -name dynamics -c \"handledNodes=none\";\nevaluator -en on -name dynamics -c \"action=none\";\ninViewMessage -pos topCenter -msg \"Nucleus Override OFF\" -fade;")
	da_NucleusParallelOff;

runTimeCommand
	-ann "Distribuite a Geomentry on Curve"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $curveSel[] = `filterExpand -sm 9`;\nstring $polySel[] = `filterExpand -sm 12`;\n\nselect $polySel[0];\n$myMash = `MASHnewNetwork(\"MASH#\")`;\nstring $myMashDistribute[] = `listConnections -s 1 -d 0 -t \"MASH_Distribute\"`;\nsetAttr ($myMashDistribute[0] + \".amplitudeX\") 0;\n\n$myMashCurve = `createNode MASH_Curve`;\nconnectAttr -f ($myMashCurve + \".outputPoints\") ($myMash[0] + \".inputPoints\");\n\nselect $curveSel[0];\nstring $curveSelShape[] = `listRelatives -f -s`;\n\nconnectAttr -f ($curveSelShape[0] + \".worldSpace[0]\") ($myMashCurve + \".inCurves[0]\");\nconnectAttr -f ($myMashDistribute[0] + \".outputPoints\") ($myMashCurve + \".inputPoints\");\n\nsetAttr ($myMashCurve + \".timeSlide\") 0;\nsetAttr ($myMashCurve + \".parametricLength\") 1;\n\nselect $myMashDistribute[0];\nAttributeEditor;")
	da_CurveDistributionMash;

runTimeCommand
	-ann "Layout Single Perspective/Four View"
	-cat "Custom Scripts.May9_Next.System"
	-c ("if ($myLayout != 1){\n    //Get Current Camera\n    string $myCurPanel = `playblast -ae`;\n    string $myCurPane = `match \"[^|]*$\" $myCurPanel`;\n    string $myCurCam = `modelPanel -q -cam $myCurPane`;\n    \n    //Change Layout\n    setNamedPanelLayout \"daFourView\";\n    doSwitchPanes(1, {\"single\", $myCurPane});\n    inViewMessage -pos topCenter -msg \"Perspective/Four View layout\" -fade;\n    \n    //Switch back to Current Camera\n    lookThru $myCurPane $myCurCam;\n}else{\n    panePop;\n}\n\nint $myLayout = 1\n")
	da_LayoutPersp;

runTimeCommand
	-ann "Layout Node Editor"
	-cat "Custom Scripts.May9_Next.System"
	-c ("if ($myLayout != 2){\n    //Get Current Camera\n    string $myCurPanel = `playblast -ae`;\n    string $myCurPane = `match \"[^|]*$\" $myCurPanel`;\n    string $myCurCam = `modelPanel -q -cam $myCurPane`;\n    \n    //Change Layout\n    setNamedPanelLayout \"daNodeEditor\";\n    inViewMessage -pos topCenter -msg \"Node Editor layout\" -fade;\n    \n    //Switch back to Current Camera\n    lookThru $myCurPane $myCurCam;\n}else{\n    panePop;\n}\n\nint $myLayout = 2")
	da_LayoutNodeEditor;

runTimeCommand
	-ann "Layout UV TextureEditor"
	-cat "Custom Scripts.May9_Next.System"
	-c ("if ($myLayout != 3){\n    //Get Current Camera\n    string $myCurPanel = `playblast -ae`;\n    string $myCurPane = `match \"[^|]*$\" $myCurPanel`;\n    string $myCurCam = `modelPanel -q -cam $myCurPane`;\n    \n    //Change Layout\n    setNamedPanelLayout \"daUvEditor\";\n    \n    //Hide Texture\n    string $texWinName[] = `getPanel -sty polyTexturePlacementPanel`;\n    textureWindowToggleTextureImageOff( $texWinName[0], \"textureWindow\" );\n    txtWndUpdateEditor( $texWinName[0], \"textureWindow\", \"null\", 101 );\n    \n    inViewMessage -pos topCenter -msg \"UV Texture layout\" -fade;\n    \n    //Switch back to Current Camera\n    lookThru $myCurPane $myCurCam;\n}else{\n    panePop;\n}\n\nint $myLayout = 3")
	da_LayoutUvTextureEditor;

runTimeCommand
	-ann "Layout Graph Editor"
	-cat "Custom Scripts.May9_Next.System"
	-c ("if ($myLayout != 4){\n    //Get Current Camera\n    string $myCurPanel = `playblast -ae`;\n    string $myCurPane = `match \"[^|]*$\" $myCurPanel`;\n    string $myCurCam = `modelPanel -q -cam $myCurPane`;\n    \n    //Change Layout\n    setNamedPanelLayout \"daGraphEditor\";\n    inViewMessage -pos topCenter -msg \"Graph Editor\" -fade;\n    \n    //Switch back to Current Camera\n    lookThru $myCurPane $myCurCam;\n}else{\n    panePop;\n}\n\nint $myLayout = 4")
	da_LayoutGraphEditor;

runTimeCommand
	-ann "Layout Shape Editor"
	-cat "Custom Scripts.May9_Next.System"
	-c ("if ($myLayout != 5){\n    //Get Current Camera\n    string $myCurPanel = `playblast -ae`;\n    string $myCurPane = `match \"[^|]*$\" $myCurPanel`;\n    string $myCurCam = `modelPanel -q -cam $myCurPane`;\n    \n    //Change Layout\n    setNamedPanelLayout \"daShapeEditor\";\n    inViewMessage -pos topCenter -msg \"Shape/Pose layout\" -fade;\n    \n    //Switch back to Current Camera\n    lookThru $myCurPane $myCurCam;\n}else{\n    panePop;\n}\n\nint $myLayout = 5")
	da_LayoutShapeEditor;

runTimeCommand
	-ann "Layout Reference Editor"
	-cat "Custom Scripts.May9_Next.System"
	-c ("if ($myLayout != 6){\n    //Get Current Camera\n    string $myCurPanel = `playblast -ae`;\n    string $myCurPane = `match \"[^|]*$\" $myCurPanel`;\n    string $myCurCam = `modelPanel -q -cam $myCurPane`;\n    \n    //Change Layout\n    setNamedPanelLayout \"daReferenceEditor\";\n    inViewMessage -pos topCenter -msg \"Reference layout\" -fade;\n    \n    //Switch back to Current Camera\n    lookThru $myCurPane $myCurCam;\n}else{\n    panePop;\n}\n\nint $myLayout = 6")
	da_LayoutReferenceEditor;

runTimeCommand
	-ann "Layout Component Editor"
	-cat "Custom Scripts.May9_Next.System"
	-c ("if ($myLayout != 7){\n    //Get Current Camera\n    string $myCurPanel = `playblast -ae`;\n    string $myCurPane = `match \"[^|]*$\" $myCurPanel`;\n    string $myCurCam = `modelPanel -q -cam $myCurPane`;\n    \n    //Change Layout\n    setNamedPanelLayout \"daComponentEditor\";\n    inViewMessage -pos topCenter -msg \"Component layout\" -fade;\n    \n    //Switch back to Current Camera\n    lookThru $myCurPane $myCurCam;\n}else{\n    panePop;\n}\n\nint $myLayout = 7")
	da_LayoutComponentEditor;

runTimeCommand
	-ann "Layout Relationship Editor"
	-cat "Custom Scripts.May9_Next.System"
	-c ("if ($myLayout != 8){\n    //Get Current Camera\n    string $myCurPanel = `playblast -ae`;\n    string $myCurPane = `match \"[^|]*$\" $myCurPanel`;\n    string $myCurCam = `modelPanel -q -cam $myCurPane`;\n    \n    //Change Layout\n    setNamedPanelLayout \"daRelationshipEditor\";\n    inViewMessage -pos topCenter -msg \"Relationship layout\" -fade;\n    \n    //Switch back to Current Camera\n    lookThru $myCurPane $myCurCam;\n}else{\n    panePop;\n}\n\nint $myLayout = 8")
	da_LayoutRelationshipEditor;

runTimeCommand
	-ann "Layout Dynamic Relationship Editor"
	-cat "Custom Scripts.May9_Next.System"
	-c ("if ($myLayout != 9){\n    //Get Current Camera\n    string $myCurPanel = `playblast -ae`;\n    string $myCurPane = `match \"[^|]*$\" $myCurPanel`;\n    string $myCurCam = `modelPanel -q -cam $myCurPane`;\n    \n    //Change Layout\n    setNamedPanelLayout \"daDynamicRelationshipEditor\";\n    inViewMessage -pos topCenter -msg \"Dynamic Relationship layout\" -fade;\n    \n    //Switch back to Current Camera\n    lookThru $myCurPane $myCurCam;\n}else{\n    panePop;\n}\n\nint $myLayout = 9")
	da_LayoutDynamicRelationshipEditor;

runTimeCommand
	-ann "Layout Hypershade"
	-cat "Custom Scripts.May9_Next.System"
	-c ("if ($myLayout != 10){\n    //Get Current Camera\n    string $myCurPanel = `playblast -ae`;\n    string $myCurPane = `match \"[^|]*$\" $myCurPanel`;\n    string $myCurCam = `modelPanel -q -cam $myCurPane`;\n    \n    //Change Layout\n    setNamedPanelLayout \"daHyperShade\";\n    inViewMessage -pos topCenter -msg \"Hypershade layout\" -fade;\n    \n    //Switch back to Current Camera\n    lookThru $myCurPane $myCurCam;\n\n\tsetOutlinerVisible 0;\n\tda_ChannelBox;\n}else{\n    panePop;\n\tsetOutlinerVisible 0;\n\tda_ChannelBox;\n}\n\nint $myLayout = 10")
	da_LayoutHypershade;

runTimeCommand
	-ann "Enable Opaque for Selected Meshes"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `listRelatives -f -s`;\nfor ($each in $mySel)\n    setAttr ($each +\".aiOpaque\") 1;\n    \ninViewMessage -pos topCenter -msg \"Opaque On\" -fade;")
	da_AiOpaque;

runTimeCommand
	-ann "Enable Opaque for Selected Meshes"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `listRelatives -f -s`;\nfor ($each in $mySel)\n    setAttr ($each +\".aiOpaque\") 0;\n    \ninViewMessage -pos topCenter -msg \"Opaque Off\" -fade;")
	da_AiNoOpaque;

runTimeCommand
	-ann "Close All Opened Panel"
	-cat "Custom Scripts.May9_Next.System"
	-c ("updateWorkspacesList;\nworkspaceLayoutManager -reset;\n\ninViewMessage -pos topCenter -msg \"Current Workspace Resetted\" -fade;")
	da_CloseAllPanel;

runTimeCommand
	-ann "MASH Blend Deformer"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $mySel[] = `listRelatives -f -s`;\nselect $mySel[0];\nMASHaddBlendDeformer;\nstring $myBlendDeformer[] = `listConnections -s 1 -d 0 -t \"MASH_BlendDeformer\"`;\nconnectAttr -f ($mySel[1] + \".worldMesh\") ($myBlendDeformer[0] + \".blendMesh\");\nselect $myBlendDeformer;")
	da_MashBlendDeformer;

runTimeCommand
	-ann "About May9 Next Window"
	-cat "Custom Scripts.May9_Next.System"
	-c ("string $myResult = `confirmDialog -title \"About\" -message (\"\\nDavide Alidosi's \" +$may9Version+\"        \\n\"+$may9SecondLine+\"\") \n    -button \"Ok\" -defaultButton \"Ok\" \n\t-cancelButton \"Ok\" -dismissString \"Ok\"`;")
	da_AboutMay9;

runTimeCommand
	-ann "Enable Prossimity on Controllers"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myControlTag[] = `listConnections -s 0 -d 1 -t \"controller\"`;\nint $numObj = size($myControlTag); \nfor($i=0; $i<$numObj; $i++){\n    setAttr ($myControlTag[$i] + \".visibilityMode\") 2;\n}")
	da_ControllerProssimity;

runTimeCommand
	-ann "Disable Prossimity on Controllers"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myControlTag[] = `listConnections -s 0 -d 1 -t \"controller\"`;\nint $numObj = size($myControlTag); \nfor($i=0; $i<$numObj; $i++){\n    setAttr ($myControlTag[$i] + \".visibilityMode\") 0;\n}")
	da_ControllerNoProssimity;

runTimeCommand
	-ann "Convert Edge to Curve in UV Editor"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl -o`;\nCreateCurveFromPoly;\nselect $mySel[0];\nsetSelectMode components Components; selectType -smp 0 -sme 1 -smf 0 -smu 0 -pv 0 -pe 1 -pf 0 -puv 0")
	da_ConvertUvEdgeToCurve;

runTimeCommand
	-ann "Select Edge Ring and Loop"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("SelectEdgeRingSp;\nSelectEdgeLoopSp")
	da_EdgeRingAndLoop;

runTimeCommand
	-ann "Select Current Component Shader"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("hyperShade -smn;\nda_SelectObjectMaterial")
	da_SelectComponentShader;

runTimeCommand
	-ann "Create or Assig Node to a Selection"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("catchQuiet (`AssignNewMaterial`);\nif (`window -q -ex \"assignNewMaterialWindow\"` == 0 || `window -q -vis \"assignNewMaterialWindow\"` == 0)\n    createNodeWindow;")
	da_CreateAssigNode;

runTimeCommand
	-ann "Edit And Frame Shader from Outliner"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("if ($myLayout != 10){\n    da_LayoutHypershade;\n    AttributeEditor;\n    hyperShadePanelGraphCommand(\"hyperShadePanel1\", \"showUpAndDownstream\");\n\n    inViewMessage -pos topCenter -msg \"Edit Shaders\" -fade;\n}else{\n\tAttributeEditor;\n    hyperShadePanelGraphCommand(\"hyperShadePanel1\", \"showUpAndDownstream\");\n}")
	da_EditAndFrameShaderOutliner;

runTimeCommand
	-ann "Unlock and Fix Normals"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("string $mySel[] = `ls -sl`;\nfor($i=0; $i < size($mySel); $i++){\n    select $mySel[$i];\n    polyNormalPerVertex -ufn 1;\n    polySoftEdge -a 47;\n    select -cl;\n}\n\nselect $mySel;")
	da_UnlockAndFixNormals;

runTimeCommand
	-ann "Assign aiStandardHair to pfxHair"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `listRelatives -f -s`;\nselect $mySel[0];\nstring $myHairSystem[] = `listConnections -s 1 -d 0 -t \"hairSystem\"`;\n\n//string $myHairSystem[] = `ls -sl`;\ncreateRenderNodeCB -asShader \"surfaceShader\" aiStandardHair \"\";\nstring $myStandardHair[] = `ls -sl`;\n\nconnectAttr ($myStandardHair[0] + \".outColor\", $myHairSystem[0] + \".aiHairShader\");\n\nsetAttr ($myHairSystem[0] + \".aiOverrideHair\") 1;\n\nopenAEWindow")
	da_AiStandardHairToPfxHair;

runTimeCommand
	-ann "Toggle Light Manipulators"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if (`renderManip -q -st` == 0)\n    ShowLightManipulators;\nelse\n    HideLightManipulators;")
	da_ToggleLightManipulators;

runTimeCommand
	-ann "Toggle Camera Manipulators"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if (`renderManip -q -st` == 0)\n    ShowCameraManipulators;\nelse\n    HideCameraManipulators;")
	da_ToggleCameraManipulators;

runTimeCommand
	-ann "Auto Bevel Mesh"
	-cat "Custom Scripts.May9_Next.Modeling"
	-c ("polyPerformAction \"polySoftEdge -a 30\" e 0;\nda_EdgeHard;\npolyBevel3 -f 0.05 -oaf 1 -af 1 -d 1 -m 0 -mia 0 -c 1 -sg 2 -ws 1 -sa 47 -sn 1 -mv 1 -mvt 0.0001 -ma 180 -at 180 -ch 1;\nda_BackToObjectMode;\nShowManipulators;")
	da_AutoBevel;

runTimeCommand
	-ann "Enable MASH Bullet Gravity"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $mySel[] = `listRelatives -f -s`; \nfor ($each in $mySel)\n    setAttr ($each +\".gravityY\") -9.8;\n\ninViewMessage -pos topCenter -msg \"MASH Bullet Gravity Enable\" -fade;")
	da_MashBulletGravity;

runTimeCommand
	-ann "Disable MASH Bullet Gravity"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $mySel[] = `listRelatives -f -s`; \nfor ($each in $mySel)\n    setAttr ($each +\".gravityY\") -0;\n\ninViewMessage -pos topCenter -msg \"MASH Bullet Gravity Disable\" -fade;")
	da_MashBulletNoGravity;

runTimeCommand
	-ann "Enable MASH Bullet Ground"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $mySel[] = `listRelatives -f -s`; \nfor ($each in $mySel)\n    setAttr ($each +\".groundPlane\") 1;\n\ninViewMessage -pos topCenter -msg \"MASH Bullet Ground Enable\" -fade;")
	da_MashBulletGround;

runTimeCommand
	-ann "Disable MASH Bullet Ground"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $mySel[] = `listRelatives -f -s`; \nfor ($each in $mySel)\n    setAttr ($each +\".groundPlane\") 0;\n\ninViewMessage -pos topCenter -msg \"MASH Bullet Ground Disable\" -fade;")
	da_MashBulletNoGround;

runTimeCommand
	-ann "Copy Camera Position"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("$curPanel = `getPanel -wf`;\n$curCam = `modelPanel -q -cam $curPanel`;\n\n$curCamTX = `getAttr ($curCam +\".tx\")`;\n$curCamTY = `getAttr ($curCam +\".ty\")`;\n$curCamTZ = `getAttr ($curCam +\".ty\")`;\n$curCamRX = `getAttr ($curCam +\".rx\")`;\n$curCamRY = `getAttr ($curCam +\".ry\")`;\n$curCamRZ = `getAttr ($curCam +\".rz\")`;")
	da_CopyCameraPosition;

runTimeCommand
	-ann "Paste Camera Position"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("$curPanel = `getPanel -wf`;\n$curCam = `modelPanel -q -cam $curPanel`;\n\nsetAttr ($curCam +\".tx\") $curCamTX;\nsetAttr ($curCam +\".ty\") $curCamTY;\nsetAttr ($curCam +\".tz\") $curCamTZ;\nsetAttr ($curCam +\".rx\") $curCamRX;\nsetAttr ($curCam +\".ry\") $curCamRY;\nsetAttr ($curCam +\".rz\") $curCamRZ;")
	da_PasteCameraPosition;

runTimeCommand
	-ann "Select Influenced Vertex by Joint"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myJoint[] = `ls -sl`;\nstring $mySkinCluster[] = `listConnections -s 0 -d 1 -t \"skinCluster\"`;\nskinCluster -e -selectInfluenceVerts $myJoint[0] $mySkinCluster[0]")
	da_SelectVertexJoint;

runTimeCommand
	-ann "Make Mesh Light Visible"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n\tsetAttr ($each +\".lightVisible\") 1;\n\ninViewMessage -pos topCenter -msg \"Light Visible On\" -fade;")
	da_MeshLightVisible;

runTimeCommand
	-ann "Make Mesh Light Invisible"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n\tsetAttr ($each +\".lightVisible\") 0;\n\ninViewMessage -pos topCenter -msg \"Light Visible Off\" -fade;")
	da_MeshLightNoVisible;

runTimeCommand
	-ann "Enable Alpha Luminance"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n    setAttr ($each + \".alphaIsLuminance\") 1")
	da_FileAlphaLuminance;

runTimeCommand
	-ann "Disable Alpha Luminance"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n    setAttr ($each + \".alphaIsLuminance\") 0")
	da_FileNoAlphaLuminance;

runTimeCommand
	-ann "Set File Color Space in sRGB"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n    setAttr -type \"string\" ($each + \".colorSpace\") sRGB")
	da_FileColorSpaceSrgb;

runTimeCommand
	-ann "Set File Color Space in Raw"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n    setAttr -type \"string\" ($each + \".colorSpace\") Raw")
	da_FileColorSpaceRaw;

runTimeCommand
	-ann "Set File Filter Quadratic"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n    setAttr ($each + \".filterType\") 3")
	da_FileFilterQuadratic;

runTimeCommand
	-ann "Set File Filter Off"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySel[] = `ls -sl`;\nfor ($each in $mySel)\n    setAttr ($each + \".filterType\") 0")
	da_FileFilterOff;

runTimeCommand
	-ann "Connect MASH to nParticle"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $myWaiter[] = `ls -sl -typ \"MASH_Waiter\"`;\nstring $myParticle[] = `listRelatives -f -s -typ \"nParticle\"`;\n\nselect -d;\n\nselect -add $myParticle[0];\nselect -ne -add $myWaiter[0];\n\nMASHnNetworkConnect")
	da_MashParticle;

runTimeCommand
	-ann "Connect Tweak Node to Mesh Node, useful for create bidirectional blend shape"
	-cat "Custom Scripts.May9_Next.Rigging"
	-c ("string $myTweak[] = `ls -sl -typ \"tweak\"`;\nstring $myMesh[] = `ls -sl -typ \"mesh\"`;\n\nint $numObj = size($myMesh); \nfor($i=0; $i<$numObj; $i++){\n    connectAttr -f ($myTweak[0] + \".outputGeometry[0]\") ($myMesh[$i] + \".inMesh\");\n}")
	da_TweakToMesh;

runTimeCommand
	-ann "Create Rivet by MASH by Using Faces"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $faceSel[] = `filterExpand -sm 34`;\nstring $polySel[] = `filterExpand -sm 12`;\n\nif (size($polySel) == 1){\n    select $faceSel;\n    dR_modeObject;\n    string $myMesh[] = `listRelatives -f -s`;\n    \n    select $faceSel;\n    $myRivetSet = `sets -name \"rivetSet1\"`;\n    select $polySel;\n\tda_ZeroTransfomations;\n    $myMash = `MASHnewNetwork(\"MASH#\")`;\n    string $myMashDistribute[] = `listConnections -s 1 -d 0 -t \"MASH_Distribute\"`;\n    \n    connectAttr -f ($myRivetSet + \".message\") ($myMashDistribute[0] + \".selectionSetMessage\");\n    connectAttr -f ($myMesh[0] + \".worldMesh\") ($myMashDistribute[0] + \".inputMesh\");\n    \n    setAttr ($myMashDistribute[0] + \".arrangement\") 4;\n    setAttr ($myMashDistribute[0] + \".meshType\") 7;\n    setAttr ($myMashDistribute[0] + \".floodMesh\") 1;\n    setAttr ($myMashDistribute[0] + \".useUpVector\") 1;\n    \n    select $myMashDistribute[0];\n    openAEWindow;\n}else{\n    inViewMessage -pos topCenter -msg \"Only one mesh is allowed\" -fade;\n}")
	da_RivetMashFace;

runTimeCommand
	-ann "Create Rivet by MASH by Using Vertex"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $vertexSel[] = `filterExpand -sm 31`;\nstring $polySel[] = `filterExpand -sm 12`;\n\nif (size($polySel) == 1){\n    select $vertexSel;\n    dR_modeObject;\n    string $myMesh[] = `listRelatives -f -s`;\n    \n    select $vertexSel;\n    $myRivetSet = `sets -name \"rivetSet1\"`;\n    select $polySel;\n\tda_ZeroTransfomations;\n    $myMash = `MASHnewNetwork(\"MASH#\")`;\n    string $myMashDistribute[] = `listConnections -s 1 -d 0 -t \"MASH_Distribute\"`;\n    \n    connectAttr -f ($myRivetSet + \".message\") ($myMashDistribute[0] + \".selectionSetMessage\");\n    connectAttr -f ($myMesh[0] + \".worldMesh\") ($myMashDistribute[0] + \".inputMesh\");\n    \n    setAttr ($myMashDistribute[0] + \".arrangement\") 4;\n    setAttr ($myMashDistribute[0] + \".meshType\") 7;\n    setAttr ($myMashDistribute[0] + \".floodMesh\") 1;\n    setAttr ($myMashDistribute[0] + \".useUpVector\") 1;\n    \n    select $myMashDistribute[0];\n    openAEWindow;\n}else{\n    inViewMessage -pos topCenter -msg \"Only one mesh is allowed\" -fade;\n}")
	da_RivetMashVertex;

runTimeCommand
	-ann "Create Rivet by MASH by Using Edges"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $edgeSel[] = `filterExpand -sm 32`;\nstring $polySel[] = `filterExpand -sm 12`;\n\nif (size($polySel) == 1){\n    select $edgeSel;\n    dR_modeObject;\n    string $myMesh[] = `listRelatives -f -s`;\n    \n    select $edgeSel;\n    $myRivetSet = `sets -name \"rivetSet1\"`;\n    select $polySel;\n\tda_ZeroTransfomations;\n    $myMash = `MASHnewNetwork(\"MASH#\")`;\n    string $myMashDistribute[] = `listConnections -s 1 -d 0 -t \"MASH_Distribute\"`;\n    \n    connectAttr -f ($myRivetSet + \".message\") ($myMashDistribute[0] + \".selectionSetMessage\");\n    connectAttr -f ($myMesh[0] + \".worldMesh\") ($myMashDistribute[0] + \".inputMesh\");\n    \n    setAttr ($myMashDistribute[0] + \".arrangement\") 4;\n    setAttr ($myMashDistribute[0] + \".meshType\") 7;\n    setAttr ($myMashDistribute[0] + \".floodMesh\") 1;\n    setAttr ($myMashDistribute[0] + \".useUpVector\") 1;\n    \n    select $myMashDistribute[0];\n    openAEWindow;\n}else{\n    inViewMessage -pos topCenter -msg \"Only one mesh is allowed\" -fade;\n}")
	da_RivetMashEdge;

runTimeCommand
	-ann "Create StandIn File"
	-cat "Custom Scripts.May9_Next.Render"
	-cl "python"
	-c ("import mtoa.ui.arnoldmenu as arnoldmenu; arnoldmenu.doCreateStandInFile()")
	da_CreateStandInFile;

runTimeCommand
	-ann "Export StandIn"
	-cat "Custom Scripts.May9_Next.Render"
	-cl "python"
	-c ("import mtoa.ui.arnoldmenu as arnoldmenu; arnoldmenu.doExportStandIn()")
	da_doExportStandIn;

runTimeCommand
	-ann ""
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n\tsetAttr ($each +\".mode\") 0;\n")
	da_aiStandInBoundryBox;

runTimeCommand
	-ann ""
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n\tsetAttr ($each +\".mode\") 2;")
	da_aiStandinPolyWire;

runTimeCommand
	-ann ""
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("string $mySel[] = `ls -sl`; \nfor ($each in $mySel)\n\tsetAttr ($each +\".mode\") 4;")
	da_aiStandinPointCloud;

runTimeCommand
	-ann "Scatter a Mesh on a Surface"
	-cat "Custom Scripts.May9_Next.MASH"
	-c ("string $mySel[] = `ls -sl`;\nif ( `size($mySel)` == 2 ){\n    string $myResult = `confirmDialog -title \"Confirm\" -message \"Make sure you have selected before the object mesh, do you continue?\" \n\t-button \"Yes\" -button \"No\" -defaultButton \"Yes\" \n\t-cancelButton \"No\" -dismissString \"No\"`;\n\tif ($myResult == \"Yes\") {\n        select $mySel[0];\n        MASHnewNetwork(\"MASH#\");\n        string $myMashNerwork[] = `listConnections -s true -d false`;\n        \n        // Create connection and set MASH to Voxelize\n        connectAttr ($mySel[1] + \".worldMesh[0]\", $myMashNerwork[0] + \".inputMesh\");\n        \n        setAttr ($myMashNerwork[0] + \".arrangement\") 4;\n        setAttr ($myMashNerwork[0] + \".meshType\") 1;\n        setAttr ($myMashNerwork[0] + \".useUpVector\") 1;\n        setAttr ($myMashNerwork[0] + \".areaBasedScatter\") 1;\n        \n        select $myMashNerwork[0];\n        \n        openAEWindow;\n    }\n}else{\n    string $myResult = `confirmDialog -title \"Warning\" -message \"Please select only two meshes, first the object than the surface.\" \n\t-button \"Ok\" -defaultButton \"Ok\" \n\t-cancelButton \"Ok\" -dismissString \"Ok\"`;\n}")
	da_SurfaceScatterMash;

runTimeCommand
	-ann "Return the Length of Selected Curve"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `ls -sl`;\nfloat $myLength = `arclen $mySel[0]`;\n\ninViewMessage -pos topCenter -msg (\"Curve length \" + $myLength) -fade;\nprint ($myLength + \"\\n\");")
	da_CurveLength;

runTimeCommand
	-ann "Clean HUD"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("setFrameRateVisibility 0;\nsetCurrentFrameVisibility 0;\nsetObjectDetailsVisibility 0;\nsetSceneTimecodeVisibility 0;\nsetPolyCountVisibility 0;\nsetFocalLengthVisibility 0;\nSetEvaluationManagerHUDVisibility 0;\nif (`about -api` >= 20190000)da_NoEvalCacheHUD;")
	da_CleanHUD;

runTimeCommand
	-ann "Enable HUD"
	-cat "Custom Scripts.May9_Next.Scene"
	-c ("setFrameRateVisibility 1;\nsetCurrentFrameVisibility 1;\nsetObjectDetailsVisibility 1;\nsetSceneTimecodeVisibility 1;\nsetPolyCountVisibility 1;\nsetFocalLengthVisibility 1;\nSetEvaluationManagerHUDVisibility 1;\nif (`about -api` >= 20190000)da_EvalCacheHUD;")
	da_EnableHUD;

runTimeCommand
	-ann "Toggle HUD"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if (`about -api` >= 20190000){\n    int $HUDCheck = `optionVar -q frameRateVisibility` && `optionVar -q currentFrameVisibility` && `optionVar -q objectDetailsVisibility` && `optionVar -q sceneTimecodeVisibility` && `optionVar -q polyCountVisibility` && `optionVar -q focalLengthVisibility` && `optionVar -q evaluationVisibility` && `optionVar -q cacheVisibility`;\n        if ($HUDCheck == false)\n            da_EnableHUD;\n    \n        if ($HUDCheck == true)\n            da_CleanHUD;\n}else{\n    int $HUDCheck = `optionVar -q frameRateVisibility` && `optionVar -q currentFrameVisibility` && `optionVar -q objectDetailsVisibility` && `optionVar -q sceneTimecodeVisibility` && `optionVar -q polyCountVisibility` && `optionVar -q focalLengthVisibility` && `optionVar -q evaluationVisibility`;\n        if ($HUDCheck == false)\n            da_EnableHUD;\n    \n        if ($HUDCheck == true)\n            da_CleanHUD;\n}")
	da_ToggleHUD;

runTimeCommand
	-ann "Convert Particle to Mesh"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("doParticleToPoly;\n\nstring $objectTransform[] = `ls -sl`;\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\n\naddAttr -ln \"Threshold\"  -at double  -min 0 -dv 1 $objectTransform;\naddAttr -ln \"Radius\"  -at double  -min 0 -dv 4 $objectTransform;\nsetAttr -e -k true ($objectTransform[0] + \".Threshold\");\nsetAttr -e -k true ($objectTransform[0] + \".Radius\");\n\nstring $myShapeConnection[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myShapeConnection;\n\nconnectAttr($objectTransform[0] + \".Threshold\", $myShapeConnection[0] + \".threshold\");\nconnectAttr($objectTransform[0] + \".Radius\", $myShapeConnection[0] + \".blobbyRadiusScale\");    \n\nsetAttr ($myShapeConnection[0] + \".meshTriangleSize\") 0.4;\nsetAttr ($myShapeConnection[0] + \".maxTriangleResolution\") 50;\nsetAttr ($myShapeConnection[0] + \".meshMethod\") 3;\nsetAttr ($myShapeConnection[0] + \".meshSmoothingIterations\") 2")
	da_ParticleToMesh;

runTimeCommand
	-ann "Convert Fluid to Mesh"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("performFluids 1 FluidToPoly 0;\n\nstring $objectShape[] = `listRelatives -f -s`;\nselect $objectShape;\n\nstring $myShapeConnection[] = `listConnections -s 1 -d 0 -sh 1`;\nselect $myShapeConnection;\n\nsetAttr ($myShapeConnection[0] + \".meshMethod\") 1;\nsetAttr ($myShapeConnection[0] + \".meshResolution\") 2;\nsetAttr ($myShapeConnection[0] + \".meshSmoothingIterations\") 1;")
	da_FluidToMesh;

runTimeCommand
	-ann "Track Mouse Movment and Record Animation"
	-cat "Custom Scripts.May9_Next.Animate"
	-c ("currentUnit -a rad;\nrecordAttr -at \"tx\" -at \"ty\" -at \"tz\" -at \"rx\" -at \"ry\" -at \"rx\" -at \"sx\" -at \"sy\" -at \"sz\";\nplay -record;\n\ncurrentUnit -a deg;")
	da_MouseTrack;

runTimeCommand
	-ann "Apply Curve Collector to Selected Curves"
	-cat "Custom Scripts.May9_Next.Render"
	-cl "python"
	-c ("import mtoa.ui.arnoldmenu as arnoldmenu; arnoldmenu.doCreateCurveCollector()")
	da_aiCurveCollector;

runTimeCommand
	-ann "Toggle Mouse Wheel"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("int $myScrollWheel = `optionVar -q \"useScrollWheel\"`;\n\nif ($myScrollWheel == 0){\n    mouse -esw 1;\n    savePrefsChanges;\n}else{\n    mouse -esw 0;\n\tsavePrefsChanges;\n}")
	da_ToggleMouseWheel;

runTimeCommand
	-ann "Combine Curves"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `ls -sl`;\nstring $mySelShape[] = `listRelatives -f -s`;\nstring $myTransform[] = `ls -sl -head 1`;\nmakeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;\ncatchQuiet(`parent -r -s $mySelShape $myTransform`);\nselect $mySel;\nselect -d $myTransform;\ndelete;\nselect $myTransform;\nrename CombinedCurve1;\nxform -cpc;")
	da_CombineCurves;

runTimeCommand
	-ann "Create Nucleus Wind Controller"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $myNucleus[] = `ls -sl`;\nda_Compass;\nstring $myDirection[] = `ls -sl`;\n\nconnectAttr($myDirection[0] + \".VectorX\", $myNucleus[0] + \".windDirectionX\");\nconnectAttr($myDirection[0] + \".VectorY\", $myNucleus[0] + \".windDirectionY\");\nconnectAttr($myDirection[0] + \".VectorZ\", $myNucleus[0] + \".windDirectionZ\");")
	da_NucleusWindController;

runTimeCommand
	-ann "Add Air Wind Controller"
	-cat "Custom Scripts.May9_Next.Dynamics"
	-c ("string $myNucleus[] = `ls -sl`;\nda_Compass;\nstring $myDirection[] = `ls -sl`;\n\nconnectAttr($myDirection[0] + \".VectorX\", $myNucleus[0] + \".directionX\");\nconnectAttr($myDirection[0] + \".VectorY\", $myNucleus[0] + \".directionY\");\nconnectAttr($myDirection[0] + \".VectorZ\", $myNucleus[0] + \".directionZ\");")
	da_AirWindController;

runTimeCommand
	-ann "Add Physical Sky to Sky Dome"
	-cat "Custom Scripts.May9_Next.Render"
	-c ("string $mySkyDomeLight[] = `listRelatives -f -s`;\nstring $myColorCheck[] = `listConnections ($mySkyDomeLight[0] + \".color\")`;\nif($myColorCheck[0] == \"\"){\n    createNode aiPhysicalSky;\n    string $myPhysicalSky[] = `ls -sl`;\n    connectAttr ($myPhysicalSky[0] + \".outColor\") ($mySkyDomeLight[0] + \".color\");\n}else{\n    warning \"A color node is already connected to the current Sky Dome\";\n}")
	da_AddPhysicalSky;

runTimeCommand
	-ann "Toggle Two Sided Lighting"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $selectedPanel = `getPanel -wf`;\nint $twoSidedLighting = `modelEditor -q -tsl $selectedPanel`;\nif(`modelEditor -ex $selectedPanel`)\n{\n    modelEditor -e -tsl (!$twoSidedLighting) $selectedPanel;\n}")
	da_ToggleTwoSidedLighting;

runTimeCommand
	-ann "Toggle Active Components Xray"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $selectedPanel = `getPanel -wf`;\nint $activeComponentsXray = `modelEditor -q -acx $selectedPanel`;\nif(`modelEditor -ex $selectedPanel`)\n{\n    modelEditor -e -acx (!$activeComponentsXray) $selectedPanel;\n}")
	da_ToggleActiveComponentsXray;

runTimeCommand
	-ann "Toggle Joint Xray"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("string $selectedPanel = `getPanel -wf`;\nint $jointXray = `modelEditor -q -jx $selectedPanel`;\nif(`modelEditor -ex $selectedPanel`)\n{\n    modelEditor -e -jx (!$jointXray) $selectedPanel;\n}")
	da_ToggleJointXray;

runTimeCommand
	-ann "Toggle Motion Trial Handles"
	-cat "Custom Scripts.May9_Next.Toggle"
	-c ("if(`getAttr \"motionTrail1HandleShape.showInTangent\"` || `getAttr \"motionTrail1HandleShape.showInTangent\"`){\n    setAttr \"motionTrail1HandleShape.showInTangent\" false;\n    setAttr \"motionTrail1HandleShape.showOutTangent\" false;\n}else{\n    setAttr \"motionTrail1HandleShape.showInTangent\" true;\n    setAttr \"motionTrail1HandleShape.showOutTangent\" true;\n}")
	da_ToggleMotionTrialHandles;

runTimeCommand
	-ann "Extract Curve Shape"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $mySel[] = `ls -sl`;\nselect -cl;\nGroup;\nrename nurbsCurve1;\nstring $myGroup[] = `ls -sl`;\ncatchQuiet(`parent -r -s $mySel $myGroup`);\nCenterPivot")
	da_ExtractCurveShape;

runTimeCommand
	-ann "Separe Combined Curves"
	-cat "Custom Scripts.May9_Next.Object"
	-c ("string $myCombineSel[] = `ls -sl`;\nstring $myShape[] = `listRelatives -f -s`;\n$myShapeSize = size($myShape);\nfor($i=0; $i<$myShapeSize; $i++){\n    select $myCombineSel[0];\n    pickWalkDown;\n    da_ExtractCurveShape;\n}\nselect $myCombineSel[0];\ndelete;")
	da_SepareCurves;
}